/* -*-c++-*- */

#ifndef TENG_PATCHGROUP
#define TENG_PATCHGROUP 1

#include <osg/PagedLOD>
#include <osg/Vec2d>

#include <osgDB/Registry>

namespace teng
{
class Patch;

class PatchGroup : public osg::PagedLOD
{
public:
    PatchGroup();
    PatchGroup(const PatchGroup&,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

    META_Node(teng, PatchGroup);
    
    virtual void traverse(osg::NodeVisitor& nv);
    // patch extents come from the PatchOptions object stored with the node.
    void getPatchExtents(osg::Vec2d& lowerLeft, osg::Vec2d& upperRight) const;
protected:
    ~PatchGroup();
};

// Database options for creating a patch

class PatchOptions : public osgDB::Options
{
public:
    PatchOptions();
    PatchOptions(const std::string& str);
    PatchOptions(const PatchOptions& rhs,
                 const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);

    META_Object(teng, PatchOptions);
    void setPatchExtents(const osg::Vec2d& lowerLeft,
                         const osg::Vec2d& upperRight)
    {
        _lowerLeft = lowerLeft;  _upperRight = upperRight;
    }
    void getPatchExtents(osg::Vec2d& lowerLeft, osg::Vec2d& upperRight) const
    {
        lowerLeft = _lowerLeft;  upperRight = _upperRight;
    }
    void setPatchLevel(int level) { _level = level; }
    int getPatchLevel() const { return _level; }
    void setMaxLevel(int maxLevel) { _maxLevel = maxLevel; }
    int getMaxLevel() const { return _maxLevel; }
    virtual void fillPatch(const std::string& filename, Patch* patch);
    virtual osg::Node* createPatch(const std::string& filename);
protected:
    osg::Vec2d _lowerLeft;
    osg::Vec2d _upperRight;
    int _level;
    int _maxLevel;
};

class PatchFactory : public osg::Referenced
{
public:
    static PatchFactory* instance();
    void setPatchOptions(PatchOptions* options) { _patchOptions = options; }
    PatchOptions* getPatchOptions() const { return _patchOptions; }
    /** Create the top level of a tree of patches.
     */
    virtual osg::Node* createPatchGroup(const std::string& filename);
protected:
    PatchFactory();
    virtual ~PatchFactory();
    osg::ref_ptr<PatchOptions> _patchOptions;
};
}
#endif
