/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MODEL_LAYER_H
#define OSGEARTH_MODEL_LAYER_H 1

#include <osgEarth/Common>
#include <osgEarth/Config>
#include <osgEarth/ModelSource>
#include <list>

namespace osgEarth
{
    class Map;

    class OSGEARTH_EXPORT ModelLayer : public osg::Referenced
    {
    public:
        /**
         * Constructs a new model layer based on a configuration setup.
         */
        ModelLayer( const std::string& name, const std::string& driver, const Config& driverConf );
        
        /**
         * Constructs a new model layer with a user-provided model source.
         */
        ModelLayer( const std::string& name, ModelSource* source );

    public:

        osg::Node* createNode( ProgressCallback* progress =0L );

    public: // properties

        // minimum LOD range of this model layer.
        optional<float>& minRange() { return _minRange; }
        const optional<float>& minRange() const { return _minRange; }

        // maximum LOD range of this model layer.
        optional<float>& maxRange() { return _maxRange; }
        const optional<float>& maxRange() const { return _maxRange; }

    public:

        void initialize( const std::string& referenceURI, const Map* map );

    private:
        std::string _referenceURI;
        std::string _name;
        std::string _driver;
        Config _driverConf;
        osg::ref_ptr<ModelSource> _modelSource;
        optional<float> _minRange;
        optional<float> _maxRange;
    };

    typedef std::list< osg::ref_ptr<ModelLayer> > ModelLayerList;
}

#endif // OSGEARTH_MODEL_LAYER_H

