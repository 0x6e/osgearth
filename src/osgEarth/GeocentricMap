/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_GEOCENTRIC_MAP_ENGINE_H
#define OSGEARTH_GEOCENTRIC_MAP_ENGINE_H 1

#include <osgEarth/Common>
#include <osgEarth/MapEngine>
#include <osgEarth/Map>
#include <osgEarth/VersionedTerrain>
#include <osg/Node>
#include <osg/ClusterCullingCallback>

namespace osgEarth
{
    /**
     * A Map that generates geocentric (round-earth/global) scene graph components.
     *
     * This is a internal class - do not export
     */
    class GeocentricMapEngine : public MapEngine
    {
    public:
        /**
         * Constructs a new geocentric map
         */
        GeocentricMapEngine( const MapEngineProperties& props );
        
    protected: // Map interface

        virtual osg::Node* createQuadrant(
            Map* map, 
            osgTerrain::Terrain* terrain,
            const TileKey* key,
            bool populateLayers );

        static osg::ClusterCullingCallback* createClusterCullingCallback(
            osgTerrain::TerrainTile* tile, 
            osg::EllipsoidModel* et);   

    private:
        
        virtual osg::Node* createPlaceholderTile(
            Map* map,
            osgTerrain::Terrain* terrain,
            const TileKey* key );

        virtual osg::Node* createPopulatedTile(
            Map* map, 
            osgTerrain::Terrain* terrain,
            const TileKey* key );        
        
        void addPlaceholderImageLayers(
            VersionedTile* tile,
            VersionedTile* ancestorTile,
            const MapLayerList& imageMapLayers,
            GeoLocator* defaultLocator,
            const TileKey* key);

        void addPlaceholderHeightfieldLayer(
            VersionedTile* tile,
            VersionedTile* ancestorTile,
            GeoLocator* defaultLocator,
            const TileKey* key,
            const TileKey* ancestorKey );
    };
}

#endif // OSGEARTH_GEOCENTRIC_MAP_ENGINE_H