/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_CUBE_H
#define OSGEARTH_CUBE_H 1

#include <osgEarth/Common>
#include <osgEarth/Profile>
#include <osgEarth/TileKey>
#include <osgEarth/Locators>

namespace osgEarth
{
    /**
     * Utilities for converting cube-face coordinates.
     */
    class OSGEARTH_EXPORT CubeUtils
    {
    public:
        static bool latLonToFaceCoords(
            double lat_deg, double lon_deg,
            double& out_x, double& out_y, int& out_face,
            int faceHint = -1 );

        static bool faceCoordsToLatLon(
            double x, double y, int face,
            double& out_lat_deg, double& out_lon_deg );

        static int getFace( const TileKey* key );
    };

    ///**
    // * Utilities specifically for dealing with the Unified Cube Profile. This
    // * profile represents the 6 cube faces as a single 6x1 tile block.
    // */
    //class OSGEARTH_EXPORT UnifiedCubeProfileUtils
    //{
    //public:
    //    static const Profile* createProfile();

    //    static int getFace( const TileKey* key );
    //};

    /**
     * osgTerrain locator for positioning data on the terrain using a cube-face
     * coordinate system.
     */
    class CubeFaceLocator : public GeoLocator
    {
    public:
        CubeFaceLocator(unsigned int face);

        // This method will generate geocentric vertex coordinates, given local tile
        // coordinates (0=>1).
        bool convertLocalToModel(const osg::Vec3d& local, osg::Vec3d& world) const;

        // This method will generate the texture coordinates for a given location on
        // the globe.
        bool convertModelToLocal(const osg::Vec3d& world, osg::Vec3d& local) const;

    private:
        unsigned int _face;
    };

    /**
     * The "Cube" SRS represents a 6-face cube, each face being in unit coordinates (0,0=>1,1).
     * the cube as whole lays out all six faces side by side, resulting in a space 
     * measuring (0,0=>6,1). The face number corresponds to the x-axis ordinal.
     */
    class CubeSpatialReference : public SpatialReference
    {
    public:
        CubeSpatialReference(void* handle);

        virtual GeoLocator* createLocator(
            double xmin, double ymin, double xmax, double ymax,
            bool plate_carre =false) const;

        // CUBE is a projected coordinate system.
        virtual bool isGeographic() const { return false; }
        virtual bool isProjected() const { return true; }

        // This SRS uses a WGS84 lat/long SRS under the hood for reprojection. So we need the
        // pre/post transforms to move from cube to latlong and back.
        virtual bool preTransform(double& x, double& y, void* context) const;
        virtual bool postTransform(double& x, double& y, void* context) const;

        virtual bool transformExtent(
            const SpatialReference* to_srs,
            double& in_out_xmin,
            double& in_out_ymin,
            double& in_out_xmax,
            double& in_out_ymax,
            void* context) const;

    protected:
        bool toFace( double& in_out_x, double& in_out_y, int& out_face ) const;
        bool toFace( double& in_out_xmin, double& in_out_ymin, double& in_out_xmax, double& in_out_ymax, int& out_face ) const;
        bool fromFace( double& in_out_x, double& in_out_y, int face ) const;
    };

    /**
     * Custom profile for the unified cube tile layout.
     * TODO: describe here
     */
    class OSGEARTH_EXPORT UnifiedCubeProfile : public Profile
    {
    public:
        UnifiedCubeProfile();

    public: // utilities

        /**
         * Gets the cube face associated with a tile key (in cube srs).
         */
        static int getFace( const TileKey* key );

    public: // Profile

        virtual void getIntersectingTiles(
            const GeoExtent& extent,
            std::vector<osg::ref_ptr<const TileKey> >& out_intersectingKeys ) const;

    private:

        GeoExtent _faceExtent_gcs[6];
    };
}

#endif // OSGEARTH_CUBE_H
