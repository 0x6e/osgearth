/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2009 Pelican Ventures, Inc.
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGEARTH_MAP_ENGINE_PROPERTIES_H
#define OSGEARTH_MAP_ENGINE_PROPERTIES_H 1

#include <osgEarth/Common>

namespace osgEarth
{
    class OSGEARTH_EXPORT MapEngineProperties
    {
    public:
        MapEngineProperties();
        MapEngineProperties( const MapEngineProperties& rhs );
        MapEngineProperties& operator = ( const MapEngineProperties& rhs );
       
        /**
         * Sets the scale factor for height-field values.
         *
         * @param scale
         *      Multiplier for heights; default = 1.0
         */
        void setVerticalScale( float scale );

        /**
         * Gets the scale factor for height-field values.
         */
        float getVerticalScale() const;
        
        /**
         * Sets the skirt ratio to be used when creating height field tiles. This
         * is the ratio of the height of the tile "skirt" to the width of the tile.
         *
         * @param skirtRatio
         *      The skirt ratio; default = 0.02
         */
        void setSkirtRatio(float skirt_ratio);
        
        /**
         * Gets the skirt ratio to be used when creating height field tiles
         *
         * @return The skirt ratio
         */
        float getSkirtRatio() const;

        /**
         *Sets the sample ratio for height fields
         */
        void setSampleRatio(float sample_ratio);

        /**
         Gets the sample ratio for height fields
         */
        float getSampleRatio() const;

        /** 
         * Sets the hostname of a proxy server to use for all HTTP communications.
         */
        void setProxyHost( const std::string& host );

        /**
         * Gets the hostname of a proxy server to use for all HTTP communications.
         */
        const std::string& getProxyHost() const;

        /**
         * Sets the TCP port for proxy requests to the proxy host. Default is 8080.
         */
        void setProxyPort( unsigned short port );

        /** 
         * Gets the TCP port for proxy requests to the proxy host.
         */
        unsigned short getProxyPort() const;

        /**
         * Sets the minimum tile LOD range as a factor of the tile's radius.
         * The default value = 6.0.
         */
        void setMinTileRangeFactor( float factor );

        /**
         * Gets the minimum tile LOD range as a factor of the tile's radius.
         */
        float getMinTileRangeFactor() const;

        /**
         * Sets whether or not the map should be run exclusively off of the cache.
         * @param cacheOnly
         *       Whether or not the map should be only off of the cache.
         */
        void setCacheOnly(bool cacheOnly);

        /**
         * Gets whether or not the map should be run exclusively off of the cache.        
         * @returns
         *       Whether or not the map should be run in "offline" mode
         */
        bool getCacheOnly() const;

        /**
         * Gets whether or not to normalize terrain tile edges
         */
        bool getNormalizeEdges() const;

        /**
         *Sets whether or not to normalize terrain tile edges
         */
        void setNormalizeEdges(bool normalizeEdges);

        /**
         *Gets whether or not to apply the default layer combination logic using TexEnvCombine.
         */
        bool getCombineLayers() const;

        /**
         *Sets whether or not to apply the default layer combination logic using TexEnvCombine.
         *By setting this to false, the developer is assuming all control of the way that
         *the layers are combined using shaders, TexEnvCombine, etc.
         */
        void setCombineLayers(bool combineLayers);

        /**
         * Sets the absolute filename that the map was loaded from
         */
        void setFilename(const std::string &filename);

        /**
         * Gets the absolute filename that the map was loaded from
         */
        const std::string& getFilename() const;   

        /**
         * Sets whether map LODs should be loaded preemptively. If true (the default),
         * the LOD corresponding to the current camera position will always load first.
         * If false, a map LOD will not load until all lower LODs have loaded.
         */
        void setPreemptiveLOD( bool value );

        /**
         * Gets whether map LODs should be loaded preemptively (i.e., the most relevent LOD
         * should load with the highest priority, instead of the lowest LOD.)
         */
        bool getPreemptiveLOD() const;

        /**
         * Sets whether to load tile layers asynchronously using a thread pool. This option is
         * only available if preemptive LOD mode is enabled. When active, osgEarth will load 
         * each terrain tile layer (imagery and heightfield) in a background thread, and merge
         * the data into the tile when it is available. This is useful when you have a responsive
         * data source that can handle many simultaneous requests (like many WMS-C type servers).
         */
        void setAsyncTileLayers( bool value );

        /**
         * Gets whether asynchronous layer loading is enabled. See setAsyncTileLayers for
         * more details.
         */
        bool getAsyncTileLayers() const;     

        /**
         *Gets the number of loading threads to use per logical processor.  Only used in preemptive mode
         */
        const optional<int>& getNumLoadingThreadsPerLogicalProcessor() const;

        /**
         *Sets the number of loading threads to use per logical processor.  Only used in preemptive mode
         */
        void setNumLoadingThreadsPerLogicalProcessor( int numLoadingThreadsPerLogicalProcessor );

        const optional<int>& getNumLoadingThreads() const;
        void setNumLoadingThreads( int numLoadingThreads );

        const optional<int>& getNumTileGeneratorThreads() const;
        void setNumTileGeneratorThreads( int num );

        /**
         * Available techniques for compositing multiple image layers at runtime.
         */
		enum LayeringTechnique
		{
            /** Use multiple rendering passes to blend image layers together */
			MULTIPASS,

            /** Use a multitexture control to blend image layers together (DEFAULT) */
			MULTITEXTURE
		};

		/**
		 * Gets the technique that should be used when rendering TerrainTiles
		 */
		const optional<LayeringTechnique>& getLayeringTechnique() const;

		/**
		 * Sets the terrain technique that should be used when rendering TerrainTiles
		 */
		void setLayeringTechnique(LayeringTechnique technique);

        /**
         * Gets the maximum LOD that the map should subdivide to
         */
        unsigned int getMaxLOD() const;

        /**
         * Sets the maximum LOD that the map should subdivide to
         */
        void setMaxLOD( unsigned int max_lod );

        const optional<bool>& getEnableLighting() const;
        void setEnableLighting( bool value );

    private:
            
        std::string _filename;
        std::string _name;
        float _vertical_scale;
        float _skirt_ratio;   
        float _sample_ratio;
        std::string _proxy_host;
        unsigned short _proxy_port;
        float _min_tile_range_factor;
        bool _cache_only;
        bool _normalize_edges;
        bool _combine_layers;
        bool _preemptive_lod;
        bool _use_task_service;
		optional<LayeringTechnique> _layering_technique;
        optional<int> _num_loading_threads_per_logical_processor;
        optional<int> _num_loading_threads;
        optional<int> _num_tile_gen_threads;
        unsigned int _max_lod;
        optional<bool> _lighting;
    };
}

#endif // OSGEARTH_MAP_ENGINE_PROPERTIES_H
