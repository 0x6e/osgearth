/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_SPATIAL_REFERENCE_H
#define OSGEARTH_SPATIAL_REFERENCE_H 1

#include <osgEarth/Common>
#include <osg/Referenced>
#include <osg/CoordinateSystemNode>
#include <OpenThreads/ReentrantMutex>

namespace osgEarth
{
    /** 
     * SpatialReference holds information describing the reference ellipsoid/datum
     * and the projection of geospatial data.
     */
    class OSGEARTH_EXPORT SpatialReference : public osg::Referenced
    {
    public:
        static SpatialReference* create( const std::string& init );

        static SpatialReference* createFromWKT( const std::string& wkt );

        static SpatialReference* createFromPROJ4( const std::string& proj4 );

    public:

        /** Transform a point to another SRS. */
        bool transformTo(
            double x, double y,
            const SpatialReference* to_srs,
            double& out_x, double& out_y ) const;

        /** True is this is a geographic SRS (i.e. unprojected lat/long) */
        bool isGeographic() const;

        /** True if this is a projected SRS (i.e. local coordinate system) */
        bool isProjected() const;

        /** Gets the readable name of this SRS. */
        const std::string& getName() const;

        /** Gets the underlying reference ellipsoid of this SRS */
        const osg::EllipsoidModel* getEllipsoid() const;

    protected:
        virtual ~SpatialReference();

    private:
        SpatialReference( void* handle, bool take_ownership );
        void init();

        bool _initialized;
        void* _handle;
        bool _owns_handle;
        bool _is_geographic;
        std::string _name;
        osg::ref_ptr<osg::EllipsoidModel> _ellipsoid;
    };
}


#endif // OSGEARTH_SPATIAL_REFERENCE_H
