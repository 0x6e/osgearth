/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_GEODATA_H
#define OSGEARTH_GEODATA_H 1

#include <osg/Referenced>
#include <osg/Image>
#include <osg/Shape>
#include <osgEarth/Common>
#include <osgEarth/SpatialReference>
#include <osgEarth/HeightFieldUtils>


namespace osgEarth
{
    /**
     * A georeferenced extent. A bounding box that is aligned with a
     * spatial reference's coordinate system.
     */
    class OSGEARTH_EXPORT GeoExtent
    {
    public:
        /** Default ctor creates an "invalid" extent */
        GeoExtent(); 

        /** Contructs a valid extent */
        GeoExtent(
            const SpatialReference* srs,
            double xmin, double ymin,
            double xmax, double ymax );

        /** Copy ctor */
        GeoExtent( const GeoExtent& rhs );

        bool operator == ( const GeoExtent& rhs ) const;
        bool operator != ( const GeoExtent& rhs ) const;

        const SpatialReference* getSRS() const;

        double xMin() const;
        double yMin() const;
        double xMax() const;
        double yMax() const;

        double width() const;
        double height() const;

        bool isValid() const;

        /** Returns this extent transformed into another spatial reference. */
        GeoExtent transform( const SpatialReference* to_srs ) const;

        void getBounds(double &xmin, double &ymin, double &xmax, double &ymax) const;

        bool contains(const SpatialReference* srs, double x, double y);

    public:
        static GeoExtent INVALID;

    private:
        osg::ref_ptr<const SpatialReference> _srs;
        double _xmin, _ymin, _xmax, _ymax;
    };


    /**
     * A georeferenced image.
     */
    class OSGEARTH_EXPORT GeoImage : public osg::Referenced
    {
    public:
        GeoImage( osg::Image* image, const GeoExtent& extent );

    public:
        osg::Image* getImage() const;

        const GeoExtent& getExtent() const;

        const SpatialReference* getSRS() const;

        //GeoImage* crop( double xmin, double ymin, double xmax, double ymax ) const;

        GeoImage* crop( const GeoExtent& extent,
                        bool exact = false,
                        unsigned int width = 0,
                        unsigned int height = 0) const;

        GeoImage* reproject(const SpatialReference* to_srs, const GeoExtent* to_extent = 0, unsigned int width = 0, unsigned int height = 0) const;

    private:
        osg::ref_ptr<osg::Image> _image;
        GeoExtent _extent;
    };

    typedef std::vector< osg::ref_ptr<GeoImage> > GeoImageList;

    /**
     * A georeferenced heightfield
     */
    class OSGEARTH_EXPORT GeoHeightField : public osg::Referenced
    {
    public:
        GeoHeightField(osg::HeightField* heightField, const GeoExtent& extent);

        bool getElevation(const SpatialReference* srs, double x, double y, ElevationInterpolation interp, float &elevation);

        const GeoExtent& getGeoExtent() const;

        const osg::HeightField* getHeightField() const;

    protected:
        osg::ref_ptr<osg::HeightField> _heightField;
        GeoExtent _extent;
    };
}

#endif // OSGEARTH_GEODATA_H
