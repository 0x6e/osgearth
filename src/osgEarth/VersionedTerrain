/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2009 Pelican Ventures, Inc.
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGEARTH_VERSIONED_TERRAIN
#define OSGEARTH_VERSIONED_TERRAIN 1

#include <osgEarth/TaskService>
#include <osgEarth/Locators>
#include <osgEarth/Profile>
#include <osgTerrain/Terrain>
#include <osgTerrain/TerrainTile>
#include <OpenThreads/ReadWriteMutex>

namespace osgEarth
{
    class Map;
    class MapEngine;
    class VersionedTerrain;
    class VersionedTile;

    // Please refer the refreshFamily() method for more info on this structure.
    struct Relative {
        bool expected;
        int elevLOD;
        osgTerrain::TileID tileID;
    };

    //typedef std::vector<Relative> Relatives;

    /**
     * An OSG terrain tile that supports change detection.
     *
     * A VersionedTile tracks a "terrain revision" number. If the terrian revision differs
     * from the parent Terrain's revision, that measn the tile is obselete and needs to
     * be regenerated or updates. 
     *
     * The VersionedTile also maintains a Tile Revision number. Every change to the data in the
     * tile itself warrants a new revision number. This way, external processes that rely
     * on the contents of a Tile can detect changes.
     *
     * Note: the terrain revision and the tile revision are unrelated!
     */
    class VersionedTile : public osgTerrain::TerrainTile
    {
    public:
        VersionedTile( const TileKey* key, GeoLocator* keyLocator );

        /** Gets the tilekey associated with this tile. */
        const TileKey* getKey() const;

        /** Sets whether to use the TaskService to schedule per-layer background data loading. */
        void setUseLayerRequests( bool );
        bool getUseLayerRequests() const { return _useLayerRequests; }

        /** Sets whether to update the tile layer by layer vs. rebuidling the entire tile. */
        void setUsePerLayerUpdates( bool );

        /**
         * Gets the terrain revision that this tile is in sync with.
         */
        int getTerrainRevision() const;

        /**
         * Sets the terrain revision that this tile is in sync with.
         */
        void setTerrainRevision( int revision );

        /**
         * Returns true if this tile is in sync with its parent Terrain (i.e., their
         * version numbers are equal).
         */
        bool isInSyncWithTerrain() const;

        /**
         * Bumps this tile's revision number.
         */
        void incrementTileRevision();

        /**
         * Gets this tile's revision number.
         */
        int getTileRevision() const;

        /**
         * Gets the revision # of the generated geometry for this tile. If this
         * changes from the previous frame, that means the tile's geometry changed.
         */
        int getGeometryRevision() const;

        /** Updates and services this tile's service pending requests. */
        //void servicePendingRequests( int frameStamp );
        void servicePendingImageRequests( int stamp );
        void servicePendingElevationRequests( int stamp, bool tileTableLocked );

        /** Setting this hint tells the tile whether it should bother trying to load elevation data. */
        void setHasElevationHint( bool hasElevation );

        /** Force the tile to compile its geometry now. The new geometry will join the
            scene graph on the next update traversal. */
        //void preCompile();

        /** Gets whether the tile's real (not placeholder) elevation data has been loaded. */
        bool isElevationLayerUpToDate() const;

        /** Gets or sets the LOD of this tile's current heightfield data. */
        int getElevationLOD() const;
        void setElevationLOD( int lod );

        /** Gets the terrain object to which this tile belongs. */
        class VersionedTerrain* getVersionedTerrain();
        const class VersionedTerrain* getVersionedTerrain() const;

        OpenThreads::ReadWriteMutex& getTileLayersMutex();

        bool cancelRequests();

        void updateImagery( unsigned int layerId, Map* map, MapEngine* engine );

        void setTileGenNeeded( bool tileGenNeeded );
        bool getTileGenNeeded() const;

        bool getUseTileGenRequest() const;

        Relative* getFamily();

    public: // OVERRIDES

        virtual void traverse( class osg::NodeVisitor& nv );

        /** If State is non-zero, this function releases any associated OpenGL objects for
        * the specified graphics context. Otherwise, releases OpenGL objects
        * for all graphics contexts. */
        virtual void releaseGLObjects(osg::State* = 0) const;

    protected:

        ~VersionedTile();


    private:
        int  _terrainRevision;
        int  _tileRevision;
        int  _geometryRevision;
        bool _useLayerRequests;
        bool _requestsInstalled;
        bool _usePerLayerUpdates;
        bool _hasElevation;
        bool _elevationLayerDirty;
        bool _colorLayersDirty;
        bool _elevationLayerRequested;
        bool _elevationLayerUpToDate;
        int  _elevationLOD;
        bool _tileRegisteredWithTerrain;
        bool _useTileGenRequest;
        bool _tileGenNeeded;

        osg::ref_ptr<const TileKey> _key;
        osg::ref_ptr<GeoLocator> _keyLocator;
        TaskRequestList _requests;
        osg::ref_ptr<TaskRequest> _elevRequest;
        osg::ref_ptr<TaskRequest> _elevPlaceholderRequest;
        osg::ref_ptr<TaskRequest> _tileGenRequest;
        int _numActiveRequests;    
   

        // this is an obs ptr so we can "cache" the parent tile reference and refresh it 
        // if the parent tile changes (which it could if it gets rebuilt)
        //osg::observer_ptr<VersionedTile> _parentTileObserver;
        //osg::ref_ptr<VersionedTile> _parentTile; // safe

        osg::ref_ptr<VersionedTerrain> _versionedTerrain;

        Relative _family[5];
        OpenThreads::ReadWriteMutex _tileLayersMutex;

        /** Deals with completed requests during the UPDATE traversal. */
        void installRequests( int stamp );
        bool readyForNewElevation();
        void serviceCompletedRequests();
        void checkNeedsUpdate();
        void markTileForRegeneration();
        void adjustUpdateTraversalCount( int delta );

        bool _neededUpdateLastTime;
    };


    typedef std::vector< osg::ref_ptr<osgTerrain::TerrainTile> > TerrainTileList;


    /**
     * An osgTerrain derivation that tracks a revision number. When the revision number
     * changes, this incidates to member tiles that something substantial (like the 
     * map model) has changed and that they need to regenreate, update, or otherwise
     * accomodate the change.
     *
     * Individual tiles have their own Revision numbers, which are unrelated. These
     * change with every change to the physical tile.
     */
    class VersionedTerrain : public osgTerrain::Terrain
    {
    public:
        VersionedTerrain( Map* map, MapEngine* engine );

        virtual const char* className() const { return "VersionedTerrain"; }

    public:
        /**
         * Bumps the version number up by one. Versioned Tiles attached to this
         * terrain will detect the mismatch and regenerate themselves.
         */
        void incrementRevision();

        /**
         * Gets the current terrain configuration revision.
         */
        int getRevision() const;

        /**
         * Gets a tile given its version ID.
         */
        //VersionedTile* getVersionedTile( const osgTerrain::TileID& tileId );


        Map* getMap();
        MapEngine* getEngine();

        TaskService* getImageryTaskService(int layerId);
        TaskService* getElevationTaskService();
        TaskService* getTileGenerationTaskSerivce();

        virtual void traverse( osg::NodeVisitor &nv );

        void updateTaskServiceThreads();

        bool updateBudgetRemaining() const;

    protected:

        typedef std::map< osgTerrain::TileID, osg::ref_ptr<VersionedTile> > TileTable;
        typedef std::queue< osg::ref_ptr<VersionedTile> > TileQueue;
        typedef std::list< osg::ref_ptr<VersionedTile> > TileList;
        typedef std::vector< osg::ref_ptr<VersionedTile> > TileVector;
        typedef std::queue< osgTerrain::TileID > TileIDQueue;

        OpenThreads::ReadWriteMutex _tilesMutex;
        TileTable  _tiles;
        TileList   _tilesToShutDown;
        TileQueue  _tilesToRelease;
        TileQueue  _tilesToAdd;
        TileVector _tilesToServiceElevation;

    public:
        void releaseGLObjectsForTiles(osg::State*);

        void registerTile( VersionedTile* newTile );

        void getVersionedTile( const osgTerrain::TileID& id, osg::ref_ptr<VersionedTile>& out_tile, bool lock =true );
        //void getVersionedTile( const osgTerrain::TileID& id, osg::observer_ptr<VersionedTile>& out_tile, bool lock =true);
        void getVersionedTiles( TileList& out_tiles );
        void getTerrainTiles( TerrainTileList& out_tiles );

    private:

        TaskService* createTaskService( int id, int numThreads );
        TaskService* getTaskService( int id );

        void refreshFamily( const osgTerrain::TileID& tileId, Relative* family, bool tileTableLocked );

        int _revision; 
        OpenThreads::Mutex _revisionMutex;

        osg::ref_ptr<Map> _map;
        osg::ref_ptr<MapEngine> _engine;
        typedef std::map< int, osg::ref_ptr< TaskService > > TaskServiceMap;
        TaskServiceMap _taskServices;

        osg::ref_ptr<const Profile> _profile;
        OpenThreads::Mutex _taskServiceMutex;

        int _numAsyncThreads;

        bool _releaseCBInstalled;
        
        //VersionedTile* getVersionedTileNoLock(const osgTerrain::TileID& tileID);
    };
}

#endif