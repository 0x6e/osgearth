/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2009 Pelican Ventures, Inc.
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGEARTH_VERSIONED_TERRAIN
#define OSGEARTH_VERSIONED_TERRAIN 1

#include <osgEarth/TaskService>
#include <osgTerrain/Terrain>
#include <osgTerrain/TerrainTile>
#include <OpenThreads/Mutex>

namespace osgEarth
{
    class VersionedTerrain;

    /*interface*/ class TileLayerFactory : public osg::Referenced
    {
    public:
        virtual GeoImage* createGeoImage( const TileKey* key, int layerIndex, ProgressCallback* progress ) =0;
        virtual osgTerrain::ImageLayer* createImageLayer( const TileKey* key, GeoImage* image, ProgressCallback * progress ) =0;

        //virtual osg::HeightField* createHeightField( const TileKey* key ) =0;
        virtual osgTerrain::ImageLayer* createImageLayer( const TileKey* key, int layerIndex, ProgressCallback* progress ) =0;
        virtual osgTerrain::HeightFieldLayer* createHeightFieldLayer( const TileKey* key, ProgressCallback* progress ) =0;
    };

    /**
     * An OSG terrain tile that supports change detection.
     *
     * A VersionedTile tracks a "terrain revision" number. If the terrian revision differs
     * from the parent Terrain's revision, that measn the tile is obselete and needs to
     * be regenerated or updates. 
     *
     * The VersionedTile also maintains a Tile Revision number. Every change to the data in the
     * tile itself warrants a new revision number. This way, external processes that rely
     * on the contents of a Tile can detect changes.
     *
     * Note: the terrain revision and the tile revision are unrelated!
     */
    class VersionedTile : public osgTerrain::TerrainTile
    {
    public:
        VersionedTile( const TileKey* key );

        /** Gets the tilekey associated with this tile. */
        const TileKey* getKey() const;

        bool getUseLayerRequests() const { return _useLayerRequests; }

        /** Sets whether to use the TaskService to schedule per-layer background data loading. */
        void setUseLayerRequests( bool );

        /** Sets whether to update the tile layer by layer vs. rebuidling the entire tile. */
        void setUsePerLayerUpdates( bool );

        /**
         * Gets the terrain revision that this tile is in sync with.
         */
        int getTerrainRevision() const;

        /**
         * Sets the terrain revision that this tile is in sync with.
         */
        void setTerrainRevision( int revision );

        /**
         * Returns true if this tile is in sync with its parent Terrain (i.e., their
         * version numbers are equal).
         */
        bool isInSyncWithTerrain() const;

        /**
         * Bumps this tile's revision number.
         */
        void incrementTileRevision();

        /**
         * Gets this tile's revision number.
         */
        int getTileRevision() const;

        /** Override */
        virtual void traverse( class osg::NodeVisitor& nv );

        class VersionedTerrain* getVersionedTerrain();
        const class VersionedTerrain* getVersionedTerrain() const;

        /** Updates and services this tile's service pending requests. */
        void servicePendingRequests( int frameStamp );

        void setHasElevationHint( bool hasElevation );
    protected:
        ~VersionedTile();


    private:
        int _terrainRevision;
        int _tileRevision;
        bool _useLayerRequests;
        bool _requestsInstalled;
        bool _usePerLayerUpdates;
        bool _requestElevation;
        bool _elevationLayerDirty;
        bool _colorLayersDirty;

        osg::ref_ptr<const TileKey> _key;
        TaskRequestList _requests;
        int _numActiveRequests;        

        /** Deals with completed requests during the UPDATE traversal. */
        void serviceCompletedRequests();
    };


    typedef std::vector< osg::ref_ptr<osgTerrain::TerrainTile> > TerrainTileList;


    /**
     * An osgTerrain derivation that tracks a revision number. When the revision number
     * changes, this incidates to member tiles that something substantial (like the 
     * map model) has changed and that they need to regenreate, update, or otherwise
     * accomodate the change.
     *
     * Individual tiles have their own Revision numbers, which are unrelated. These
     * change with every change to the physical tile.
     */
    class VersionedTerrain : public osgTerrain::Terrain
    {
    public:
        VersionedTerrain( TileLayerFactory* factory =NULL );

        virtual const char* className() const { return "VersionedTerrain"; }

    public:
        /**
         * Bumps the version number up by one. Versioned Tiles attached to this
         * terrain will detect the mismatch and regenerate themselves.
         */
        void incrementRevision();

        /**
         * Gets the current terrain configuration revision.
         */
        int getRevision() const;

        /**
         * Gets a tile given its version ID.
         */
        VersionedTile* getVersionedTile( const osgTerrain::TileID& tileId );

        /**
         * Populates the output tile list with all the tiles owned by this terrain.
         */
        void getTerrainTiles( TerrainTileList& out_tiles );

        /** Gets the number of color layers and elevation layers combined */
        int getNumActiveLayers() const;

        TileLayerFactory* getTileLayerFactory() const;

        TaskService* getOrCreateTaskService();

        unsigned int getNumTaskServiceThreads() const;
        void setNumTaskServiceThreads( unsigned int numTaskServiceThreads );

    private:
        int _revision;
        OpenThreads::Mutex _revisionMutex;

        osg::ref_ptr<TileLayerFactory> _layerFactory;
        osg::ref_ptr<TaskService> _taskService;
        OpenThreads::Mutex _taskServiceMutex;
        unsigned int _numTaskServiceThreads;
    };
}

#endif