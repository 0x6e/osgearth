/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_COMPOSITE_TILE_SOURCE_H
#define OSGEARTH_COMPOSITE_TILE_SOURCE_H 1

#include <osgEarth/TileSource>

namespace osgEarth
{   
    /**
     * Serializable configuration for a CompositeTileSource.
     */
    class CompositeTileSourceOptions : public TileSourceOptions
    {
    public:
        CompositeTileSourceOptions( const TileSourceOptions& options =TileSourceOptions() );

        void addTileSource( const TileSourceOptions& options );
        void addTileSource( TileSource* source );

        const TileSourceOptionsVector& getTileSourceOptionsVector() const { return _optionsVector; }
        const TileSourceVector& getTileSources() const { return _sources; }

        virtual Config getConfig() const;

    protected:
        virtual void mergeConfig( const Config& conf );

    private:
        void fromConfig( const Config& conf );

        TileSourceOptionsVector _optionsVector;
        TileSourceVector        _sources;
    };


    /**
     * A "virtual" TileSource that contains one or more other TileSource's and 
     * composites them into a single TileSource for a layer to use.
     */
    class OSGEARTH_EXPORT CompositeTileSource : public TileSource
    {
    public:
        /** Constructs a new composite tile source */
        CompositeTileSource( const TileSourceOptions& options =TileSourceOptions() );

        /**
         * Adds a tile source to the top of the stack. You can only add new tile sources
         * up until this object is initialized (i.e., once is is attached to a map layer).
         */
        //void addTileSource( TileSource* source );

    public: // TileSource overrides
        
		/** Creates a new image for the given key */
		virtual osg::Image* createImage( const TileKey& key, ProgressCallback* progress =0 );
        
        /** Initializes the tile source */
		virtual void initialize( const std::string& referenceURI, const Profile* overrideProfile =0L );

    protected:
        CompositeTileSourceOptions _options;
        TileSourceVector _sources;
        bool _initialized;
    };
}

#endif // OSGEARTH_COMPOSITE_TILE_SOURCE_H
