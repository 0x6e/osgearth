/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_SOURCE_H
#define OSGEARTH_TILE_SOURCE_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osgEarth/TileGridProfile>

#include <osg/Referenced>
#include <osg/Object>
#include <osg/Image>
#include <osg/Shape>
#include <osgDB/ReadFile>

#include <string>

namespace osgEarth
{    
    class OSGEARTH_EXPORT TileSource : public virtual osg::Object
    {
    public:
        TileSource();
        void init(const osgDB::ReaderWriter::Options* options);

        virtual osg::Image* createImage( const TileKey* key ) = 0;
        virtual osg::HeightField* createHeightField( const TileKey* key ) = 0;
        virtual const osgEarth::TileGridProfile& getProfile();
        virtual int getPixelsPerTile() const { return 256; }


        const unsigned int& getMinLevel() {return _minLevel;}
        void setMinLevel(unsigned int &minLevel) {_minLevel = minLevel;}

        const unsigned int& getMaxLevel() {return _maxLevel;}
        void setMaxLevel(unsigned int &maxLevel) {_maxLevel = maxLevel;}

        virtual osg::Object* cloneType() const { return 0; } // cloneType() not appropriate
        virtual osg::Object* clone(const osg::CopyOp&) const { return 0; } // clone() not appropriate
        virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const TileSource*>(obj)!=NULL; }
        virtual const char* className() const { return "TileSource"; }
        virtual const char* libraryName() const { return "osgEarth"; }
    protected:
        virtual ~TileSource();
        TileGridProfile _profile;

        unsigned int _minLevel;
        unsigned int _maxLevel;
    };
}

#endif // OSGEARTH_TILE_SOURCE_H