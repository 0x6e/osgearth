/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_SOURCE_H
#define OSGEARTH_TILE_SOURCE_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osgEarth/Profile>

#include <osg/Referenced>
#include <osg/Object>
#include <osg/Image>
#include <osg/Shape>
#include <osgDB/ReadFile>

#include <OpenThreads/Mutex>

#include <string>

namespace osgEarth
{   
    /**
     * A TileSource is an object that can create image and/or heightfield tiles. Driver 
     * plugins are responsible for creating and returning a TileSource that the Map
     * will then use to create tiles for tile keys.
     */
    class OSGEARTH_EXPORT TileSource : public virtual osg::Object
    {
    public:        
        TileSource( const osgDB::ReaderWriter::Options* options =NULL );

        /**
         * The Map calls this method ONCE so that the TileSource can
         * initialize its profile.
         */
        virtual const Profile* createProfile( const Profile* mapProfile, const std::string& configPath ) =0;

        /**
         * Creates an image for the given TileKey
         */
        virtual osg::Image* createImage( const TileKey* key ) = 0;

        /**
         * Creates a heightfield for the given TileKey
         */
        virtual osg::HeightField* createHeightField( const TileKey* key );

        /**
         * Gets the number of pixels per tile for this TileSource.  Defaults to 256
         */
        virtual int getPixelsPerTile() const { return 256; }

    public:

        /**
         * Returns True if this tile source initialized properly and has a valid
         * profile.
         */
        bool isOK() const;
        bool isValid() const { return isOK(); }

        /**
         * Gets the Profile that was originally created by initProfile()
         */
        const Profile* getProfile() const;

        /**
         * Gets the minimum level that this TileSource should be displayed at
         */
        unsigned int getMinLevel() const {return _minLevel;}

        /**
         * Sets the minimum level that this TileSource should be display at
         */
        void setMinLevel(unsigned int minLevel) {_minLevel = minLevel;}

        /**
         * Gets the maximum level that this TileSource should be displayed at
         */
        unsigned int getMaxLevel() const {return _maxLevel;}

        /**
         * Sets the maximum level that this TileSource should be displayed at
         */
        void setMaxLevel(unsigned int maxLevel) {_maxLevel = maxLevel;}

        float getNoDataValue();
        void  setNoDataValue(float noDataValue);

        float getNoDataMinValue();
        void setNoDataMinValue(float noDataMinValue);

        float getNoDataMaxValue();
        void  setNoDataMaxValue(float noDataMaxValue);     

        /**
         * Gets the preferred extension for this TileSource
         */
        virtual std::string getExtension() const {return "";}

        virtual osg::Object* cloneType() const { return 0; } // cloneType() not appropriate
        virtual osg::Object* clone(const osg::CopyOp&) const { return 0; } // clone() not appropriate
        virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const TileSource*>(obj)!=NULL; }
        virtual const char* className() const { return "TileSource"; }
        virtual const char* libraryName() const { return "osgEarth"; }

        /**
         * Whether or not the key is valid for the TileSource
         */
        virtual bool isKeyValid(const TileKey* key);
    
    protected:
        virtual ~TileSource();
        
        const osgDB::ReaderWriter::Options* getOptions() const;

    private:
        unsigned int _minLevel;
        unsigned int _maxLevel;

        osg::ref_ptr<const Profile> _profile;
        osg::ref_ptr<const osgDB::ReaderWriter::Options> _options;

        const Profile* initProfile(
            const Profile*     mapProfile,
            const std::string& configPath );

        void setOverrideProfile( const Profile* profile );

        friend class MapEngine;
        friend class CachedTileSource;
        friend class DirectReadTileSource;
        friend class TileSourceFactory;

        float _noDataValue;
        float _noDataMinValue;
        float _noDataMaxValue;
    };

    
    typedef std::vector< osg::ref_ptr<TileSource> > TileSourceList;
}

#endif // OSGEARTH_TILE_SOURCE_H