/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_SOURCE_H
#define OSGEARTH_TILE_SOURCE_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osgEarth/TileGridProfile>
#include <osgEarth/TMS>

#include <osg/Referenced>
#include <osg/Object>
#include <osg/Image>
#include <osg/Shape>
#include <osgDB/ReadFile>

#include <OpenThreads/Mutex>

#include <string>

namespace osgEarth
{   
    /**
     * A TileSource is an object that can create image and/or heightfield tiles. Driver 
     * plugins are responsible for creating and returning a TileSource that the TileBuilder
     * will then use to create tiles for tile keys.
     */
    class OSGEARTH_EXPORT TileSource : public virtual osg::Object
    {
    public:        
        TileSource();

        /**
         *Initializes common properties of all TileSources from the given ReaderWriter::Options
         */
        virtual void init(const osgDB::ReaderWriter::Options* options);

        /**
         *Creates an image for the given TileKey
         */
        virtual osg::Image* createImage( const TileKey* key ) = 0;

        /**
         * Creates a heightfield for the given TileKey
         */
        virtual osg::HeightField* createHeightField( const TileKey* key );

        /**
         * Gets the TileGridProfile for this TileSource
         */
        virtual const osgEarth::TileGridProfile& getProfile() const;

        /**
         * Gets the number of pixels per tile for this TileSource.  Defaults to 256
         */
        virtual int getPixelsPerTile() const { return 256; }


        /**
         * Gets the minimum level that this TileSource should be displayed at
         */
        unsigned int getMinLevel() const {return _minLevel;}

        /**
         * Sets the minimum level that this TileSource should be display at
         */
        void setMinLevel(unsigned int minLevel) {_minLevel = minLevel;}

        /**
         * Gets the maximum level that this TileSource should be displayed at
         */
        unsigned int getMaxLevel() const {return _maxLevel;}

        /**
         * Sets the maximum level that this TileSource should be displayed at
         */
        void setMaxLevel(unsigned int maxLevel) {_maxLevel = maxLevel;}

        /**
         * Gets the preferred extension for this TileSource
         */
        virtual std::string getExtension() const {return "";}

        virtual osg::Object* cloneType() const { return 0; } // cloneType() not appropriate
        virtual osg::Object* clone(const osg::CopyOp&) const { return 0; } // clone() not appropriate
        virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const TileSource*>(obj)!=NULL; }
        virtual const char* className() const { return "TileSource"; }
        virtual const char* libraryName() const { return "osgEarth"; }
    
    protected:
        virtual ~TileSource();
        TileGridProfile _profile;

        unsigned int _minLevel;
        unsigned int _maxLevel;
    };

    
    typedef std::vector< osg::ref_ptr<TileSource> > TileSourceList;


    /**
    * A CachedTileSource acts as a proxy between a cache and an actual TileSource.
    * As images and heightfields are requested from a CachedTileSource, it first
    * consults the cache via the getCachedImage method and returns it
    */
    class OSGEARTH_EXPORT CachedTileSource : public TileSource
    {
    public:
        /**
        *Creates a new CachedTileSource
        */
        CachedTileSource(TileSource* tileSource);

        /**
        *Creates an image for the given TileKey
        */
        virtual osg::Image* createImage( const TileKey* key );

        /**
        * Creates a heightfield for the given TileKey
        */
        virtual osg::HeightField* createHeightField( const TileKey* key );

        /**
        * Gets the number of pixels per tile for this TileSource.
        */
        virtual int getPixelsPerTile() const;

        /**
        * Gets the current MapConfig filename.  This is used for getting relative paths to the MapConfig.
        */
        virtual const std::string& getMapConfigFilename() {return _mapConfigFilename;}

        /**
        * Sets the current MapConfig filename.
        */
        virtual void setMapConfigFilename( const std::string &mapConfigFilename ) { _mapConfigFilename = mapConfigFilename;}

        /**
        * Initializes this CachedTileSource's TileMap.  This should be called after all other setup has been
        * performed and the name of the CachedTileSource is set.
        */
        virtual void initTileMap();
        
    protected:
        /**
        * Gets an image from the cache for the given key.  Should be implemented by subclasses
        */
        virtual osg::Image* getCachedImage( const TileKey* key);

        /**
        *Add an image to the cache for the given key.  Should be implemented by subclasses.
        */
        virtual void writeCachedImage(const TileKey* key, const osg::Image* image);

        osg::ref_ptr<TileMap> _tileMap;
        osg::ref_ptr<TileSource> _tileSource;
        std::string _mapConfigFilename;
    };


    /**
     * DiskCachedTileSource is an implementation of the CachedTileSource class that caches in a format compatible with
     * Metacarta's TileCache "Disk" style caching.  This means that the resulting osgEarth cache can be used by any client
     * that can consume Metacarta's TileCache Disk style caching.  Subclasses of DiskCachedTileSource can simply implement the 
     * getFileName function to provide different naming schemes.
     * http://tilecache.org/
     */
    class OSGEARTH_EXPORT DiskCachedTileSource : public CachedTileSource
    {
    public:
        /**
        *Creates a new DiskCachedTileSource.
        *@param path
        *       The path to the directory to cache to
        *@param format
        *       The format to cache tiles to (png, jpg, dds, etc).
        */
        DiskCachedTileSource( TileSource* tileSource, const std::string &path, const std::string format);

        /** Initialize the TileMap */
        virtual void initTileMap();

    protected:
        virtual osg::Image* getCachedImage( const TileKey* key);
        virtual void writeCachedImage(const TileKey* key, const osg::Image* image);

        /**
         * Gets the filename to cache to for the given TileKey and TileSource
         */
        virtual std::string getFileName(const TileKey* key );

        virtual std::string getExtension() const;

        virtual std::string getPath();

    protected:
        std::string getTMSPath();

        std::string _path;
        std::string _format;
        OpenThreads::Mutex _fs_mutex;
    };

    /**
    * TMSCacheTileSource is an implementation of the DiskCachedTileSource class that caches tiles to disk in a style compatible with the TMS specification.
    * http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification
    */
    class OSGEARTH_EXPORT TMSCacheTileSource : public DiskCachedTileSource
    {
    public:
        /**
        *Creates a new TMSCacheTileSource.
        *@param path
        *       The path to the directory to cache to
        *@param format
        *       The format to cache tiles to (png, jpg, dds, etc).
        */
        TMSCacheTileSource( TileSource* tileSource, const std::string &path, const std::string format);

        /**
        * Gets whether or not to invert the y tile index
        */
        const bool& getInvertY() {return _invertY; }

        /**
        * Sets whether or not to invert the y tile index
        */
        void setInvertY(const bool &invertY) {_invertY = invertY;}

    protected:
        virtual std::string getFileName(const TileKey* key );
        bool _invertY;
    };

    /**
     * QuadKeyCachedTileSource is an implementation of the DiskCachedTileSource class that caches tiles to disk as a directory of images
     * referenced by their QuadKey string.
     */
    class OSGEARTH_EXPORT QuadKeyCachedTileSource : public DiskCachedTileSource
    {
    public:
        QuadKeyCachedTileSource( TileSource* tileSource, const std::string &path, const std::string format);
    protected:
        virtual std::string getFileName(const TileKey* key );
    };

    /**
     * CachedTileSourceFactory is used to created CachedTileSource's from configuration properties.
     */
    class OSGEARTH_EXPORT CachedTileSourceFactory
    {
    public:
        /**
        *Creates a CachedTileSource of the given type with the given properties.
        *@param tileSource
        *       The TileSource to act as a proxy for
        *@param type
        *       The type of cache to create
        *@param properties
        *       The configuration properties for the cache.
        */
        static CachedTileSource* create(TileSource* tileSource, const std::string &type, std::map<std::string,std::string> properties); 
    };
}

#endif // OSGEARTH_TILE_SOURCE_H