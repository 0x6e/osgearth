/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_SOURCE_H
#define OSGEARTH_TILE_SOURCE_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osgEarth/TileGridProfile>
#include <osgEarth/TileCache>

#include <osg/Referenced>
#include <osg/Object>
#include <osg/Image>
#include <osg/Shape>
#include <osgDB/ReadFile>

#include <string>

namespace osgEarth
{    
    /**
     *A TileSource is an object that can create image and/or heightfield tiles
     */
    class OSGEARTH_EXPORT TileSource : public virtual osg::Object
    {
    public:        
        TileSource();

        /**
         *Initializes common properties of all TileSources from the given ReaderWriter::Options
         */
        void init(const osgDB::ReaderWriter::Options* options);

        /**
         *Creates an image for the given TileKey
         */
        virtual osg::Image* createImage( const TileKey* key ) = 0;

        /**
         * Creates a heightfield for the given TileKey
         */
        virtual osg::HeightField* createHeightField( const TileKey* key );

        /**
         *Gets the TileGridProfile for this TileSource
         */
        virtual const osgEarth::TileGridProfile& getProfile() const;

        /**
         * Gets the number of pixels per tile for this TileSource.  Defaults to 256
         */
        virtual int getPixelsPerTile() const { return 256; }

        /**
         * readImage gets an image for the given TileKey by first consulting this TileSource's cache.
         * If no cache exists or no image exists in the cache for the given key, createImage is called.
         * If an image is created via createImage and a cache exists, it is written to the cache.
         */
        osg::Image *readImage( const TileKey* key );

        /**
         * readHeightfield gets a heightfield for the given TileKey by first consulting this TileSource's cache.
         * If no cache exists or no heightfield exists in the cache for the given key, createHeightField is called.
         * If a heightfield is created via createHeightField and a cache exists, it is written to the cache.
         */
        osg::HeightField* readHeightField(const TileKey* key);

        /**
         * Gets the minimum level that this TileSource should be displayed at
         */
        const unsigned int& getMinLevel() {return _minLevel;}

        /**
         * Sets the minimum level that this TileSource should be display at
         */
        void setMinLevel(unsigned int &minLevel) {_minLevel = minLevel;}

        /**
         * Gets the maximum level that this TileSource should be displayed at
         */
        const unsigned int& getMaxLevel() {return _maxLevel;}

        /**
         * Sets the maximum level that this TileSource should be displayed at
         */
        void setMaxLevel(unsigned int &maxLevel) {_maxLevel = maxLevel;}

        /**
         * Gets the TileCache for this TileSource
         */
        const TileCache* getCache() {return _cache.get();}

        /**
         * Sets the TileCache for this TileSource
         */
        void setCache(TileCache* cache) {_cache = cache;}

        /**
         * Gets the preferred extension for this TileSource
         */
        virtual std::string getExtension() const {return "";}

        virtual osg::Object* cloneType() const { return 0; } // cloneType() not appropriate
        virtual osg::Object* clone(const osg::CopyOp&) const { return 0; } // clone() not appropriate
        virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const TileSource*>(obj)!=NULL; }
        virtual const char* className() const { return "TileSource"; }
        virtual const char* libraryName() const { return "osgEarth"; }
    
    protected:
        virtual ~TileSource();
        TileGridProfile _profile;

        unsigned int _minLevel;
        unsigned int _maxLevel;

        osg::ref_ptr<TileCache> _cache;
    };
}

#endif // OSGEARTH_TILE_SOURCE_H