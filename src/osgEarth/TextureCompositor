/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_TEXTURE_COMPOSITOR_H
#define OSGEARTH_TEXTURE_COMPOSITOR_H 1

#include <osgEarth/Common>
#include <osgEarth/GeoData>
#include <osgEarth/ThreadingUtils>
#include <osgEarth/TerrainOptions>
#include <osg/StateSet>
#include <osg/Program>

namespace osgEarth
{
    /**
     * Base interface for a particular texture composition implementation
     */
    class OSGEARTH_EXPORT TextureCompositorTechnique : public osg::Referenced
    {
    public:
        virtual osg::StateSet* createStateSet( const GeoImageVector& layerImages, const GeoExtent& tileExtent ) const =0;

        //virtual osg::Program* createProgram( int numImageLayers ) const =0;

        virtual bool requiresUnitTextureSpace() const =0;

        virtual void updateGlobalStateSet( osg::StateSet* stateSet, int numImageLayers ) const { }

        virtual bool supportsLayerUpdate() const { return false; }

        virtual GeoImage prepareLayerUpdate( const GeoImage& image, const GeoExtent& tileExtent ) const { return image; }

        virtual void applyLayerUpdate( osg::StateSet* stateSet, int layerNum, const GeoImage& preparedImage, const GeoExtent& tileExtent ) const { }
    };

    /**
     * Utility class that composites texture data for use by a terrain engine.
     */
    class OSGEARTH_EXPORT TextureCompositor : public osg::Referenced
    {
    //public:
    //    enum TechniqueType
    //    {
    //        TECH_AUTO,              // automatically select a technique based on platform capabilities
    //        TECH_TEXTURE_ARRAY,     // 2D texture array, GPU compositing, single tex unit
    //        TECH_TEXTURE_3D,        // 3D texture, GPU compositing, single tex unit
    //        TECH_TEXTURE_ATLAS,     // texture atlas, GPU compositing, single tex unit
    //        TECH_MULTITEXTURE_GPU,  // multiple textures, GPU compositing, one tex unit per image
    //        TECH_MULTITEXTURE_FFP,  // multiple textures, fixed-function multitexturing, one tex unit per image
    //        TECH_SOFTWARE,          // software compositing, one texture/tex unit
    //        TECH_MULTIPASS,         // 
    //        TECH_USER               // user-supplied technique
    //    };

    public:
        /**
         * Constructs a new compositor.
         */
        TextureCompositor( const TerrainOptions::CompositingTechnique& tech =TerrainOptions::COMPOSITING_AUTO );

        /**
         * Creates a stateset that contains all the texture attributes necessary to 
         * composite the list of layer images such that they result in the specified
         * output extent.
         */
        osg::StateSet* createStateSet( const GeoImageVector& layerImages, const GeoExtent& tileExtent ) const;

        /**
         * Returns true if the compositor implementation supports the ability to update an individual
         * image layer (via prepareLayerUpdate and applyLayerUpdate).
         */
        bool supportsLayerUpdate() const;

        /**
         * Prepares a new image for incorporation into the texture composite. Usually you will call this 
         * method when you are updating a single layer AFTER having originally created the stateset
         * (via createStateSet). It is safe to call this method from any thread. You can thereafter take
         * the result and pass it to updateLayer. These two methods are separated so that you can call
         * this one from any thread (it is guaranteed to be thread-safe) and then use updateLayer to 
         * updaet a live scene graph if necessary.
         */
        GeoImage prepareLayerUpdate( const GeoImage& image, const GeoExtent& tileExtent ) const;

        /**
         * Updates a stateset's texture composition with an image. Typically this will be the image
         * returned from prepareImage(), but it doesn't have to be. Note: if the stateset is live in
         * the scene graph, be sure to only call this method from UPDATE trav.
         */
        void applyLayerUpdate( osg::StateSet* stateSet, int layerNum, const GeoImage& preparedImage, const GeoExtent& tileExtent ) const;

        /**
         * Some composition techniques require a shader program. This method returns the shader program
         * necessary to support the compositing, or NULL if no shaders are required. You should attach
         * the program to whatever node is rendering the terrain tile.
         */
        //osg::Program* getProgram() const;

        /**
         * Whether the texture composition technique uses a single, unit (0..1) texture coordinate
         * space (true), or a separate texture coordinate space per layer (false). This provides a
         * hint to whomever is generating the texture coordinates as to what they need to do to 
         * support the current technique.
         */
        bool requiresUnitTextureSpace() const;

        /**
         * Updates a state set with attributes required to support the technique.
         * Call this whenever the composition of the image layer stack changes in order to update
         * applicable global uniforms, texture attributes, and so forth.
         */
        void updateGlobalStateSet( osg::StateSet* stateSet, int numImageLayers ) const;

    private:
        void init();

        OpenThreads::Mutex                       _initMutex;
        TerrainOptions::CompositingTechnique     _tech;
        bool                                     _forceTech;
        osg::ref_ptr<osg::Program>               _program;
        osg::ref_ptr<TextureCompositorTechnique> _impl;
    };
}

#endif // OSGEARTH_TEXTURE_COMPOSITOR_H
