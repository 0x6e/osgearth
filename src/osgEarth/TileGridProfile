/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_GRID_PROFILE_H
#define OSGEARTH_TILE_GRID_PROFILE_H 1

#include <osgEarth/Common>
#include <osg/CoordinateSystemNode>

#define STR_GLOBAL_GEODETIC "global-geodetic"
#define STR_GLOBAL_MERCATOR "global-mercator"
#define STR_LOCAL           "local"

namespace osgEarth
{
    class TileKey;

    /**
     * A "profile" defines the layout of a data source. The profile conveys the
     * spatial reference system (SRS), the geospatial extents within that SRS, and
     * the tiling scheme.
     */
    class OSGEARTH_EXPORT TileGridProfile
    {
    public:
        // Built-in profile types.
        enum ProfileType
        {
            UNKNOWN,
            GLOBAL_GEODETIC,
            GLOBAL_MERCATOR,
            PROJECTED
        };

        TileGridProfile();

        TileGridProfile( ProfileType type );

        /**
         * Constructs a new profile from a well-known definition string such as "global-mercator" or
         * "global-geodetic".
         */
        TileGridProfile( const std::string& profile_string );

        /**
         * Constructs a new profile from geospatil extents and an SRS identifier string (such as
         * a WKT string or an EPSG code.
         */
        TileGridProfile( ProfileType profileType, double xmin, double ymin, double xmax, double ymax, const std::string& srs );

        /**
         * Copy ctor
         */
        TileGridProfile( const TileGridProfile& rhs );

        /**
         * Returns true if the profile is properly initialized.
         */
        bool isValid() const;

        /**
         * Gets the extents of the profile
         */
        double xMin() const;
        double yMin() const;
        double xMax() const;
        double yMax() const;
        
        /**
         * Gets the profile type
         */
        ProfileType getProfileType() const;

        /**
         * Gets the spatial reference system string.
         */
        const std::string& srs() const;

        /**
         * Creates and returns a new tile key, given a key string. The
         * caller is responsible for deleting the returned object.
         */
        osgEarth::TileKey* createTileKey( const std::string &key ) const;

        /**
         * Deduces a profile type given an SRS string.
         */
        static ProfileType getProfileTypeFromSRS(const std::string &srs);

        bool operator == (const TileGridProfile& rhs) const;
        bool operator != (const TileGridProfile& rhs) const;

        /**
         * Gets the number of tiles that occur at LOD 0. LOD 0 is often a special
         * case (may be 1, 2, or 4); below that, all tiles are subdivided into 4 quadrants.
         */
        unsigned int getNumTilesAtLevel0() const;

        /**
         * Applies this profile's format and coordinate system strings to the
         * provided CSN.
         */
        void applyTo( osg::CoordinateSystemNode* csn ) const;

        /**
         *Gets whether or not the TileGridProfile is compatible with the given profile.
         */
        bool isCompatible(const TileGridProfile& rhs) const;

        /**
         *Gets the tile dimensions at the given lod.
         */
        void getTileDimensions(unsigned int lod, double &width, double &height) const;

        /**
         *Gets the intersecting tiles of this TileGridProfile with the given TileKey.
         */
        void getIntersectingTiles(const TileKey *key, std::vector<osg::ref_ptr<const TileKey>> &intersectingKeys) const;

    private:
        double _xmin, _ymin, _xmax, _ymax;        
        std::string _srs;
        ProfileType _profileType;
        unsigned int _num_tiles_at_lod_0;

        void init( ProfileType );
    };
}

#endif // OSGEARTH_TILE_GRID_PROFILE_H