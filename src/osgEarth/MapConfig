/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MAP_CONFIG_H
#define OSGEARTH_MAP_CONFIG_H 1

#include <osgEarth/Common>
#include <osgEarth/Profile>
#include <map>
#include <list>

#include <osg/Vec4ub>

namespace osgEarth
{
    typedef std::map<std::string,std::string> CacheProperties;

    /**
     * Defines the properties for a cache.
     */
    class OSGEARTH_EXPORT CacheConfig : public osg::Referenced
    {
    public:
        /**
         * Constructs a new cache configuration
         */
        CacheConfig();

        /**
         * Gets the cache type identifier.
         */
        const std::string& getType() const;

        /**
         * Sets the cache type identifier ("tms", "tilecache", etc.)
         */
        void setType(const std::string &type);

        /**
         * Gets the collection of name/value pairs for the cache. These will be particular
         * to each cache type implementation.
         */
        CacheProperties& getProperties();

        /**
         * Sets the collection of name/value pairs assoicated with the cache config.
         */
        const CacheProperties& getProperties() const;

        /**
         *Inherits properties from the given CacheConfig
         */
        void inheritFrom( const CacheConfig* rhs);

    private:
        std::string _type;
        CacheProperties _properties;
    };

    class OSGEARTH_EXPORT ProfileConfig : public osg::Referenced
    {
    public:
        ProfileConfig();

        const std::string& getNamedProfile() const;
        void setNamedProfile( const std::string &namedProfile);

        const std::string& getRefLayer() const;
        void setRefLayer(const std::string &refLayer);

        const std::string& getSRS() const;
        void setSRS(const std::string& srs);

        bool areExtentsValid() const;

        void getExtents(double &minX, double &minY, double &maxX, double &maxY) const;
        void setExtents(double minX, double minY, double maxX, double maxY);

    private:
        std::string _namedProfile;
        std::string _refLayer;
        std::string _srs;
        double _minX;
        double _minY;
        double _maxX;
        double _maxY;
    };


    typedef std::map<std::string,std::string> SourceProperties;


    /**
     * Defines a source for image or heightfield data. This is the configuration
     * information for a TileSource.
     */
    class OSGEARTH_EXPORT SourceConfig : public osg::Referenced
    {
    public:
        SourceConfig();

        /**
         * Sets the readable name of the source. This must be unique across
         * all sources.
         */
        void setName( const std::string& name );

        /**
         * Gets the readable name of the source.
         */
        const std::string& getName() const;

        /**
         * Sets the driver name for this source. The driver name is the
         * name of the extension that will load the appropriate osg plugin.
         */
        void setDriver( const std::string& driver );

        const std::string& getDriver() const;

        /**
         * Gets the collection of name/value pairs that the tile generator
         * will pass to the OSG plugin designated by the driver setting.
         */
        SourceProperties& getProperties();

        /**
         * Gets the collection of name/value pairs that the tile generator
         * will pass to the OSG plugin designated by the driver setting.
         */
        const SourceProperties& getProperties() const;

        /**
         * Gets the caching configuration for this source, if one is set.
         */
        CacheConfig* getCacheConfig() const;
        
        /**
         * Sets the caching configuration for this source. By default a tile
         * source will use the map's caching configuration, but you can override
         * it for each source.
         */
        void setCacheConfig(CacheConfig* cacheConfig);

        /**
         * Gets the explicity profile override configuration for this source.
         */
        ProfileConfig* getProfileConfig() const;

        /** 
         * Sets an explicity profile for this source. Usually the source will report
         * its own profile; but in rare cases you may need to explicity override it
         * using this method.
         */
        void setProfileConfig( ProfileConfig* conf );

    private:
        std::string name;
        std::string driver;
        SourceProperties properties;
        osg::ref_ptr<CacheConfig> cache_config;
        osg::ref_ptr<ProfileConfig> profile_config;
    };

    typedef std::list< osg::ref_ptr<SourceConfig> > SourceConfigList;


    /**
     * Top-level map configuration. This is the data model behind a
     * ".earth" file.
     */
    class OSGEARTH_EXPORT MapConfig : public osg::Referenced
    {
    public:
        // CS of the 3D scene
        enum CoordinateSystemType
        {
            CSTYPE_GEOCENTRIC,
            CSTYPE_GEOCENTRIC_CUBE,
            CSTYPE_PROJECTED
        };

    public:
        /**
         * Constructs a new, empty map configuration.
         */
        MapConfig();

        /**
         * Sets the readable name of the map.
         */
        void setName( const std::string& name );

        /** 
         * Gets the readable name of the map.
         */
        const std::string& getName() const;
        
        /**
         * Gets the coordinate system type for the geometry to create for this
         * map, e.g. round-earth (geocentric) or flat-earth (geographic, etc.)
         *
         * @return A CoordinateSystemType
         */
        const CoordinateSystemType& getCoordinateSystemType() const;

        /**
         * Sets the coordinate system type for the map's final geometry. Tje
         * default is CSTYPE_GEOCENTRIC.
         *
         * @param type
         *      Type of CS to use for the 3D map
         */
        void setCoordinateSystemType( const CoordinateSystemType& type );
       
        /**
         * Sets the scale factor for height-field values.
         *
         * @param scale
         *      Multiplier for heights; default = 1.0
         */
        void setVerticalScale( float scale );

        /**
         * Gets the scale factor for height-field values.
         */
        float getVerticalScale() const;

        /**
         * Gets the list of image tile sources in this map.
         */
        SourceConfigList& getImageSources();

        /**
         * Gets the list of image tile sources in this map.
         */
        const SourceConfigList& getImageSources() const;

        /**
         * Gets the list of elevation tile sources in this map.
         */
        SourceConfigList& getHeightFieldSources();

        /**
         * Gets the list of elevation tile sources in this map.
         */
        const SourceConfigList& getHeightFieldSources() const;
        
        /**
         * Sets the skirt ratio to be used when creating height field tiles. This
         * is the ratio of the height of the tile "skirt" to the width of the tile.
         *
         * @param skirtRatio
         *      The skirt ratio; default = 0.02
         */
        void setSkirtRatio(const float _skirt_ratio) { skirt_ratio = _skirt_ratio; }
        
        /**
         * Gets the skirt ratio to be used when creating height field tiles
         *
         * @return The skirt ratio
         */
        float getSkirtRatio() const { return skirt_ratio; }

        /**
         *Sets the sample ratio for height fields
         */
        void setSampleRatio(float _sample_ratio);

        /**
         Gets the sample ratio for height fields
         */
        float getSampleRatio() const;

        /** 
         * Sets the hostname of a proxy server to use for all HTTP communications.
         */
        void setProxyHost( const std::string& host );

        /**
         * Gets the hostname of a proxy server to use for all HTTP communications.
         */
        const std::string& getProxyHost() const;

        /**
         * Sets the TCP port for proxy requests to the proxy host. Default is 8080.
         */
        void setProxyPort( unsigned short port );

        /** 
         * Gets the TCP port for proxy requests to the proxy host.
         */
        unsigned short getProxyPort() const;

        /**
         * Sets the minimum tile LOD range as a factor of the tile's radius.
         * The default value = 6.0.
         */
        void setMinTileRangeFactor( float factor );

        /**
         * Gets the minimum tile LOD range as a factor of the tile's radius.
         */
        float getMinTileRangeFactor() const;

        /**
         * Sets whether or not the map should be run exclusively off of the cache.
         * @param cacheOnly
         *       Whether or not the map should be only off of the cache.
         */
        void setCacheOnly(bool cacheOnly);

        /**
         * Gets whether or not the map should be run exclusively off of the cache.        
         * @returns
         *       Whether or not the map should be run in "offline" mode
         */
        bool getCacheOnly() const;

        /**
         * Gets whether or not to normalize terrain tile edges
         */
        bool getNormalizeEdges() const;

        /**
         *Sets whether or not to normalize terrain tile edges
         */
        void setNormalizeEdges(bool normalizeEdges);

        /*
        *Sets the absolute filename that the map was loaded from
        */
        void setFilename(const std::string &filename);

        /*
        *Gets the absolute filename that the map was loaded from
        */
        const std::string& getFilename() const;

        /*
        *Gets the cache config for the map
        */
        CacheConfig* getCacheConfig() const;

        /*
        *Sets the cache config for the map
        */
        void setCacheConfig(CacheConfig* cacheConfig);

        const ProfileConfig* getProfileConfig() const;
        void setProfileConfig(ProfileConfig* profileConfig);

        const Profile* getProfile() const;
        void setProfile(const Profile* profile);

    private:
        std::string filename;
        std::string name;
        CoordinateSystemType model_cstype;
        float vertical_scale;
        float skirt_ratio;   
        float sample_ratio;
        SourceConfigList image_sources;
        SourceConfigList heightfield_sources;
        std::string proxy_host;
        unsigned short proxy_port;
        float min_tile_range_factor;

        osg::ref_ptr<const Profile> profile;

        bool cache_only;
        bool normalize_edges;

        osg::ref_ptr<CacheConfig> cache_config;
        osg::ref_ptr<ProfileConfig> profile_config;
    };


    /**
     * Reader or writes MapConfig objects to/from XML.
     */
    class OSGEARTH_EXPORT MapConfigReaderWriter
    {
    public:
        static MapConfig* readXml( const std::string& location );
        static MapConfig* readXml( std::istream& input );

        static void writeXml(const MapConfig* map, const std::string& location);
        static void writeXml(const MapConfig* map, std::ostream& output);
    };
};

#endif // OSGEARTH_MAP_CONFIG_H