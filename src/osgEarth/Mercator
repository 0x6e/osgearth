#ifndef OSGEARTH_PLUGIN_MSVE_MERCATOR_QUAD_KEY_H
#define OSGEARTH_PLUGIN_MSVE_MERCATOR_QUAD_KEY_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osgEarth/PlateCarre>
#include <osgTerrain/Locator>
#include <osgTerrain/TerrainTechnique>
#include <osgDB/ReaderWriter>
#include <string>

namespace osgEarth
{
    class OSGEARTH_EXPORT MercatorTileKey : public TileKey
    {
    public:
        static const std::string TYPE_CODE;

        MercatorTileKey( const MercatorTileKey& rhs );

        MercatorTileKey( const std::string& key );

        MercatorTileKey( const std::string& key, const TileGridProfile& profile );

        MercatorTileKey( unsigned int tile_x, unsigned int tile_y, unsigned int level );

        double getLatitude( unsigned int pixel_y ) const;

        void getTileXY( 
            unsigned int& out_tile_x,
            unsigned int& out_tile_y ) const;

        void getPixelExtents(
            unsigned int& xmin,
            unsigned int& ymin,
            unsigned int& xmax,
            unsigned int& ymax) const;

        void getMeterExtents(
            double &xmin,
            double &ymin,
            double &xmax,
            double &ymax) const;

        osgTerrain::TileID getTileId() const;

        static int longLatToPixelXY(
            double lon, double lat, unsigned int lod, 
            int tile_size,
            unsigned int& out_x, unsigned int& out_y );
        
        static void pixelXYtoTileXY(
            unsigned int x, unsigned int y,
            int tile_size,
            unsigned int& out_tile_x, unsigned int& out_tile_y);
        
    public: //overrides

        unsigned int getLevelOfDetail() const;

        bool getGeoExtents(
            double& lon_min, double& lat_min,
            double& lon_max, double& lat_max) const;

        TileKey* getParentKey() const;

        TileKey* getSubkey( unsigned int quadrant ) const;

        std::string getTypeCode() const { return TYPE_CODE; }

    private:
        osg::ref_ptr<TileKey> subkeys[4];
    };
    

    class OSGEARTH_EXPORT MercatorTileSource : public osg::Referenced
    {
    public:
        virtual osg::Image* createImage( const TileKey* key ) =0;

        virtual osg::HeightField* createHeightField( const TileKey* key ) =0;
    };


    class OSGEARTH_EXPORT MercatorTileConverter
    {
    public:
        // imagery resampling filter algorithm
        enum Filter {
            FILTER_NEAREST_NEIGHBOR,
            FILTER_LINEAR
        };

    public:
        MercatorTileConverter( MercatorTileSource* source, const osgDB::ReaderWriter::Options* options =NULL );

        /**
         * Sets the image resampling filter to use. Default is FILTER_NEAREST_NEIGHBOR.
         */
        void setFilter( const Filter& filter );

        osg::Image* createImage( const PlateCarreTileKey* key );

        osg::HeightField* createHeightField( const PlateCarreTileKey* key );

    private:
        osg::ref_ptr<MercatorTileSource> source;
        Filter filter;
    };


    class MercatorLocator : public osgTerrain::Locator
    {
    public:
        MercatorLocator( int tile_size, unsigned int lod );
        MercatorLocator( const osgTerrain::Locator& rhs, int tile_size, unsigned int lod);

        bool convertLocalToModel(const osg::Vec3d& local, osg::Vec3d& model) const;
        bool convertModelToLocal(const osg::Vec3d& world, osg::Vec3d& local) const;

    private:
        int tile_size;
        unsigned int lod;
    };
}

#endif // OSGEARTH_MERCATOR_H