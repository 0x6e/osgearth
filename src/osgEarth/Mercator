/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MERCATOR_H
#define OSGEARTH_MERCATOR_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osgEarth/TileSource>
#include <osgTerrain/Locator>
#include <osgTerrain/TerrainTechnique>
#include <osgDB/ReaderWriter>
#include <string>

namespace osgEarth
{
    /**
     * Methods for dealing with the Spherical Mercator projection.
     */
    class OSGEARTH_EXPORT Mercator
    {
    public:
      /**
      *Converts a location in spherical mercator projection to lat/lon
      * @param x
      *     X coordinate in meters
      * @param y
      *     Y coordinate in meters
      * @param lat
      *     The output latitude
      * @param lon
      *     The output longitude
      */
      static void metersToLatLon(const double &x, const double &y, double &lat, double &lon);

      /**
      *Converts a location in lat/lon to spherical mercator
      *@param lat
      *     The latitude
      *@param lon
      *     The longitude
      *@param x
      *     The output X coordinate in meters
      *@param y
      *     The output Y coordinate in meters
      */
      static void latLongToMeters(const double &lat, const double &lon, double &x, double &y);

      /**
       * Converts a lat/lon location to an X and Y location for a given detail level.
       */
      static int longLatToPixelXY(
          double lon, double lat, unsigned int lod, 
          int tile_size,
          unsigned int& out_x, unsigned int& out_y );

      /** 
       * Calculates the tile indicies for a pixel X,Y location in the mpa.
       */
      static void pixelXYtoTileXY(
          unsigned int x, unsigned int y,
          int tile_size,
          unsigned int& out_tile_x, unsigned int& out_tile_y);
    };


    /**
     * Utility class that lets you generate geodetic tiles from a spherical mercator tile source.
     * In other words, use this to convert mercator imagery into a geodetic projection.
     * Some loss of image quality will occur, particularly if the source imagery includes text.
     */
    class OSGEARTH_EXPORT MercatorToGeodeticTileConverter
    {
    public:
        // imagery resampling filter algorithm
        enum Filter {
            FILTER_NEAREST_NEIGHBOR,
            FILTER_LINEAR
        };

    public:
        MercatorToGeodeticTileConverter( osgEarth::TileSource* source, const osgDB::ReaderWriter::Options* options =NULL );

        /**
         * Sets the image resampling filter to use. Default is FILTER_NEAREST_NEIGHBOR.
         */
        void setFilter( const Filter& filter );

        osg::Image* createImage( const TileKey* key );

        osg::HeightField* createHeightField( const TileKey* key );

    private:
        osg::ref_ptr<osgEarth::TileSource> source;
        Filter filter;
    };


    class MercatorLocator : public osgTerrain::Locator
    {
    public:
        MercatorLocator( int tile_size, unsigned int lod );
        MercatorLocator( const osgTerrain::Locator& rhs, int tile_size, unsigned int lod);

        bool convertLocalToModel(const osg::Vec3d& local, osg::Vec3d& model) const;
        bool convertModelToLocal(const osg::Vec3d& world, osg::Vec3d& local) const;

    private:
        int tile_size;
        unsigned int lod;
    };
}

#endif // OSGEARTH_MERCATOR_H