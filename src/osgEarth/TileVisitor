/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_TILEVISITOR_H
#define OSGEARTH_TILEVISITOR_H 1

#include <osgEarth/Common>
#include <osgEarth/TileHandler>
#include <osgEarth/Profile>
#include <osgEarth/TaskService>

namespace osgEarth
{
    /**
    * Utility class that traverses a Profile and emits TileKey's based on a collection of extents and min/max levels
    */
    class OSGEARTH_EXPORT TileVisitor
    {
    public:

        TileVisitor();

        TileVisitor(TileHandler* handler);

        /**
        * Sets the minimum level to generate
        */
        void setMinLevel(const unsigned int& minLevel) {_minLevel = minLevel;}

        /**
        * Gets the minimum level to generate
        */
        const unsigned int getMinLevel() const {return _minLevel;}

        /**
        * Sets the maximum level to generate
        */
        void setMaxLevel(const unsigned int& maxLevel) {_maxLevel = maxLevel;}

        /**
        * Gets the maximum level to cache to.
        */
        const unsigned int getMaxLevel() const {return _maxLevel;}

        std::vector< GeoExtent >& getExtents() { return _extents; }    

        /**
        *Adds an extent to cache
        */
        void addExtent( const GeoExtent& extent );    

        virtual void run(const Profile* mapProfile);

        bool intersects( const GeoExtent& extent );    

        void setTileHandler( TileHandler* handler );

        void setProgressCallback( ProgressCallback* progress );

        void incrementProgress( unsigned int progress );

    protected:        

        void estimate();

        virtual bool handleTile( const TileKey& key );

        void processKey( const TileKey& key );

        unsigned int _minLevel;
        unsigned int _maxLevel;

        std::vector< GeoExtent > _extents;

        osg::ref_ptr< TileHandler > _tileHandler;

        osg::ref_ptr< ProgressCallback > _progress;

        osg::ref_ptr< const Profile > _profile;

        OpenThreads::Mutex _progressMutex;

        unsigned int _total;
        unsigned int _processed;
    };


    /**
    * A TileVisitor that pushes all of it's generated keys onto a TaskService queue and handles them in background threads.
    */
    class MultithreadedTileVisitor: public TileVisitor
    {
    public:
        MultithreadedTileVisitor();
          
          MultithreadedTileVisitor( TileHandler* handler );

          unsigned int getNumThreads() const;
          void setNumThreads( unsigned int numThreads);

          virtual void run(const Profile* mapProfile);

    protected:

        virtual bool handleTile( const TileKey& key );
        
        unsigned int _numThreads;

        // The work queue to pass seed operations to
        osg::ref_ptr<osgEarth::TaskService> _taskService;
    };
} // namespace osgEarth

#endif // OSGEARTH_TRAVERSAL_DATA_H
