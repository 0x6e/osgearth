/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_KEY_H
#define OSGEARTH_TILE_KEY_H 1

#include <osgEarth/Common>
#include <osgEarth/TileGridProfile>
#include <osg/Referenced>
#include <osg/Image>
#include <osg/Shape>
#include <osgDB/ReaderWriter>
#include <osgTerrain/TerrainTile>
#include <string>

namespace osgEarth
{
    /**
     * Uniquely identifies a single tile on the globe.
     */
    class OSGEARTH_EXPORT TileKey : public osg::Referenced
    {
    public:        
        const std::string& str() const;

        std::string getName() const;

        virtual osgTerrain::TileID getTileId() const = 0;
        const TileGridProfile& getProfile() const;


        int getMapSizePixels() const;

        int getMapSizeTiles() const;

        static int getMapSizePixels( int tile_size, int lod );

    public:
        virtual TileKey* getSubkey( unsigned int quadrant ) const =0;

        virtual TileKey* getParentKey() const = 0;

        virtual unsigned int getLevelOfDetail() const =0;

        virtual bool getGeoExtents(
            double& out_min_lon,
            double& out_min_lat,
            double& out_max_lon,
            double& out_max_lat ) const =0;

        virtual void getPixelExtents(
            unsigned int& xmin,
            unsigned int& ymin,
            unsigned int& xmax,
            unsigned int& ymax) const =0;

        virtual void getTileXY(
            unsigned int& out_tile_x,
            unsigned int& out_tile_y) const =0;

        virtual std::string getTypeCode() const =0;
        
    protected:

        TileKey();

        TileKey( const TileKey& rhs );

        TileKey( const std::string& key, const TileGridProfile& profile );

    protected:
        std::string key;
        TileGridProfile profile;
    };


    class OSGEARTH_EXPORT TileKeyFactory
    {
    public:
        static TileKey* createFromName( const std::string& name );
    };

    class OSGEARTH_EXPORT HeightFieldExtractor : public osg::Referenced
    {
    public:
        HeightFieldExtractor(const TileKey *key, const osg::HeightField *heightField);

        osg::HeightField* extractChild(const TileKey *childKey, const unsigned int &width, const unsigned int &height);

    protected:
        HeightFieldExtractor();
        float getInterpolatedValue(const float &c, const float &r);

        osg::ref_ptr<const TileKey> _key;
        osg::ref_ptr<const osg::HeightField> _heightField;
    };
}

#endif // OSGEARTH_TILE_KEY_H
