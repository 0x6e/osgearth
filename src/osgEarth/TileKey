/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_KEY_H
#define OSGEARTH_TILE_KEY_H 1

#include <osgEarth/Common>
#include <osgEarth/TileGridProfile>
#include <osg/Referenced>
#include <osg/Image>
#include <osg/Shape>
#include <osgDB/ReaderWriter>
#include <osgTerrain/TerrainTile>
#include <string>

namespace osgEarth
{
    /**
     * Uniquely identifies a single tile on the globe.
     */
    class OSGEARTH_EXPORT TileKey : public osg::Referenced
    {
    public:        
        /**
         * Gets the string representation of the key.
         */
        const std::string& str() const;

        /**
         * Gets the name of the key. Same as str().
         */
        std::string getName() const;

        /**
         * Gets a TileID corresponding to this key.
         */
        virtual osgTerrain::TileID getTileId() const;

        /**
         * Gets the profile within which this key is interpreted.
         */
        const osgEarth::TileGridProfile& getProfile() const;

        /**
         * Gets the size of the entire map, in pixels, at the level of
         * detail of this key.
         */
        int getMapSizePixels(const unsigned int& tile_size) const;

        /**
         * Gets the size of the entire map, in tiles, at the level of detail
         * of this key.
         */
        int getMapSizeTiles() const;

        /**
         * Gets the size of a map, in tiles, for a specified level of detail.
         */
        static int getMapSizeTiles(const unsigned int level);

        /**
         * Gets the size of the map, in pixels, for a given level of detail.
         */
        static int getMapSizePixels( const unsigned int &tile_size, const unsigned int &lod );

    public:
        /**
         * Gets a reference to the child key of this key in the specified
         * quadrant (0, 1, 2, or 3).
         */
        virtual TileKey* getSubkey( unsigned int quadrant ) const =0;

        /**
         * Creates and returns a key that represents the parent tile of this key. The
         * caller is responsible for deleting the returned object.
         */
        virtual TileKey* createParentKey() const = 0;

        /**
         * Gets the level of detail of the tile represented by this key.
         */
        virtual unsigned int getLevelOfDetail() const;

        /**
         * Gets the geospatial extents of the tile representated by this key.
         */
        virtual bool getGeoExtents(
            double& minx,
            double& miny,
            double& maxx,
            double& maxy ) const =0;

        /**
         * Gets the extents of this key's tile, in pixels
         */
        virtual void getPixelExtents(
            unsigned int& xmin,
            unsigned int& ymin,
            unsigned int& xmax,
            unsigned int& ymax,
            const unsigned int& tile_size) const;

        /**
         * Gets the X and Y indexes of this tile at its level of detail.
         */
        virtual void getTileXY(
            unsigned int& out_tile_x,
            unsigned int& out_tile_y) const;

        /**
         * Gets the "type code" associated with this key.
         * (to be deprecated)
         */
        virtual std::string getTypeCode() const =0;
        
    protected:

        TileKey();

        TileKey( const TileKey& rhs );

        TileKey( const std::string& key, const TileGridProfile& profile );

    protected:
        std::string key;
        TileGridProfile profile;
    };

    class OSGEARTH_EXPORT HeightFieldExtractor : public osg::Referenced
    {
    public:
        HeightFieldExtractor(const TileKey *key, const osg::HeightField *heightField);

        osg::HeightField* extractChild(const TileKey *childKey, const unsigned int &width, const unsigned int &height);

    protected:
        HeightFieldExtractor();
        float getInterpolatedValue(const float &c, const float &r);

        osg::ref_ptr<const TileKey> _key;
        osg::ref_ptr<const osg::HeightField> _heightField;
    };
}

#endif // OSGEARTH_TILE_KEY_H
