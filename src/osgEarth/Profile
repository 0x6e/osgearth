/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_GRID_PROFILE_H
#define OSGEARTH_TILE_GRID_PROFILE_H 1

#include <osgEarth/Common>
#include <osgEarth/GeoData>
#include <osgEarth/SpatialReference>
#include <osg/CoordinateSystemNode>

namespace osgEarth
{
    class TileKey;
    /**
     * A "profile" defines the layout of a data source. The profile conveys the
     * spatial reference system (SRS), the geospatial extents within that SRS, and
     * the tiling scheme.
     */
    class OSGEARTH_EXPORT Profile : public osg::Referenced
    {
    public:
        // profile types:
        enum ProfileType
        {
            TYPE_UNKNOWN,
            TYPE_GEODETIC,
            TYPE_MERCATOR,
            TYPE_LOCAL
        };

    public:
        static Profile* create(
            const std::string& srs_string,
            double xmin, double ymin, double xmax, double ymax,
            unsigned int numTilesWideAtLod0 =1,
            unsigned int numTilesHighAtLod0 =1 );

        static Profile* create(
            const std::string& srs_string,
            unsigned int numTilesWideAtLod0 =1,
            unsigned int numTilesHighAtLod0 =1 );

        /**
         * Returns true if the profile is properly initialized.
         */
        bool isOK() const;

        /**
         * Gets the extents of the profile (in the profile's SRS)
         */
        //double xMin() const;
        //double yMin() const;
        //double xMax() const;
        //double yMax() const;

        /**
         * Gets the extent of the profile (in the profile's SRS)
         */
        const GeoExtent& getExtent() const;

        /**
         * Gets the extents of the profile (in lat/long)
         */
        //double longMin() const;
        //double latMin() const;
        //double longMax() const;
        //double latMax() const;

        /**
         * Gets the extent of the profile (in lat/long.)
         */
        const GeoExtent& getLatLongExtent() const;
        
        /**
         * Gets the spatial reference system underlying this profile.
         */
        const SpatialReference* getSRS() const;

        /**
         * Gets the profile type
         */
        ProfileType getProfileType() const;  

        /**
         * Gets the tile keys that comprise the tiles at the root (LOD 0) of this
         * profile.
         */
        void getRootKeys(std::vector< osg::ref_ptr<osgEarth::TileKey> >& out_keys) const;

        /**
         * Deduces a profile type given an SRS string.
         */
        static ProfileType getProfileTypeFromSRS(const std::string &srs);

        /**
         * Gets whether or not the Profile is "compatible" with the given profile, i.e.,
         * whether tiles can be mapped between the two profiles.
         */
        bool isCompatibleWith( const Profile* rhs ) const;

        /**
         * Gets whether the two profiles can be treated as equivalent.
         */
        bool isEquivalentTo( const Profile* rhs ) const;

        /**
         *Gets the tile dimensions at the given lod.
         */
        void getTileDimensions(unsigned int lod, double& out_width, double& out_height) const;

        /**
         *Gets the number wide and high at the given lod
         */
        void getNumTiles(unsigned int lod, unsigned int& out_tiles_wide, unsigned int& out_tiles_high) const;

        /**
         *Gets the intersecting tiles of this Profile with the given TileKey.
         */
        void getIntersectingTiles(const TileKey *key, std::vector<osg::ref_ptr<const TileKey> >& out_intersectingKeys) const;

        /** 
         * Clamps the incoming extents to the extents of this profile, and then converts the 
         * clamped extents to this profile's SRS, and returns the result. Returned GeoExtent::INVALID
         * if the transformation fails.
         */
        GeoExtent clampAndTransformExtent( const GeoExtent& input ) const;

    private:       

        Profile(
            const SpatialReference* srs,
            double xmin, double ymin, double xmax, double ymax,
            unsigned int x_tiles_at_lod0 =1,
            unsigned int y_tiles_at_lod0 =1 );

    private:
        GeoExtent _extent;
        GeoExtent _latlong_extent;
        unsigned int _numTilesWideAtLod0;
        unsigned int _numTilesHighAtLod0;
        //osg::ref_ptr<const SpatialReference> _srs;
    };
}

#endif // OSGEARTH_TILE_GRID_PROFILE_H
