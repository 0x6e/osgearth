/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_HTTP_CLIENT_H
#define OSGEARTH_HTTP_CLIENT_H 1

#include <osgEarth/Common>
#include <osg/ref_ptr>
#include <osg/Referenced>
#include <osgDB/ReaderWriter>
#include <sstream>
#include <iostream>
#include <string>
#include <map>
#include <vector>



namespace osgEarth
{
    class OSGEARTH_EXPORT HTTPRequest : public osg::Referenced
    {
    public:
        HTTPRequest( const std::string& url );

        void addParameter( const std::string& name, const std::string& value ); //, ... );
        void addParameter( const std::string& name, int value );
        void addParameter( const std::string& name, double value );
        
        typedef std::map<std::string,std::string> Parameters;

        const Parameters& getParameters() const;

        std::string getURL() const;
        
    private:
        Parameters parameters;
        std::string url;
    };


    class OSGEARTH_EXPORT HTTPResponse : public osg::Referenced
    {
    public:
        HTTPResponse( long code );

        long getCode() const;

        bool isOK() const;

        unsigned int getNumParts() const;

        std::istream& getPartStream( unsigned int n ) const;

        unsigned int getPartSize( unsigned int n ) const;
        
        const std::string& getPartHeader( unsigned int n, const std::string& name ) const;

    private:
        struct Part : public osg::Referenced
        {
            Part() : size(0) { }
            typedef std::map<std::string,std::string> Headers;
            Headers headers;
            unsigned int size;
            std::stringstream stream;
        };
        typedef std::vector< osg::ref_ptr<Part> > Parts;
        Parts parts;
        long response_code;

        friend class HTTPClient;
    };


    class OSGEARTH_EXPORT HTTPClient
    {
    public:
        HTTPClient( const osgDB::ReaderWriter::Options* options =NULL );
        ~HTTPClient();

        void setProxyHost( const std::string& hostname );

        void setProxyPort( unsigned short port );

        HTTPResponse* get( HTTPRequest* request ) const;

        HTTPResponse* get( const std::string& url ) const;

        /*
         *Utility method for downloading a URL to a file
         */
        bool downloadFile(const std::string& url, const std::string& filename);

    private:
        std::string proxy_host;
        unsigned short proxy_port;

        void *curl_handle;


    private:
        void decodeMultipartStream(
            const std::string&   boundary,
            HTTPResponse::Part*  input,
            HTTPResponse::Parts& output) const;
    };
}

#endif // OSGEARTH_HTTP_CLIENT_H