/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#include <osg/Referenced>
#include <osg/Image>
#include <osgEarth/Common>
#include <osgEarth/TileKey>

#include <vector>

namespace osgEarth
{
    /**
    *A GeoImage is an image that has a geospatial extents
    */
    struct OSGEARTH_EXPORT GeoImage
    {
    public:
        /**
        *Constructor
        */
        GeoImage(osg::Image * image, const TileKey* key);

        /**
        *Gets a reference to the Image held by this GeoImage
        */
        osg::Image* getImage() {return _image.get();}

        osg::ref_ptr<osg::Image> _image;       
        double _minX, _minY, _maxX, _maxY;
        unsigned int _tileX;
        unsigned int _tileY;
    };

    /**
    *Utility class for extracting a single image from a collection of image tiles
    */
    class OSGEARTH_EXPORT MultiImage : public osg::Referenced
    {
    public:
        MultiImage();

        /**
        *Extracts an image with the given extents
        */
        osg::Image* createImage(double minx, double miny, double maxx, double maxy);

        /** A list of GeoImages */
        typedef std::vector<GeoImage> GeoImageList;

        /** Gets the images for this MultiImage */
        GeoImageList& getImages() {return _images;}

    protected:
        void getExtents(double &minX, double &minY, double &maxX, double &maxY);

        ~MultiImage();
        GeoImageList _images;
    };
}