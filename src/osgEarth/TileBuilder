/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_BUILDER_H
#define OSGEARTH_TILE_BUILDER_H 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>
#include <osgEarth/MapConfig>
#include <osgDB/ReaderWriter>
#include <osgTerrain/Terrain>
#include <vector>

namespace osgEarth
{
	/*
	* Make a MatrixTransform suitable for use with a Locator object based on the given extents.
	* Calling Locator::setTransformAsExtents doesn't work with OSG 2.6 due to the fact that the _inverse member isn't updated
	* properly.  Calling Locator::setTransform works correctly.
	*/
	inline osg::Matrixd getTransformFromExtents(double minX, double minY, double maxX, double maxY)
	{
		osg::Matrixd transform;
		transform.set(maxX-minX, 0.0,       0.0, 0.0,
			0.0,       maxY-minY, 0.0, 0.0,
			0.0,       0.0,       1.0, 0.0,
			minX,      minY,      0.0, 1.0); 
		return transform;
	}

    //TODO:  Remove the use of EarthTerrain once getTile fix is included in OpenSceneGraph proper
    class OSGEARTH_EXPORT EarthTerrain : public osgTerrain::Terrain
    {
    public:
        virtual const char* className() const { return "EarthTerrain"; }

        /** Get the TerrainTile for a given TileID.*/
        osgTerrain::TerrainTile* getTileOverride(const osgTerrain::TileID& tileID)
        {
            OpenThreads::ScopedLock<OpenThreads::Mutex> lock(_mutex);

            TerrainTileMap::iterator itr = _terrainTileMap.find(tileID);
            if (itr == _terrainTileMap.end()) return 0;

            return itr->second;
        }
    };


    typedef std::vector< osg::ref_ptr<TileSource> > TileSourceList;

    class OSGEARTH_EXPORT TileBuilder : public osg::Referenced
    {
    public:
        static TileBuilder* create(
            MapConfig* map,
            const std::string& url_template,
            const osgDB::ReaderWriter::Options* global_options =NULL );
        
        osg::Node* createNode( const TileKey* key );

        MapConfig* getMapConfig() const;

        TileSourceList &getImageSources() {return image_sources;}
        TileSourceList &getHeightFieldSources() {return heightfield_sources;}

        bool valid();

        const TileGridProfile& getDataProfile();

    protected:
        TileBuilder( 
            MapConfig* map, 
            const std::string& url_template,
            const osgDB::ReaderWriter::Options* global_options );

        std::string createURI( const TileKey* key );

        /*
        * Adds any appropriate child nodes to the given parent group for the given TileKey
        * @param parent
        *        The parent osg::Group to add the children to
        * @param key
        *        The tilekey to generate children for
        * @returns
        *        True if all children were successfully added to the group, false otherwise
        */
        virtual bool addChildren( osg::Group* parent, const TileKey* key ) =0;
        virtual osg::Node* createQuadrant( const TileKey* key ) =0;
        //virtual std::string getProj4String() const =0;
        virtual osg::CoordinateSystemNode* createCoordinateSystemNode() const =0;

        

    protected:

        typedef std::pair<osg::ref_ptr<osg::Image>, osg::ref_ptr<const TileKey>> ImageTileKeyPair;
        typedef std::pair<osg::ref_ptr<osg::HeightField>, osg::ref_ptr<const TileKey>> HeightFieldTileKeyPair;
        typedef std::vector<ImageTileKeyPair> ImageTileList;

        osg::HeightField* createValidHeightField(TileSource* tileSource, const TileKey *key);
        bool createValidImage(TileSource* tileSource, const TileKey *key, ImageTileKeyPair &imageTile);

        TileGridProfile _dataProfile;
        bool _profileComputed;

        osg::ref_ptr<MapConfig> map;
        std::string url_template;
        TileSourceList image_sources;
        TileSourceList heightfield_sources;

        osg::ref_ptr<osgEarth::EarthTerrain> terrain;
    };
};

#endif // OSGEARTH_TILE_BUILDER_H