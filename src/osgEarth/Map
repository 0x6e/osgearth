/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MAP_H
#define OSGEARTH_MAP_H 1

#include <osgEarth/Common>
#include <osgEarth/MapEngine>
#include <osgEarth/Layer>
#include <osgEarth/MapConfig>
#include <osgDB/ReaderWriter>
#include <osg/CoordinateSystemNode>
#include <OpenThreads/ReentrantMutex>

namespace osgEarth
{
    class OSGEARTH_EXPORT Map : public osg::Group
    {
    public:
        /**
         * Creates a new Map node with a default configuration and no data.
         */
        Map();

        /**
         * Creates a new Map node from the given MapConfig.  This allows you to
         * programatically create a MapConfig and create a paging scene graph out of it.
         */
        Map( const MapConfig& conf );

    public:

        /**
         * Returns true if the configuration used to create this Map node was valid
         * and loaded as expected.
         */
        bool isOK() const;

        /**
         * Finds the topmost Map node in the specified scene graph, or returns NULL if
         * no Map node exists in the graph.
         */
        static Map* findMapNode( osg::Node* graph );

        /**
         * Finds the topmost CSN in the specified scene graph, or returns NULL if no 
         * CSN exists in the graph.
         */
        static osg::CoordinateSystemNode* findCoordinateSystemNode( osg::Node* graph );

        /**
         *Callback used to notify listeners of layer changes
        */
        struct LayerCallback : public osg::Referenced
        {
        public:
            virtual void layerAdded(Layer* layer) {}
            virtual void layerRemoved(Layer* layer) {}
            virtual void layerMoved(Layer* layer, unsigned int prevIndex, unsigned int newIndex) {}
        };

        /**
         *Gets the LayerCallback of this Map
        */
        LayerCallback* getLayerCallback() const {return _layerCallback.get();}

        /**
         *Sets the LayerCallback of this Map
        */
        void setLayerCallback(LayerCallback* layerCallback) { _layerCallback = layerCallback;}

        /**
         * Creates a new layer from the provided configuration and adds it to the end of
         * the layer list. Returns true upon success.
         */
        bool addImageLayer( const SourceConfig& conf );

        /**
         * Creates a new height-field layer from the provided configuration and adds it to the
         * end of the layer list. Returns true upon success.
         */
        bool addHeightFieldLayer( const SourceConfig& conf );

        /**
         * Adds the given layer to the end of the Layer list
         */
        void addLayer( Layer* layer );

        /**
         * Removes the given layer from this Map's Layer List.
         */
        void removeLayer( Layer* layer );

        /**
         * Moves the given layer to the given position in this Map's Layer list.
         */
        void moveLayer( Layer* layer, int position );

        /**
         * Gets the number of layers contained in this Map
         */
        unsigned int getNumLayers() const;

        /**
         * Gets the Layer at the given position in this Map.
         */
        Layer* getLayer( unsigned int i ) const;

        /**
         * Gets the index of the given layer.  -1 is returned if the layer is not in the list          
         */
        int getLayerIndex( Layer* layer) const;

        /**
         * Get a list of all ImageLayers in this Map.  The ImageLayers will be returned in
         * the order in which they appear in the Layer list
         */
        void getImageLayers( ImageLayerList& layers ) const;

        /**
         * Get a list of all ElevationLayers in this Map.  The ElevationLayers will be
         * returned in the order in which they appear in the Layer list
         */
        virtual void getElevationLayers( ElevationLayerList& layers ) const;

        /**
         * Creates a TileSource with the given SourceConfig
         */
        TileSource* createTileSource( const SourceConfig& sourceConfig );

        /**
         * Gets the profile of the underlying map
         */
        const Profile* getProfile() const;

        /**
         * Returns true if the realized terrain model is geocentric, false if
         * it is flat/projected.
         */
        bool isGeocentric() const;

        /**
         * Gets the underlying map engine that generates data for this map node.
         */
        MapEngine* getEngine() const;


    protected:        
        virtual ~Map();

    private:
        Map( MapEngine* engine );

        void init( const MapConfig& conf );

        osg::ref_ptr<MapEngine> _engine;

        void updateStateSet();

        osg::ref_ptr<LayerCallback> _layerCallback;
    };
}

#endif // OSGEARTH_MAP_H
