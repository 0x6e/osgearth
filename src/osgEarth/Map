/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MAP_H
#define OSGEARTH_MAP_H 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>
#include <osgEarth/MapConfig>
#include <osgEarth/Compositing>
#include <osgEarth/Layer>

#include <OpenThreads/ReadWriteMutex>
#include <osgDB/ReaderWriter>
#include <osgTerrain/Terrain>
#include <vector>

namespace osgEarth
{
    /**
     * Helper class that works around a bug in OSG pre-2.8.
     */
    class OSGEARTH_EXPORT EarthTerrain : public osgTerrain::Terrain
    {
    public:
        virtual const char* className() const { return "EarthTerrain"; }

        /** Get the TerrainTile for a given TileID. */
        osgTerrain::TerrainTile* getTileOverride(const osgTerrain::TileID& tileID)
        {
            OpenThreads::ScopedLock<OpenThreads::Mutex> lock(_mutex);

            TerrainTileMap::iterator itr = _terrainTileMap.find(tileID);
            if (itr == _terrainTileMap.end()) return 0;

            return itr->second;
        }

        typedef std::vector< osg::ref_ptr<osgTerrain::TerrainTile> > TerrainTileList;

        void getTerrainTiles( TerrainTileList &tiles )
        {
            OpenThreads::ScopedLock<OpenThreads::Mutex> lock(_mutex);

            for(TerrainTileSet::iterator itr = _terrainTileSet.begin();
                itr != _terrainTileSet.end();
                ++itr)
            {
                tiles.push_back( (*itr) );
            }
        }
    };


    /**
     * Map is the main workhorse in osgEarth. It generates osg Nodes for TileKeys.
     */
    class OSGEARTH_EXPORT Map : public osg::Group
    {
    public:
        /**
         * Creates a Node from the given MapConfig.  This allows you to programatically create a
         * MapConfig and create a paging scene graph out of it.
         */
        static osg::Node* readNode( MapConfig* mapConfig );     

    public:
        /**
         * Factory method that constructs a Map instance given a
         * map configuration.
         */
        static Map* create(
            MapConfig* mapConfig,
            const osgDB::ReaderWriter::Options* global_options =NULL );

        /**
        *Gets the ID for this Map
        */
        unsigned int getId() const;

        /**
         * Creates a node graph for a given TileKey.
         */
        osg::Node* createNode( const TileKey* key );

        /**
         * Gets the map configuration with which this map was created.
         */
        MapConfig* getMapConfig() const;

        /**
         * Gets whether this map is legally configured.
         */
        bool isOK() const;

        /**
         * Gets the "profile" of the map. The profile defines
         * the geospatial projection, extents, and the tiling scheme.
         */
        const Profile* getProfile() const;

        GeoImage* createGeoImage(const TileKey* key, TileSource* source);

        //Registers the given Map with osgEarth.  This should not be called by user code
        static void registerMap(Map* Map);
        //Unregisters the given Map.  This should not be called by user code
        static void unregisterMap(unsigned int id);

        //Gets the registered Map by the Map ID
        static Map* getMapById(unsigned int id);

        /**
         * Adds the given layer to the end of the Layer list
         */
        void addLayer( Layer* layer );

        /**
         * Removes the given layer from this Map's Layer List.
         */
        void removeLayer( Layer* layer );

        /**
         *Moves the given layer to the given position in this Map's Layer list.
         */
        void moveLayer( Layer* layer, int position );

        /**
         *Gets the number of layers contained in this Map
         */
        unsigned int getNumLayers() const;

        /**
         *Gets the Layer at the given position in this Map.
         */
        Layer* getLayer( unsigned int i ) const;

        /**
         *Get a list of all ImageLayers in this Map.  The ImageLayers will be returned in the order in which they appear in the Layer list
         */
        void getImageLayers( ImageLayerList &layers );

        /**
         *Get a list of all ElevationLayers in this Map.  The ElevationLayers will be returned in the order in which they appear in the Layer list
         */
        void getElevationLayers( ElevationLayerList &layers );

        /**
         *Creates a TileSource with the given SourceConfig
         */
        TileSource* createTileSource( SourceConfig* sourceConfig );


    protected:
        Map( 
            MapConfig* map, 
            const osgDB::ReaderWriter::Options* global_options );

        virtual ~Map();

        /**
         * Gets a pagedLOD child URI given a tile key.
         */
        std::string createURI( const TileKey* key );

        /**
        * Adds any appropriate child nodes to the given parent group for the given TileKey.
        * The implementation class must define this method.
        *
        * @param parent
        *        The parent osg::Group to add the children to
        * @param key
        *        The tilekey to generate children for
        * @returns
        *        True if all children were successfully added to the group, false otherwise
        */
        virtual bool addChildren( osg::Group* parent, const TileKey* key );

        /**
         * The implementation class must define this function, which creates one of
         * a child quadrant of a tile node.
         */
        virtual osg::Node* createQuadrant( const TileKey* key ) =0;

        /**
         * The implementing class must define this method to create a valid
         * CoordinateSystemNode that will top the scene graph.
         */
        virtual osg::CoordinateSystemNode* createCoordinateSystemNode() const;

        //Initializes the scene graph for this Map after it has been contstructed
        virtual void initialize();

    protected:
        GeoImage* createValidGeoImage(TileSource* tileSource, const TileKey* key);
        
	    osg::Matrixd getTransformFromExtents(double minX, double minY, double maxX, double maxY) const;

        // checks whether more data exists below the specified key's level of detail
        bool hasMoreLevels( const TileKey* key );

        unsigned int id;

        osg::ref_ptr<MapConfig> _mapConfig;

        //Use observer_ptr so the Map does not prevent the main scene graph from being deleted
        std::vector< osg::observer_ptr<osgEarth::EarthTerrain> > _terrains;

        //The list of layers contained by the map;        
        LayerList _layers;
        OpenThreads::ReadWriteMutex _layersMutex;

        osg::ref_ptr< const osgDB::ReaderWriter::Options > _options;

        osg::HeightField* getHeightField( const TileKey* key, bool fallback );

        osg::HeightField* getEmptyHeightField( const TileKey* key );

    private:

        osg::ref_ptr<const Profile> _profile;

        void initializeLayers();

        void addSources(
            const MapConfig* mapConfig,
            const SourceConfigList& from, 
            std::vector< osg::ref_ptr<TileSource> >& to,
            const osgDB::ReaderWriter::Options* global_options);
    };
};

#endif // OSGEARTH_MAP_H
