/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MAP_H
#define OSGEARTH_MAP_H 1

#include <osgEarth/Common>
#include <osgEarth/Caching>
#include <osgEarth/Profile>
#include <osgEarth/MapOptions>
#include <osgEarth/ImageLayer>
#include <osgEarth/ElevationLayer>
#include <osgEarth/ModelLayer>
#include <osgEarth/MaskLayer>
#include <osgEarth/ThreadingUtils>
#include <osgDB/ReaderWriter>
#include <osg/TransferFunction>

namespace osgEarth
{    
    /**
     * Callback that the Map object uses to notify listeners of map source changes.
     */
    struct OSGEARTH_EXPORT MapCallback : public osg::Referenced
    {
        virtual void onMapProfileEstablished( const Profile* profile ) { }

        virtual void onImageLayerAdded( ImageLayer* layer, unsigned int index ) { }
        virtual void onImageLayerRemoved( ImageLayer* layer, unsigned int index ) { }
        virtual void onImageLayerMoved( ImageLayer* layer, unsigned int oldIndex, unsigned int newIndex ) { }

        virtual void onElevationLayerAdded( ElevationLayer* layer, unsigned int index ) { }
        virtual void onElevationLayerRemoved( ElevationLayer* layer, unsigned int index ) { }
        virtual void onElevationLayerMoved( ElevationLayer* layer, unsigned int oldIndex, unsigned int newIndex ) { }

        virtual void onModelLayerAdded( ModelLayer* layer ) { }
        virtual void onModelLayerRemoved( ModelLayer* layer ) { }

        virtual void onMaskLayerAdded( MaskLayer* mask ) { }
        virtual void onMaskLayerRemoved( MaskLayer* mask ) { }
    };

    typedef std::list< osg::ref_ptr<MapCallback> > MapCallbackList;


    /**
     * A Map is a container that holds a number of ordered MapLayer objects. This is the data model
     * that a MapNode will render.
     */
    class OSGEARTH_EXPORT Map : public osg::Referenced
    {
    public:
        enum SamplePolicy
        {
            FIRST_VALID,
            HIGHEST,
            LOWEST,
            AVERAGE
        };

    public:
        /**
         * Constructs a new, empty map.
         */
        Map( const MapOptions& options =MapOptions() );

    public:
        /**
         * Gets the optons with which this map was created.
         */
        const MapOptions& getMapOptions() const { return _mapOptions; }

        /**
         * Gets the map's master profile. This value may not be available until 
         * after autoCalculateProfile has been called.
         */
        const Profile* getProfile() const;

        /**
         * Gets the ordered list of image layers in this map. Be sure to use
         * getMapDataMutex() when iterating the list.
         *
         * TO BE DEPRECATED
         */
        const ImageLayerVector& getImageLayers() const { return _imageLayers; }

        /**
         * Copies references of the map image layers into the output list.
         * This method is thread safe. It returns the map revision that was
         * in effect when the data was copied.
         */
        int getImageLayers( ImageLayerVector& out_layers, bool validLayersOnly =false ) const;

        /**
         * Gets the ordered list of heightfield layers in this map. Be sure to use
         * getMapDataMutex() when iterating the list.
         *
         * TO BE DEPRECATED
         */
        const ElevationLayerVector& getElevationLayers() const { return _elevationLayers; }

        /**
         * Copies references of the elevation layers into the output list.
         * This method is thread safe. It returns the map revision that was
         * in effect when the data was copied.
         */
        int getElevationLayers( ElevationLayerVector& out_layers, bool validLayersOnly =false ) const;

        /** 
         * Copies references of the model layers into the output list.
         * This method is thread safe. It returns the map revision that was
         * in effect when the data was copied.
         */
        int getModelLayers( ModelLayerVector& out_layers, bool validLayersOnly =false ) const;
        //const ModelLayerList& getModelLayers() const;

        /**
         * Gets the model layer to draw as a terrain mask.
         */
        MaskLayer* getTerrainMaskLayer() const;

        /**
         * Adds a map layer callback to this map. This will be notified whenever layers are
         * added, removed, or re-ordered.
         */
        void addMapCallback( MapCallback* callback );

        /**
         * Adds an image layer to the map.
         */
        void addImageLayer( ImageLayer* layer );
        //void addMapLayer( MapLayer* layer );

        /**
         * Removes an image layer from the map.
         */
        void removeImageLayer( ImageLayer* layer );
        //void removeMapLayer( MapLayer* layer );

        /**
         * Moves (re-orders) an image layer to another index position in its list.
         */
        void moveImageLayer( ImageLayer* layer, unsigned int newIndex );
        //void moveMapLayer( MapLayer* layer, unsigned int newIndex );

        /**
         * Adds an elevation layer to the map.
         */
        void addElevationLayer( ElevationLayer* layer );
        //void addMapLayer( MapLayer* layer );

        /**
         * Removes an elevation layer from the map.
         */
        void removeElevationLayer( ElevationLayer* layer );
        //void removeMapLayer( MapLayer* layer );

        /**
         * Moves (re-orders) an elevation layer to another index position in its list.
         */
        void moveElevationLayer( ElevationLayer* layer, unsigned int newIndex );
        //void moveMapLayer( MapLayer* layer, unsigned int newIndex );

        /**
         * Adds a new model layer to the map.
         */
        void addModelLayer( ModelLayer* layer );

        /**
         * Removes a model layer from the map.
         */
        void removeModelLayer( ModelLayer* layer );
        
        /**
         * Set a layer to use as a terrain mask. The map engine will draw
         * this layer using the stencil buffer.
         */
        void setTerrainMaskLayer( MaskLayer* layer );

        /**
         * Removed a terrain mask layer that was set with setTerrainMaskLayer().
         */
        void removeTerrainMaskLayer();

    public:

        //TODO: move this elsewhere!

        /**
         * Gets the transfer function that is used to automatically determine the elevation based contour texture.
         */
        osg::TransferFunction1D* getContourTransferFunction(void) const;
        
        /// Sets the transfer function that is used to automatically determine the elevation based contour texture.
        /**
         * If a transfer function exists the class osgEarth::EarthTerrainTechnique creates for each tile a contour layer. A contour layer
         * visualizes the elevation of a terrain by giving the elevation a dedicated color.
         *
         * The color is determined by using the transfer function. The transfer function stores for certain elevations a color. The more cells
         * it has the smoother the color interpolation is. The color is determined by the elevation value only and is not influenced by an
         * eventually set elevation (vertical) scaling by the map engine.
         *
         * Parameters for contour generation can be set in the map engine property class.
         *
         * @note The transfer function has to be set before the map is assigned to a map node.
         *
         * @remark The contour layer is created before any existing image layer.
         *
         * @sa osg::TransferFunction1D, osgEarth::MapEngineProperties, osgTerrain::ContourLayer
         */
        void setContourTransferFunction(osg::TransferFunction1D* transferFunction);

    public:
        /**
         * Gets the user-provided options structure stored in this map.
         */
        const osgDB::ReaderWriter::Options* getGlobalOptions() const;

        void setGlobalOptions( const osgDB::ReaderWriter::Options* options );

        /**
         * Sets the readable name of this map.
         */
        void setName( const std::string& name );

        /** 
         * Gets the readable name of this map.
         */
        const std::string& getName() const { return _name; }

        /**
         * Gets the mutex that protects access to the Map layer lists.
         * TODO: re-evaluate whether exposing this is really necessary or wise; alteratives
         * would include const access to the Map from the engine
         */
        Threading::ReadWriteMutex& getMapDataMutex();

        /**
         * Creates a heightfield for the region covered by the given TileKey, falling back on
         * lower resolutions if necessary. 
         *
         * @param key
         *      Tile key defining the region (and ideal LOD) for which to return a heightfield
         * @param samplePolicy
         *      See enum SamplePolicy in this class.
         */
        osg::HeightField* createHeightField(
            const TileKey& key,
            bool fallback,
            ElevationInterpolation interpolation =INTERP_AVERAGE,
            SamplePolicy samplePolicy =FIRST_VALID,
            ProgressCallback* progress = 0);

		/**
		 * Sets the Cache for this Map
		 */
		void setCache( Cache* cache );

        /**
         * Gets the revision # of the map. The revision # changes every time
         * you add, remove, or move layers. You can use this to track changes
         * in the map model (as a alternative to installing a MapCallback).
         */
        int getDataModelRevision() const;

        /**
         * Convenience function that returns TRUE if the map cs type is
         * geocentric.
         */
        bool isGeocentric() const;

    protected:

        ~Map() { }

		/**
		 * Gets the Cache for this Map
		 */
		Cache* getCache();

    private:

        MapOptions _mapOptions;
        std::string _name;
        ImageLayerVector _imageLayers;
        ElevationLayerVector _elevationLayers;
        ModelLayerVector _modelLayers;
        osg::ref_ptr<MaskLayer> _terrainMaskLayer;
        MapCallbackList _mapCallbacks;
        osg::ref_ptr<const osgDB::ReaderWriter::Options> _globalOptions;
        Threading::ReadWriteMutex _mapDataMutex;
        osg::ref_ptr<const Profile> _profile;
		osg::ref_ptr<Cache> _cache;
        int _dataModelRevision;

        osg::ref_ptr<osg::TransferFunction1D> _contourTransferFunction; ///< Storing the colour data for elevation levels

    private:
        void calculateProfile();

        friend class MapWorkingSet;
    };


    class OSGEARTH_EXPORT MapWorkingSet
    {
    public:
        MapWorkingSet( Map* map );

        const Profile* getProfile() const { return _map->getProfile(); }
        const ImageLayerVector& imageLayers() const { return _imageLayers; }
        const ElevationLayerVector& elevationLayers() const { return _elevationLayers; }

        osg::HeightField* createHeightField(
            const TileKey& key,
            bool fallback,
            ElevationInterpolation interpolation =INTERP_AVERAGE,
            Map::SamplePolicy samplePolicy =Map::FIRST_VALID,
            ProgressCallback* progress = 0);    

    private:
        Map* _map;
        ImageLayerVector _imageLayers;
        ElevationLayerVector _elevationLayers;
    };
}

#endif // OSGEARTH_MAP_H
