/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_CACHE_H
#define OSGEARTH_TILE_CACHE_H

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osg/Image>

namespace osgEarth
{
    class TileSource;

    /**
    * TileCache is an abstract class that provides methods for caching tiles from TileSource's based on key
    */
    class OSGEARTH_EXPORT TileCache : public osg::Referenced
    {
    public:
        /**
         * Gets the cached image for the given TileKey for the given TileSource.
         * If a cached image does not exist for the given TileKey, this function returns NULL
         */
        virtual osg::Image* getImage(const TileKey* key, const TileSource* source) = 0;

        /**
         * Caches the given image for the given TileKey and TileSource
         */
        virtual void setImage(const TileKey* key, const TileSource* source, const osg::Image* image) = 0;

        /**
         * Gets the current MapConfig filename.  This is used for getting relative paths to the MapConfig.
         */
        virtual const std::string& getMapConfigFilename() {return _mapConfigFilename;}

        /**
         * Sets the current MapConfig filename.
         */
        virtual void setMapConfigFilename( const std::string &mapConfigFilename ) { _mapConfigFilename = mapConfigFilename;}
    protected:
        std::string _mapConfigFilename;
    };


    /**
     *DiskCache is an implementation of the TileCache class that caches in a format compatible with
     *Metacarta's TileCache "Disk" style caching.  This means that the resulting osgEarth cache can be used by any client
     *that can consume Metacarta's TileCache Disk style caching.  Subclasses of DiskCache can simply implement the 
     *getFileName function to provide different naming schemes.
     *http://tilecache.org/
     */
    class OSGEARTH_EXPORT DiskCache : public TileCache
    {
    public:
        /**
         *Creates a new DiskCache.
         *@param path
         *       The path to the directory to cache to
         *@param format
         *       The format to cache tiles to (png, jpg, dds, etc).
         */
        DiskCache(const std::string &path, const std::string format);
             
        /**
         * Gets the cached image for the given TileKey for the given TileSource.
         * If a cached image does not exist for the given TileKey, this function returns NULL
         */
        virtual osg::Image* getImage(const TileKey* key, const TileSource* source);
        
        /**
         * Caches the given image for the given TileKey and TileSource
         */
        virtual void setImage(const TileKey* key, const TileSource* source, const osg::Image* image);

        /**
         * Gets the filename to cache to for the given TileKey and TileSource
         */
        virtual std::string getFileName(const TileKey* key, const TileSource* source);

        /**
         * Get the format that should be used for the given TileSource.  If a format has been set for this DiskCache,
         * it will be used.  Otherwise, the TileSource's getExtension() method will be used to determine the format.
         * if the getExtension() method returns an empty string, the format will default to PNG.
         */
        std::string getFormat(const TileSource* source);

        /**
         * Gets the path to cache to
         */
        std::string getPath();
    protected:
        std::string _path;
        std::string _format;
    };

    /**
     * TMSCache is an implementation of the DiskCache class that caches tiles to disk in a style compatible with the TMS specification.
     * http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification
     */
    class OSGEARTH_EXPORT TMSCache : public DiskCache
    {
    public:
        /**
         *Creates a new TMSCache.
         *@param path
         *       The path to the directory to cache to
         *@param format
         *       The format to cache tiles to (png, jpg, dds, etc).
         */
        TMSCache(const std::string &path, const std::string format);

        /**
         * Gets the filename to cache to for the given TileKey and TileSource
         */
        virtual std::string getFileName(const TileKey* key, const TileSource* source);

        /**
         * Gets whether or not to invert the y tile index
         */
        const bool& getInvertY() {return _invertY; }

        /**
         * Sets whether or not to invert the y tile index
         */
        void setInvertY(const bool &invertY) {_invertY = invertY;}
    protected:
        bool _invertY;
    };

    /**
     * QuadKeyCache is an implementation of the DiskCache class that caches tiles to disk as a directory of images
     * referenced by their QuadKey string.
     */
    class OSGEARTH_EXPORT QuadKeyCache : public DiskCache
    {
    public:
         /**
         *Creates a new QuadKeyCache.
         *@param path
         *       The path to the directory to cache to
         *@param format
         *       The format to cache tiles to (png, jpg, dds, etc).
         */
        QuadKeyCache(const std::string &path, const std::string format);

        /**
         * Gets the filename to cache to for the given TileKey and TileSource
         */
        virtual std::string getFileName(const TileKey* key, const TileSource* source);
    };

    /**
     *Null Cache is a TileCache that does no caching at all.  It is simply a passthrough.  This cache is useful
     *when you specify a map level cache but want to turn off caching for a particular TileSource.
     */
    class OSGEARTH_EXPORT NullCache : public TileCache
    {
    public:
        NullCache() {}
        osg::Image* getImage(const TileKey* key, const TileSource* source) {return 0;}
        void setImage(const TileKey* key, const TileSource* source, const osg::Image* image) {};
    };

    /**
     * TileCacheFactory is used to created TileCache's from configuration properties.
     */
    class OSGEARTH_EXPORT TileCacheFactory
    {
    public:
        /**
        *Creates a TileCache of the given type with the given properties.
        */
        static TileCache* create(const std::string &type, std::map<std::string,std::string> properties); 
    };
}

#endif //OSGEARTH_TILE_CACHE_H

