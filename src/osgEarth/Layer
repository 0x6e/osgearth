/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_LAYER_H
#define OSGEARTH_LAYER_H 1

#include <osgEarth/Export>
#include <osgEarth/TileSource>

#include <osg/Referenced>
#include <osg/ref_ptr>

#include <osgTerrain/Layer>

#include <vector>
#include <string>

namespace osgEarth
{
    class OSGEARTH_EXPORT Layer : public osg::Referenced
    {
    public:
        Layer();

        int getId() const;

        const std::string& getName() const;
        void setName( const std::string &name );

        bool getEnabled() const;
        void setEnabled( bool enabled );

        float getOpacity() const;
        void setOpacity(float opacity);


    protected:
        virtual ~Layer();
        int _id;
        std::string _name;
        bool _enabled;
        float _opacity;
    };

    /**A list of Layers*/
    typedef std::vector< osg::ref_ptr<Layer> > LayerList;

    class OSGEARTH_EXPORT ImageLayer : public Layer
    {
    public:
        ImageLayer(osgEarth::TileSource* tileSource);
        
        osgEarth::TileSource* getTileSource() const;

    protected:
        osg::ref_ptr<osgEarth::TileSource> _tileSource;
    };

    /**A list of ImageLayers*/
    typedef std::vector< osg::ref_ptr<ImageLayer> > ImageLayerList;

    class OSGEARTH_EXPORT ElevationLayer : public Layer
    {
    public:
        ElevationLayer(osgEarth::TileSource* tileSource);
        
        osgEarth::TileSource* getTileSource() const;

    protected:
        osg::ref_ptr<osgEarth::TileSource> _tileSource;
    };

    /**A list of ElevationLayers*/
    typedef std::vector< osg::ref_ptr<ElevationLayer> > ElevationLayerList;

    class OSGEARTH_EXPORT osgEarthImageLayer : public osgTerrain::ImageLayer
    {
    public:
        osgEarthImageLayer(int layerId, osg::Image* image = 0);

        int getLayerId() const;

        float getOpacity() const;
        void setOpacity(float opacity);

        bool getVisible() const;
        void setVisible(bool visible);
    protected:
        int _layerId;
        float _opacity;
        bool _visible;
    };
}

#endif //OSGEARTH_LAYER_H