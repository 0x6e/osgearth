/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHFEATURES_FEATURESOURCENODE_H
#define OSGEARTHFEATURES_FEATURESOURCENODE_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/FeatureSource>
#include <osg/Drawable>
#include <osg/MatrixTransform>

namespace osgEarth { namespace Features
{
	class FeatureSource;
	class OSGEARTHFEATURES_EXPORT FeatureSourceNode : public osg::MatrixTransform
	{
	public:
		FeatureSourceNode(FeatureSource * featureSource=NULL, FeatureID fid=-1);

		FeatureSource * getSource() const { return _featureSource.get(); }
		FeatureID getFID() const { return _fid; }

        virtual const char* className() const { return "FeatureSourceNode"; }
        virtual const char* libraryName() const { return "osgEarthFeatures"; }

	private:
        osg::ref_ptr<FeatureSource> _featureSource;
		FeatureID _fid;
	};

	class OSGEARTHFEATURES_EXPORT FeatureSourceMultiNode : public FeatureSourceNode
	{
	public:
		FeatureSourceMultiNode(FeatureSource* featureSource = NULL);

	public:

        void tagPrimitiveSets( osg::Drawable* drawable, FeatureID fid ) const;

        void reindex( osg::Node* graph );

		bool getFID(osg::PrimitiveSet* pset, FeatureID& output) const;

		bool getFID(osg::Drawable* drawable, int primitiveIndex, FeatureID& output) const;

        typedef osg::Geometry::PrimitiveSetList PrimitiveSetList;
        typedef std::map<osg::Drawable*, PrimitiveSetList> FeatureDrawSet;
        FeatureDrawSet& getDrawSet( const FeatureID& fid );

	private:
        typedef std::map<FeatureID, FeatureDrawSet> FeatureIDDrawSetMap;
        FeatureIDDrawSetMap _drawSets;

        struct Collect : public osg::NodeVisitor {
            Collect(FeatureIDDrawSetMap&);
            void apply(osg::Geode&);
            FeatureIDDrawSetMap& _index;
            unsigned _psets;
        };

    public:
        virtual const char* className() const { return "FeatureSourceMultiNode"; }
        virtual const char* libraryName() const { return "osgEarthFeatures"; }
	};

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_FEATURESOURCENODE_H
