/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHFEATURES_FEATURE_H
#define OSGEARTHFEATURES_FEATURE_H 1

#include <osgEarthFeatures/Common>
#include <osgEarth/SpatialReference>
#include <osg/Array>
#include <map>
#include <list>

namespace osgEarthFeatures
{
    /**
     * Metadata and schema information for feature data.
     */
    class OSGEARTHFEATURES_EXPORT FeatureProfile : public osg::Referenced
    {
    public:
        enum GeometryType {
            GEOM_UNKNOWN,
            GEOM_POINT,
            GEOM_LINE,
            GEOM_POLYGON
        };

    public:
        FeatureProfile(
            const SpatialReference* srs,
            GeometryType geomType,
            int dimensionality,
            bool multiGeometry =false );

        /** Gets the spatial reference system of feature shapes in this class. */
        const SpatialReference* getSRS() const;

        /** Gets the vector shape type for features in this class. */
        GeometryType getGeometryType() const;

        /** Gets the dimensionality for features in this class. */
        int getDimensionality() const;

        /** Whether each feature contains more than one multipart geometry. (Not the
            same as multi-part...all features are assumed to be multi-part) */
        bool isMultiGeometry() const;

    protected:
        osg::ref_ptr<const SpatialReference> _srs;
        GeometryType _geomType;
        int _dimensionality;
        bool _multiGeometry;
    };

    typedef std::map<std::string, std::string> FeatureAttributes;
    
    typedef osg::ref_ptr<osg::Vec3dArray> FeatureGeomPart;

    class FeatureGeometry : public std::vector<FeatureGeomPart>
    {
    public:
        int getTotalPointCount() const;

        bool isClosed( const osg::Vec3dArray* part ) const;
    };

    /**
     * Basic building block of vector feature data.
     */
    class OSGEARTHFEATURES_EXPORT Feature : public osg::Object
    {
    public:
        Feature( long fid =0L );

        /** Copy contructor */
        Feature( const Feature& rhs, const osg::CopyOp& copyop =osg::CopyOp::DEEP_COPY_ALL );

        META_Object( osgEarthFeatures, Feature );

    public:

        long getFID() const;

        void setPart( int part, osg::Vec3dArray* points );

        void addPart( osg::Vec3dArray* points );

        void setGeometry( const FeatureGeometry& geom );

        const FeatureGeometry& getGeometry() const;

        int getNumParts() const;

        osg::Vec3dArray* getPart( int part ) const;

        void setAttr( const std::string& name, const std::string& value );

        const std::string& getAttr( const std::string& name ) const;

    protected:
        long _fid;
        FeatureGeometry _parts;
        FeatureAttributes _attrs;
    };

    typedef std::list< osg::ref_ptr<Feature> > FeatureList;
}

#endif // OSGEARTHFEATURES_FEATURE_H
