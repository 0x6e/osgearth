/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHFEATURES_STYLING_H
#define OSGEARTHFEATURES_STYLING_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Query>
#include <osgEarthFeatures/Geometry>
#include <osgEarth/Config>
#include <osg/Vec4>
#include <osg/Notify>
#include <list>

namespace osgEarth { namespace Features
{
    class OSGEARTHFEATURES_EXPORT StyleComponent
    {
    public:
        virtual void accept( class StyleVisitor& visitor ) =0;
    };

    class OSGEARTHFEATURES_EXPORT StyleVisitor
    {
    public:
        virtual void apply( class Stroke& obj );
        virtual void apply( class Fill& obj );
        virtual void apply( class LineSymbolizer& obj );
        virtual void apply( class PolygonSymbolizer& obj );
        virtual void apply( class Style& obj );
        virtual void apply( class StyledLayer& obj );
        virtual void apply( class StyleCatalog& obj );
    };

    class OSGEARTHFEATURES_EXPORT Stroke : public StyleComponent
    {
    public:
        enum LineCapStyle {
            LINECAP_DEFAULT,
            LINECAP_BUTT,
            LINECAP_SQUARE,
            LINECAP_ROUND
        };

        enum LineJoinStyle {
            LINEJOIN_DEFAULT
        };

    public:
        Stroke()
            : _color( 255, 255, 255, 255 ),
              _width( 1.0f ),
              _opacity( 1.0f ),
              _lineJoin( LINEJOIN_DEFAULT ),
              _lineCap( LINECAP_DEFAULT ) { }

        Stroke( const Stroke& rhs )
            : _lineJoin( rhs._lineJoin ),
              _lineCap( rhs._lineCap ),
              _color( rhs._color ),
              _width( rhs._width ),
              _opacity( rhs._opacity ) { }

        osg::Vec4ub& color() {
            return _color; }
        const osg::Vec4ub color() const {
            return _color; }

        float& opacity() {
            return _opacity; }
        const float& opacity() const {
            return _opacity; }

        LineCapStyle& lineCap() {
            return _lineCap; }
        const LineCapStyle& lineCap() const {
            return _lineCap; }

        LineJoinStyle& lineJoin() {
            return _lineJoin; }
        const LineJoinStyle& lineJoin() const {
            return _lineJoin; }

        float& width() { 
            return _width; }        
        const float& width() const {
            return _width; }

        float& dashOffset() {
            return _dashOffset; }
        const float& dashOffset() const {
            return _dashOffset; }

        virtual void accept( class StyleVisitor& visitor ) {
            visitor.apply( *this ); }

    protected:
        osg::Vec4ub _color;
        float _opacity;
        LineJoinStyle _lineJoin;
        LineCapStyle  _lineCap;
        float _width;
        float _dashOffset;
    };

    class OSGEARTHFEATURES_EXPORT Fill : public StyleComponent
    {
    public:
        Fill()
            : _color( 255, 255, 255, 255 ),
              _opacity( 1.0f ) { }
        Fill( const Fill& rhs )
            : _color( rhs._color ),
              _opacity( rhs._opacity ) { }

        osg::Vec4ub& color() {
            return _color; }
        const osg::Vec4ub color() const {
            return _color; }

        float& opacity() {
            return _opacity; }
        const float& opacity() const {
            return _opacity; }

        virtual void accept( class StyleVisitor& visitor ) {
            visitor.apply( *this ); }

    protected:
        osg::Vec4ub _color;
        float _opacity;
    };

    class OSGEARTHFEATURES_EXPORT Symbolizer : public StyleComponent
    {
    protected:
        Symbolizer() { }
        Symbolizer( const Symbolizer& rhs ) { }
    };

    class OSGEARTHFEATURES_EXPORT LineSymbolizer : public Symbolizer
    {
    public:
        LineSymbolizer() { }
        LineSymbolizer( const LineSymbolizer& rhs )
            : _stroke( rhs._stroke ) { }

        Stroke& stroke() {
            return _stroke; }
        const Stroke& stroke() const {
            return _stroke; }

        virtual void accept( class StyleVisitor& visitor ) {
            visitor.apply( *this ); }

    protected:
        Stroke _stroke;
    };

    class OSGEARTHFEATURES_EXPORT PolygonSymbolizer : public Symbolizer
    {
    public:
        PolygonSymbolizer() { }
        PolygonSymbolizer( const PolygonSymbolizer& rhs )
            : _fill( rhs._fill ) { }

        Fill& fill() {
            return _fill; }
        const Fill& fill() const {
            return _fill; }

        virtual void accept( class StyleVisitor& visitor ) {
            visitor.apply( *this ); }

    protected:
        Fill _fill;
    };

    class OSGEARTHFEATURES_EXPORT Style : public StyleComponent
    {
    public:
        Style() { }
        Style( const Style& rhs )
            : _name( rhs._name ),
              _query( rhs._query ),
              _lineSymbolizer( rhs._lineSymbolizer ),
              _polygonSymbolizer( rhs._polygonSymbolizer ) { }

        std::string& name() {
            return _name; }
        const std::string& name() const {
            return _name; }

        Query& query() {
            return _query; }
        const Query& query() const {
            return _query; }

        LineSymbolizer& lineSymbolizer() {
            return _lineSymbolizer; }
        const LineSymbolizer& lineSymbolizer() const {
            return _lineSymbolizer; }

        PolygonSymbolizer& polygonSymbolizer() {
            return _polygonSymbolizer; }
        const PolygonSymbolizer& polygonSymbolizer() const {
            return _polygonSymbolizer; }

        virtual void accept( class StyleVisitor& visitor ) {
            visitor.apply( *this ); }
        
        osg::Vec4ub getColor( const Geometry::Type& geomType ) const;

    protected:
        std::string _name;
        Query _query;
        LineSymbolizer _lineSymbolizer;
        PolygonSymbolizer _polygonSymbolizer;
    };

    typedef std::list< Style > StyleList;

    class OSGEARTHFEATURES_EXPORT StyledLayer : public StyleComponent
    {
    public:
        StyledLayer() { }
        StyledLayer( const StyledLayer& rhs )
            : _name( rhs._name ),
            _styles( rhs._styles ) { }

        std::string& name() {
            return _name; }
        const std::string& name() const {
            return _name; }
        
        StyleList& styles() {
            return _styles; }
        const StyleList& styles() const {
            return _styles; }

        bool empty() const {
            return _name.empty() || _styles.empty(); }

        virtual void accept( class StyleVisitor& visitor ) {
            visitor.apply( *this ); }

    protected:
        std::string _name;
        StyleList _styles;
    };

    typedef std::list< StyledLayer > StyledLayers;

    class OSGEARTHFEATURES_EXPORT StyleCatalog : public StyleComponent
    {
    public:
        StyleCatalog() { }
        StyleCatalog( const StyleCatalog& rhs )
            : _namedLayers( rhs._namedLayers ) { }

        StyledLayers& namedLayers() { 
            return _namedLayers; }
        const StyledLayers& namedLayers() const { 
            return _namedLayers; }

        bool getNamedLayer( const std::string& name, StyledLayer& out_layer ) const {
            for( StyledLayers::const_iterator i = _namedLayers.begin(); i != _namedLayers.end(); i++ ) {
                if ( i->name() == name ) {
                    out_layer = *i;
                    return true;
                }
            }
            return false;
        }

        virtual void accept( class StyleVisitor& visitor ) {
            visitor.apply( *this ); }

    protected:
        StyledLayers _namedLayers;
    };


    class OSGEARTHFEATURES_EXPORT StyleReader
    {
    public:
        static bool readLayerStyles( const std::string& layerName, const Config& conf, StyleCatalog& out_catalog );
        static bool readStyle( const Config& conf, Style& out_style, bool matchesOnly =true );
        static bool readStyleFromCSS( const Config& conf, Style& out_style, bool matchesOnly =true);
        static bool readStyleFromSLD( const ConfigSet& confSet, Style& out_style, bool matchesOnly =true);
        static bool readStyleList( const Config& conf, StyleList& out_classes );
        static bool readStyleListFromCSS( const Config& conf, StyleList& out_classes, bool createIfNecessary =false);
        static bool readStyleListFromSLD( const ConfigSet& confSet, StyleList& out_classes, bool createIfNecessary =false);
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_STYLING_H
