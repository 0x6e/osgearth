/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHFEATURES_STYLING_H
#define OSGEARTHFEATURES_STYLING_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Query>
#include <osgEarthFeatures/Geometry>
#include <osgEarth/Config>
#include <osg/Vec4>
#include <osg/Notify>
#include <list>

namespace osgEarth { namespace Features
{
    class OSGEARTHFEATURES_EXPORT StyleComponent
    {
    };

    class OSGEARTHFEATURES_EXPORT Stroke : public StyleComponent
    {
    public:
        enum LineCapStyle {
            LINECAP_DEFAULT,
            LINECAP_BUTT,
            LINECAP_SQUARE,
            LINECAP_ROUND
        };

        enum LineJoinStyle {
            LINEJOIN_DEFAULT
        };

    public:
        Stroke();

        osg::Vec4f& color() { return _color; }
        const osg::Vec4f& color() const { return _color; }

        optional<LineCapStyle>& lineCap() { return _lineCap; }
        const optional<LineCapStyle>& lineCap() const { return _lineCap; }

        optional<LineJoinStyle>& lineJoin() { return _lineJoin; }
        const optional<LineJoinStyle>& lineJoin() const { return _lineJoin; }

        optional<float>& width() { return _width; }        
        const optional<float>& width() const { return _width; }

    protected:
        osg::Vec4f              _color;
        optional<LineCapStyle>  _lineCap;
        optional<LineJoinStyle> _lineJoin;
        optional<float>         _width;
    };

    class OSGEARTHFEATURES_EXPORT Fill : public StyleComponent
    {
    public:
        Fill();

        osg::Vec4f& color() { return _color; }
        const osg::Vec4f& color() const { return _color; }

    protected:
        osg::Vec4f _color;
    };

    class OSGEARTHFEATURES_EXPORT Symbolizer : public StyleComponent
    {
    protected:
        Symbolizer();
    };

    class OSGEARTHFEATURES_EXPORT LineSymbolizer : public Symbolizer
    {
    public:
        LineSymbolizer();

        optional<Stroke>& stroke() { return _stroke; }
        const optional<Stroke>& stroke() const { return _stroke; }

    protected:
        optional<Stroke> _stroke;
    };

    class OSGEARTHFEATURES_EXPORT PolygonSymbolizer : public Symbolizer
    {
    public:
        PolygonSymbolizer();

        optional<Fill>& fill() { return _fill; }
        const optional<Fill>& fill() const { return _fill; }

    protected:
        optional<Fill> _fill;
    };

    class OSGEARTHFEATURES_EXPORT TextSymbolizer : public Symbolizer
    {
    public:
        TextSymbolizer();

        optional<Fill>& fill() { return _fill; }
        const optional<Fill>& fill() const { return _fill; }

        optional<Stroke>& halo() { return _halo; }
        const optional<Stroke>& halo() const { return _halo; }

        optional<std::string>& font() { return _font; }
        const optional<std::string> font() const { return _font; }

        optional<float>& size() { return _size; }
        const optional<float>& size() const { return _size; }

    protected:
        optional<Fill>        _fill;
        optional<Stroke>      _halo;
        optional<std::string> _font;
        optional<float>       _size;
    };

    /**
     * A Style defines the appearance of geometry or text.
     */
    class OSGEARTHFEATURES_EXPORT Style : public StyleComponent
    {
    public:
        Style( const Config& conf =Config() );

        /** Name of this style. */
        std::string& name() { return _name; }
        const std::string& name() const { return _name; }

        /** URL from which to read style data. This is mutually exlusive of storing
            style information from within the object. */
        optional<std::string>& url() { return _url; }
        const optional<std::string>& url() const { return _url; }

        ///** Expression/spatial filter used to select items to which the style will apply */
        //optional<Query>& query() { return _query; }
        //const optional<Query>& query() const { return _query; }

        /** Style information for line elements. */
        optional<LineSymbolizer>& lineSymbolizer() { return _lineSymbolizer; }
        const optional<LineSymbolizer>& lineSymbolizer() const { return _lineSymbolizer; }

        /** Style information for polygon elements. */
        optional<PolygonSymbolizer>& polygonSymbolizer() { return _polygonSymbolizer; }
        const optional<PolygonSymbolizer>& polygonSymbolizer() const { return _polygonSymbolizer; }

        /** Style information for text elements. */
        optional<TextSymbolizer>& textSymbolizer() { return _textSymbolizer; }
        const optional<TextSymbolizer>& textSymbolizer() const { return _textSymbolizer; }
        
        /** Convenience method to easily grab wither the line- or poly- color based
            on the geometry type. */
        osg::Vec4f getColor( const Geometry::Type& geomType ) const;

    public:
        virtual Config toConfig() const;

    protected:
        void fromConfig( const Config& conf );
        void fromCSS( const std::string& css );

    protected:
        std::string                 _name;
        optional<std::string>       _url;
        optional<LineSymbolizer>    _lineSymbolizer;
        optional<PolygonSymbolizer> _polygonSymbolizer;
        optional<TextSymbolizer>    _textSymbolizer;

    private:
        std::string _origType;
        std::string _origData;
    };

    typedef std::list< Style > StyleList;
    typedef std::map< std::string, Style > StyleMap;


    /**
     * A style selector lets you classify styles based on rules, such as a
     * feature query. By default the selector selects the style with the
     * same name as the selector, but you can override this by settings
     * the styleName property.
     */
    class OSGEARTHFEATURES_EXPORT StyleSelector : public StyleComponent
    {
    public:
        StyleSelector( const Config& conf =Config() );

    public: // properties

        /** Name of this style class. */
        std::string& name() { return _name; }
        const std::string& name() const { return _name; }

        /** Name of the style to select */
        optional<std::string>& styleName() { return _styleName; }
        const optional<std::string>& styleName() const { return _styleName; }

        /** Expression/spatial filter used to select items to which the style will apply */
        optional<Query>& query() { return _query; }
        const optional<Query>& query() const { return _query; }

    public: // methods

        /** Returns the styleName() property, it set; otherwise returns the selector name. */
        std::string getSelectedStyleName() const;

    public: //Configurable

        virtual void fromConfig( const Config& conf );
        virtual Config toConfig() const;

    protected:
        std::string _name;
        optional<std::string> _styleName;
        optional<Query> _query;
    };

    typedef std::list<StyleSelector> StyleSelectorList;


    //class OSGEARTHFEATURES_EXPORT StyledLayer : public StyleComponent
    //{
    //public:
    //    StyledLayer();

    //    /** Name of this styled layer. */
    //    std::string& name() { return _name; }
    //    const std::string& name() const { return _name; }
    //    
    //    /** Collection of styles in this layer. */
    //    StyleList& styles() { return _styles; }
    //    const StyleList& styles() const { return _styles; }

    //    /** Whether this styled layer definition is "empty" (undefined) */
    //    bool empty() const {
    //        return _name.empty() || _styles.empty(); }

    //protected:
    //    std::string _name;
    //    StyleList _styles;
    //};

    //typedef std::list< StyledLayer > StyledLayers;


    class OSGEARTHFEATURES_EXPORT StyleCatalog : public Configurable
    {
    public:
        StyleCatalog( const Config& conf =Config() );

    public: // properties

        StyleSelectorList& selectors() { return _selectors; }
        const StyleSelectorList& selectors() const { return _selectors; }

        void addStyle( const Style& style );
        void removeStyle( const std::string& name );
        bool getStyle( const std::string& name, Style& out ) const;
        const Style& getDefaultStyle() const;

        //StyledLayers& namedLayers() { return _namedLayers; }
        //const StyledLayers& namedLayers() const { return _namedLayers; }

        //bool getNamedLayer( const std::string& name, StyledLayer& out_layer ) const;

    public:
        virtual Config toConfig() const;
        virtual void fromConfig( const Config& conf );

    protected:
        StyleSelectorList _selectors;
        StyleMap _styles;
        //StyledLayers _namedLayers;

    private:
        Style _emptyStyle;
    };


    //class OSGEARTHFEATURES_EXPORT StyleReader
    //{
    //public:
    //    static bool readLayerStyles( const std::string& layerName, const Config& conf, StyleCatalog& out_catalog );
    //    static bool readStyle( const Config& conf, Style& out_style, bool matchesOnly =true );
    //    static bool readStyleFromCSS( const Config& conf, Style& out_style, bool matchesOnly =true);
    //    static bool readStyleList( const Config& conf, StyleList& out_classes );
    //    static bool readStyleListFromCSS( const Config& conf, StyleList& out_classes, bool createIfNecessary =false);
    //};

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_STYLING_H
