/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHFEATURES_QUERY_H
#define OSGEARTHFEATURES_QUERY_H 1

#include <osgEarthFeatures/Common>
#include <osgEarth/Config>
#include <osgEarth/GeoData>

namespace osgEarthFeatures
{
    /**
     * A query filter that you can use to limit a set of features to process.
     */
    class OSGEARTHFEATURES_EXPORT Query
    {
    public:
        Query();
        Query( const Config& conf );
        Query( const Query& rhs );
        ~Query() { }

        ///** Gets the name of this query. */
        //void setName( const std::string& name ) {
        //    _name = name; }

        ///** Gets the name of this query. */
        //const std::string& getName() const {
        //    return _name; }

        /** Sets the geospatial extent bounding this query. */
        void setExtent( const GeoExtent& extent );

        /** TRUE if this query contains a geospatial extent. */
        bool hasExtent() const
            { return _extent.isSet(); }

        /** Gets the geospatial extent (if hasExtent() == true) */
        const GeoExtent& getExtent() const
            { return _extent.get(); }

        /** Sets a driver-specific query expression. */
        void setExpression( const std::string& expr )
            { _expression = expr; }

        /** Gets the driver-specific query expression. */
        const std::string& getExpression() const
            { return _expression; }       

    protected:
        optional<GeoExtent> _extent;
        std::string _expression;
        //std::string _name;
    };
}

#endif // OSGEARTHFEATURES_QUERY_H
