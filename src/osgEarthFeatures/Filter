/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHFEATURES_FEATURE_FILTER_H
#define OSGEARTHFEATURES_FEATURE_FILTER_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/FeatureSource>
#include <osgEarth/GeoData>
#include <osg/Matrix>
#include <list>

using namespace osgEarth;

namespace osgEarth { namespace Features
{
    /**
     * Context within which a chain of filters is executed.
     */
    class OSGEARTHFEATURES_EXPORT FilterContext
    {
    public:
        FilterContext();

        FilterContext( const FilterContext& rhs );

        /** spatial envelope that filters should honor when operating under this context */
        optional<GeoExtent>& extent() {
            return _extent; }

        const FeatureProfile* profile() const {
            return _profile.get();
        }
        osg::ref_ptr<const FeatureProfile>& profile() {
            return _profile;
        }

        bool isGeocentric() const {
            return _isGeocentric;
        }
        bool& isGeocentric() {
            return _isGeocentric; 
        }        

        const osg::Matrixd& referenceFrame() const {
            return _referenceFrame;
        }
        const osg::Matrix& inverseReferenceFrame() const {
            return _inverseReferenceFrame;
        }
        void setReferenceFrame( const osg::Matrixd& in ) {
            _referenceFrame = in;
            _inverseReferenceFrame = osg::Matrixd::inverse( _referenceFrame );
        }      

    protected:
        bool _isGeocentric;
        optional<GeoExtent> _extent;
        osg::ref_ptr<const FeatureProfile> _profile;
        osg::Matrixd _referenceFrame;
        osg::Matrixd _inverseReferenceFrame;
    };

    class /*OSGEARTHFEATURES_EXPORT*/ FeatureFilter 
    {
    public:
        virtual FilterContext push( FeatureList& input, const FilterContext& context ) =0;
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_FEATURE_FILTER_H

