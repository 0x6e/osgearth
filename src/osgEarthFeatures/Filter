/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHFEATURES_FEATURE_FILTER_H
#define OSGEARTHFEATURES_FEATURE_FILTER_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Feature>
#include <osgEarth/GeoData>
#include <list>

using namespace osgEarth;

namespace osgEarthFeatures
{
    /**
     * Context within which a chain of filters is executed.
     */
    class OSGEARTHFEATURES_EXPORT FilterContext
    {
    public:
        FilterContext();
        FilterContext( const FilterContext& rhs );

    public:
        GeoExtent _extent;
        osg::ref_ptr<const FeatureProfile> _profile;
    };

    /**
     * Base class for filters that perform some kind of processing on an
     * input feature.
     */
    class OSGEARTHFEATURES_EXPORT Filter : public osg::Referenced
    {
    public:
        virtual osg::Referenced* process( osg::Referenced* input, FilterContext& context ) =0;
    };

    /**
     * A chain of Filter objects through which to pass Feature instances.
     */
    class OSGEARTHFEATURES_EXPORT FilterChain : public std::list< osg::ref_ptr<Filter> >
    {
    public:
        FilterChain( const FilterContext& context );

        /** copy ctor */
        FilterChain( const FilterChain& rhs );

        osg::Referenced* process( Feature* input );

    protected:
        FilterContext _prototypeContext;
    };

    ///**
    // * A chain of Filter objects through which to pass Feature instances.
    // */
    //class OSGEARTHFEATURES_EXPORT FilterChain : public osg::Refernece, public osg::MixinVector< // public std::list< osg::ref_ptr<Filter> >
    //{
    //public:
    //    FilterChain( const FilterContext& context );

    //    /** copy ctor */
    //    FilterChain( const FilterChain& rhs );

    //    osg::Referenced* process( Feature* input );

    //protected:
    //    FilterContext _prototypeContext;
    //};

    ///** Cursor that pulls its features by executing a filter chain against another cursor. */
    //class OSGEARTHFEATURES_EXPORT FilterChainCursor : public FeatureCursor
    //{
    //public:
    //    FeatureCursor( const FilterChain& chain );

    //public: // FeatureCursor
    //    virtual bool hasMore() const;
    //    virtual Feature* nextFeature();

    //protected:
    //    FilterChain _chain;
    //};
}

#endif // OSGEARTHFEATURES_FEATURE_FILTER_H

