/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHSIM_SIMULATION_H
#define OSGEARTHSIM_SIMULATION_H 1

#include <osgEarthSim/Common>

#include <osgEarth/MapNode>
#include <osgEarthSim/DISListener>
#include <osgEarthSim/IconFactory>

#include <osgEarthAnnotation/TrackNode>


namespace osgEarth { namespace Sim {

    using namespace osgEarth::Annotation;


    class OSGEARTHSIM_EXPORT EntityRecord : public osg::Referenced
    {
    public:
        EntityRecord(TrackNode* trackNode, Entity_State_PDU* state);  

        ~EntityRecord();

        double getTime() const;

        void updateSimulation( );          

        void setEntityState(Entity_State_PDU* state);          

    private:
        double _time;
        osg::ref_ptr< TrackNode > _trackNode;
        Entity_State_PDU* _state;
    };

    typedef std::map< int, osg::ref_ptr< TrackNode > > TrackNodeMap;

    typedef std::map< int, osg::ref_ptr< EntityRecord >> EntityRecords;


    /***************************************************************************/

    class OSGEARTHSIM_EXPORT Simulation : public DISListener, public osg::Referenced
    {
    public:
        Simulation(MapNode* mapNode, osg::Group* entityGroup, IconFactory* iconFactory=0);

        virtual ~Simulation();

        virtual void onEntityStateChanged( Entity_State_PDU* entityState );          

        void updateSim();

    protected:

        void createFieldSchema( TrackNodeFieldSchema& schema );

        EntityRecords _entities;
        osg::ref_ptr< osg::Group > _entityGroup;
        osg::ref_ptr< MapNode > _mapNode;    
        OpenThreads::Mutex _mutex; 
        osg::ref_ptr< IconFactory > _iconFactory;
    };

}}

#endif //OSGEARTHSIM_SIMULATION_H