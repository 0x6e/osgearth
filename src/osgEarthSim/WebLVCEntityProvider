/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHSIM_WEBLVCENTITYPROVIDER_H
#define OSGEARTHSIM_WEBLVCENTITYPROVIDER_H 1

#include <osgEarthSim/Common>

#include <osgEarthSim/EntityProvider>
#include <OpenThreads/Thread>

#include "KDIS/PDU/Entity_Info_Interaction/Entity_State_PDU.h"

struct libwebsocket_context;
struct libwebsocket;


namespace osgEarth { namespace Sim {

    using namespace KDIS;
    using namespace DATA_TYPE;
    using namespace PDU;
    using namespace ENUMS;
    using namespace UTILS;   


    struct WebLVCAttributeUpdateMessage
    {
        WebLVCAttributeUpdateMessage();

        bool parse(const std::string &message);       

        Entity_State_PDU* createEntityState();        

        std::string objectName;
        std::string objectType;
        int entityIdentifier[3];
        int entityType[7];
        double worldLocation[3];
        double velocityVector[3];
        double orientation[3];
        double angularVelocity[3];
        double accelerationVector[3];
        std::string marking;
        int damageState;
        bool engineSmokeOn;
        bool isConcealed;
        int forceId;
        int deadReckoningAlgorithm;
    };


    class OSGEARTHSIM_EXPORT WebLVCEntityProvider : public EntityProvider, public OpenThreads::Thread
    {
    public:
        WebLVCEntityProvider(const std::string& host, int port, const std::string& path);      

        ~WebLVCEntityProvider();    

        const std::string& getHost() const { return _host;}    
        int getPort() const { return _port;}
        const std::string& getPath() const { return _path;}

        virtual void startImplementation();
        virtual void stopImplementation();


        virtual void run();      
        virtual int cancel();

        //Do not call directly, only public due to callback nature of libwebsockets
        void sendEntityState(Entity_State_PDU* entityState);

    private:

        bool initialize();        

        std::string _host;
        int _port;
        std::string _path;
        struct libwebsocket_context *_context;
        struct libwebsocket *_client; 
        volatile bool _done;
    };

}}

#endif //OSGEARTHSIM_WEBLVCENTITYPROVIDER_H