/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#include <osgEarthQt/Common>
#include <osgEarthQt/MultiViewerWidget>
#include <osgEarthQt/DataManager>
#include <osgEarthQt/LayerManagerWidget>
#include <osgEarthQt/MapCatalogWidget>
#include <osgEarthQt/TerrainProfileWidget>
#include <osgEarthQt/ViewerWidget>

#include <osgEarth/Common>
#include <osgEarthDrivers/gdal/GDALOptions>
#include <osgEarth/GeoData>
#include <osgEarth/Map>

#include <osgDB/FileNameUtils>

#include <QAction>
#include <QDockWidget>
#include <QtGui>
#include <QMainWindow>
#include <QToolBar>

#include "SceneController.h"
#include "TMSExporter.h"
#include "ExportDialog"
#include "WaitDialog"

namespace PackageQt
{

class PackageQtMainWindow : public QMainWindow
{
    Q_OBJECT

public:

  PackageQtMainWindow(osgEarth::QtGui::ViewerWidget* viewerWidget, PackageQt::SceneController* controller, PackageQt::TMSExporter* exporter)
        : _viewerWidget(viewerWidget), _controller(controller), _exporter(exporter), _compositeViewerWidget(0L)
    {
        _manager = new osgEarth::QtGui::DataManager(_controller->mapNode());

        initUi();

        if (_viewerWidget)
        {
          setCentralWidget(_viewerWidget);

          _views.clear();
          _viewerWidget->getViews( _views );
        }

        reloadDisplay();
    }


    private slots:

    void openEarthFile()
    {
      QString filePath = QFileDialog::getOpenFileName(this, tr("Open an earth file"), "", tr("Earth files (*.earth)"));
      if (!filePath.isNull())
      {
        PackageQt::WaitDialog msg(tr("Loading .earth file. Please wait."));
        msg.show();
        msg.repaint();

        _controller->loadEarthFile(filePath.toStdString());
        _manager = new osgEarth::QtGui::DataManager(_controller->mapNode());
        reloadDisplay();

        msg.hide();
      }
    }

    void addImageLayer()
    {
      QString filePath = QFileDialog::getOpenFileName(this, tr("Add an image layer"), "", tr("Images (*.tif *.ecw);;All files (*.*)"));
      if (!filePath.isNull())
      {
        osgEarth::Drivers::GDALOptions layerOpt;
        layerOpt.url() = osgEarth::URI(filePath.toStdString());
        
        std::string fileName = osgDB::getSimpleFileName(filePath.toStdString());
        osg::ref_ptr<osgEarth::ImageLayer> newLayer = new osgEarth::ImageLayer(osgEarth::ImageLayerOptions(fileName, layerOpt));

        _manager->map()->addImageLayer(newLayer.get());
      }
    }

    void addElevationLayer()
    {
      QString filePath = QFileDialog::getOpenFileName(this, tr("Add an elevation layer"), "", tr("Elevation files (*.tif);;All files (*.*)"));
      if (!filePath.isNull())
      {
        osgEarth::Drivers::GDALOptions layerOpt;
        layerOpt.url() = osgEarth::URI(filePath.toStdString());
        
        std::string fileName = osgDB::getSimpleFileName(filePath.toStdString());
        osg::ref_ptr<osgEarth::ElevationLayer> newLayer = new osgEarth::ElevationLayer(osgEarth::ElevationLayerOptions  (fileName, layerOpt));

        _manager->map()->addElevationLayer(newLayer.get());
      }
    }

    void exportRepo()
    {
        if (_exporter)
        {
          PackageQt::ExportDialog exportDialog;
	        if (exportDialog.exec() == QDialog::Accepted)
	        {
            PackageQt::WaitDialog msg(tr("Exporting. Please wait."));
            msg.show();
            msg.repaint();

            _exporter->setKeepEmpties(exportDialog.keepEmpties());
            _exporter->setMaxLevel(exportDialog.getMaxLevel());

            _exporter->exportTMS(
              _controller->mapNode(),
              exportDialog.getExportPath(),
              std::vector<osgEarth::Bounds>(),
              (exportDialog.exportEarthFile() ? exportDialog.getEarthFilePath() : ""),
              exportDialog.overwriteExisting(),
              (exportDialog.overrideExtension() ? exportDialog.getExtension() : ""));

            msg.hide();
          }
        }
    }

protected:

    void closeEvent(QCloseEvent *event)
    {
        if (_viewerWidget)
        {
            //_viewerWidget->getViewer()->setSceneData(0);
            //_viewerWidget->getViewer()->frame();
            _viewerWidget->getViewer()->setDone(true);
        }

        if (_compositeViewerWidget)
        {
            _compositeViewerWidget/*->getViewer()*/->setDone(true);
        }

        event->accept();
    }

private:

    void initUi()
    {
        setWindowTitle(tr("osgEarth Package Qt"));
        setWindowIcon(QIcon(":/images/export.png"));

        createActions();
        createToolbars();
        createDockWidgets();
    }

    void reloadDisplay()
    {
      if (_controller)
      {
        // create catalog widget
        //osgEarth::QtGui::MapCatalogWidget* layerCatalog = new osgEarth::QtGui::MapCatalogWidget(_manager, osgEarth::QtGui::MapCatalogWidget::ALL_LAYERS);
        //layerCatalog->setActiveViews(_views);
        //layerCatalog->setHideEmptyGroups(true);
        //_catalogDock->setWidget(layerCatalog);

        // create a second catalog widget for viewpoints
        osgEarth::QtGui::MapCatalogWidget* vpCatalog = new osgEarth::QtGui::MapCatalogWidget(_manager, osgEarth::QtGui::MapCatalogWidget::VIEWPOINTS);
        vpCatalog->setActiveViews(_views);
        _vpDock->setWidget(vpCatalog);

        // create layer manager widget and add as a docked widget on the right
        osgEarth::QtGui::LayerManagerWidget* elevLayerManager = new osgEarth::QtGui::LayerManagerWidget(_manager, osgEarth::QtGui::LayerManagerWidget::ELEVATION_LAYERS);
        elevLayerManager->setActiveViews(_views);
        _elevLayersDock->setWidget(elevLayerManager);

        // create layer manager widget and add as a docked widget on the right
        osgEarth::QtGui::LayerManagerWidget* imgLayerManager = new osgEarth::QtGui::LayerManagerWidget(_manager, osgEarth::QtGui::LayerManagerWidget::IMAGE_LAYERS);
        imgLayerManager->setActiveViews(_views);
        _imgLayersDock->setWidget(imgLayerManager);
      }
    }

	  void createActions()
    {
        _openEarthFileAction = new QAction(QIcon(":/images/earth.png"), tr("&Open .earth file"), this);
        _openEarthFileAction->setToolTip(tr("Open .earth file"));
        connect(_openEarthFileAction, SIGNAL(triggered()), this, SLOT(openEarthFile()));
        _openEarthFileAction->setDisabled(!_manager.valid());

        _addImageLayerAction = new QAction(QIcon(":/images/add_image.png"), tr("&Add Imagery"), this);
        _addImageLayerAction->setToolTip(tr("Add imagery"));
        connect(_addImageLayerAction, SIGNAL(triggered()), this, SLOT(addImageLayer()));
        _addImageLayerAction->setDisabled(!_manager.valid());

        _addElevationLayerAction = new QAction(QIcon(":/images/add_elevation.png"), tr("&Add Elevation"), this);
        _addElevationLayerAction->setToolTip(tr("Add elevation"));
        connect(_addElevationLayerAction, SIGNAL(triggered()), this, SLOT(addElevationLayer()));
        _addElevationLayerAction->setDisabled(!_manager.valid());

        _exportAction = new QAction(QIcon(":/images/export.png"), tr(""), this);
        _exportAction->setToolTip(tr("Export"));
        connect(_exportAction, SIGNAL(triggered()), this, SLOT(exportRepo()));
    }

	  void createToolbars()
    {
        _fileToolbar = addToolBar(tr("File Toolbar"));
        _fileToolbar->setObjectName(tr("FILE_TOOLBAR"));
        _fileToolbar->setIconSize(QSize(24, 24));
        _fileToolbar->addAction(_openEarthFileAction);
        _fileToolbar->addSeparator();
        _fileToolbar->addAction(_addImageLayerAction);
        _fileToolbar->addAction(_addElevationLayerAction);
        _fileToolbar->addSeparator();
        _fileToolbar->addAction(_exportAction);
    }

    void createDockWidgets()
    {
      //_catalogDock = new QDockWidget(QWidget::tr("Layers"));
      //_catalogDock->setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
      //addDockWidget(Qt::LeftDockWidgetArea, _catalogDock);

      _elevLayersDock = new QDockWidget(QWidget::tr("Elevation Layers"));
      _elevLayersDock->setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
      addDockWidget(Qt::LeftDockWidgetArea, _elevLayersDock);

      _imgLayersDock = new QDockWidget(QWidget::tr("Image Layers"));
      _imgLayersDock->setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
      addDockWidget(Qt::LeftDockWidgetArea, _imgLayersDock);

      _vpDock = new QDockWidget;
      _vpDock->setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
      addDockWidget(Qt::LeftDockWidgetArea, _vpDock);
    }
	
    PackageQt::SceneController* _controller;
    PackageQt::TMSExporter* _exporter;

    osg::ref_ptr<osgEarth::QtGui::DataManager> _manager;
    osgEarth::QtGui::ViewerWidget* _viewerWidget;
    osgEarth::QtGui::MultiViewerWidget* _compositeViewerWidget;
    osgEarth::QtGui::ViewVector _views;

    QAction *_openEarthFileAction;
    QAction *_addImageLayerAction;
    QAction *_addElevationLayerAction;
    QAction *_exportAction;
    QToolBar *_fileToolbar;
    
    QDockWidget *_catalogDock;
    QDockWidget *_vpDock;
    QDockWidget *_elevLayersDock;
    QDockWidget *_imgLayersDock;
};

}