/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#include <osgEarthQt/CompositeViewerWidget>
#include <osgEarthQt/DataManager>
#include <osgEarthQt/MapCatalogWidget>
#include <osgEarthQt/ViewerWidget>

#include <osgEarthAnnotation/AnnotationNode>
#include <osgEarthAnnotation/PlaceNode>
#include <osgEarthDrivers/gdal/GDALOptions>

#include <QAction>
#include <QDockWidget>
#include <QtGui>
#include <QMainWindow>
#include <QToolBar>


class DemoMainWindow : public QMainWindow
{
	Q_OBJECT
	
	public:

    DemoMainWindow(osgEarth::QtGui::DataManager* manager, osgEarth::MapNode* mapNode, osg::Group* annotationRoot)
      : _manager(manager), _mapNode(mapNode), _annoRoot(annotationRoot) { initUi(); }

    void setViewerWidget(osgEarth::QtGui::ViewerWidget* viewer)
    {
      setCentralWidget(viewer);
      _viewer = viewer;
    }

    void setViewerWidget(osgEarth::QtGui::CompositeViewerWidget* viewer)
    {
      setCentralWidget(viewer);
      _compositeViewer = viewer;
    }

  private slots:

		void addLayer()
    {
      osgEarth::Drivers::GDALOptions layerOpt;
      layerOpt.url() = osgEarth::URI("../data/nyc-inset-wgs84.tif");
      _manager->map()->addImageLayer( new osgEarth::ImageLayer( osgEarth::ImageLayerOptions("ny_inset", layerOpt) ) );

      _addLayerAction->setDisabled(true);
    }

		void addAnnotation()
    {
      osgEarth::Annotation::PlaceNode* annotation = new osgEarth::Annotation::PlaceNode(
        _mapNode.get(), 
        osg::Vec3d(-74, 40.714, 0), 
        osgDB::readImageFile("../data/placemark32.png"),
        "New York");

      osgEarth::Annotation::AnnotationData* annoData = new osgEarth::Annotation::AnnotationData();
      annoData->setName("New York");
      annoData->setViewpoint(osgEarth::Viewpoint(osg::Vec3d(-74, 40.714, 0), 0.0, -90.0, 1e5));
      annotation->setAnnotationData(annoData);

      _manager->addAnnotation(annotation, _annoRoot.get());

      _addAnnotationAction->setDisabled(true);
    }

    void addCatalog()
    {
      // create catalog widget and add as a docked widget to the main window
      QDockWidget *catalogDock = new QDockWidget(QWidget::tr("Full Catalog"));
      catalogDock->setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
      osgEarth::QtGui::MapCatalogWidget* layerCatalog = new osgEarth::QtGui::MapCatalogWidget(_manager.get(), osgEarth::QtGui::MapCatalogWidget::ALL);
	    catalogDock->setWidget(layerCatalog);
      addDockWidget(Qt::RightDockWidgetArea, catalogDock);

      _addCatalogAction->setDisabled(true);
    }
		
	protected:

     void closeEvent(QCloseEvent *event)
     {
       if (_viewer.valid())
       {
         _viewer->setSceneData(0);
         _viewer->frame();
         _viewer->setDone(true);
       }

       if (_compositeViewer.valid())
       {
         _compositeViewer->setDone(true);
       }

       event->accept();
     }
		
	private:

		void initUi()
    {
    	setWindowTitle(tr("osgEarth Qt"));
      //setWindowIcon(QIcon(":/resources/images/pmicon32.png"));

      createActions();
      createToolbars();
    }

		void createActions()
    {
      _addLayerAction = new QAction(tr("&Add Layer"), this);
	    _addLayerAction->setStatusTip(tr("Add an image layer"));
	    connect(_addLayerAction, SIGNAL(triggered()), this, SLOT(addLayer()));
      _addLayerAction->setDisabled(!_manager.valid());
    	
	    _addAnnotationAction = new QAction(/*QIcon(":/resources/images/open.png"),*/ tr("&Add Annotation"), this);
      _addAnnotationAction->setStatusTip(tr("Add an annotation"));
      connect(_addAnnotationAction, SIGNAL(triggered()), this, SLOT(addAnnotation()));
      _addAnnotationAction->setDisabled(!_manager.valid() || !_annoRoot.valid());

      _addCatalogAction = new QAction(tr("&Add Catalog"), this);
	    _addCatalogAction->setStatusTip(tr("Add a full catalog widget"));
	    connect(_addCatalogAction, SIGNAL(triggered()), this, SLOT(addCatalog()));
      _addCatalogAction->setDisabled(!_manager.valid());
    }

		void createToolbars()
    {
      _fileToolbar = addToolBar(tr("File Toolbar"));
      _fileToolbar->setObjectName(tr("FILE_TOOLBAR"));
	    _fileToolbar->setIconSize(QSize(24, 24));
	    _fileToolbar->addAction(_addLayerAction);
	    _fileToolbar->addAction(_addAnnotationAction);
      _fileToolbar->addAction(_addCatalogAction);
    }
	
    osg::ref_ptr<osgEarth::QtGui::DataManager> _manager;
    osg::ref_ptr<osgEarth::MapNode> _mapNode;
    osg::ref_ptr<osg::Group> _annoRoot;
    osg::ref_ptr<osgEarth::QtGui::ViewerWidget> _viewer;
    osg::ref_ptr<osgEarth::QtGui::CompositeViewerWidget> _compositeViewer;
		QAction *_addLayerAction;
		QAction *_addAnnotationAction;
    QAction *_addCatalogAction;
		QToolBar *_fileToolbar;
};