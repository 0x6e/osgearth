/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVERS_REX_RENDER_BINDINGS_H
#define OSGEARTH_DRIVERS_REX_RENDER_BINDINGS_H 1

#include "Common"

namespace osgEarth { namespace Drivers { namespace RexTerrainEngine
{
    class SamplerBinding
    {
    public:
        enum Usage
        {
            COLOR,
            ELEVATION,
            NORMAL,
            MATERIAL
        };

    public:
        SamplerBinding() : _unit(-1) { }

        /** Optional UID of the source (usually a layer) to which this binding applies */
        optional<UID>& sourceUID()             { return _sourceUID; }
        const optional<UID>& sourceUID() const { return _sourceUID; }

        /** Optional usage hint */
        optional<Usage>& usage()             { return _usage; }
        const optional<Usage>& usage() const { return _usage; }

        /** Texture image unit of the sampler */
        int& unit() { return _unit; }
        const int& unit() const { return _unit; }

        /** Uniform name of the sampler */
        std::string& samplerName() { return _samplerName; }
        const std::string& samplerName() const { return _samplerName; }

        /** Uniform name of the sampler matrix */
        std::string& matrixName() { return _matrixName; }
        const std::string& matrixName() const { return _matrixName; }

    public:
        bool isActive() const { return _unit >= 0; }

    private:
        optional<UID>   _sourceUID;
        optional<Usage> _usage;
        int             _unit;
        std::string     _samplerName;
        std::string     _matrixName;
    };

    typedef std::vector<SamplerBinding> RenderBindings;

#if 0
    class RenderBindings
    {
    public:
        SamplerBinding& color() { return _colorBinding; }
        const SamplerBinding& color() const { return _colorBinding; }

        SamplerBinding& parentColor() { return _parentColorBinding; }
        const SamplerBinding& parentColor() const { return _parentColorBinding; }

        SamplerBinding& elevation() { return _elevationBinding; }
        const SamplerBinding& elevation() const { return _elevationBinding; }

        SamplerBinding& parentElevation() { return _parentElevationBinding; }
        const SamplerBinding& parentElevation() const { return _parentElevationBinding; }

        SamplerBinding& normal() { return _normalBinding; }
        const SamplerBinding& normal() const { return _normalBinding; }

        SamplerBinding& parentNormal() { return _parentNormalBinding; }
        const SamplerBinding& parentNormal() const { return _parentNormalBinding; }

    private:
        SamplerBinding _colorBinding;
        SamplerBinding _parentColorBinding;
        SamplerBinding _elevationBinding;
        SamplerBinding _parentElevationBinding;
        SamplerBinding _normalBinding;
        SamplerBinding _parentNormalBinding;
    };
#endif

} } } // namespace osgEarth::Drivers::RexTerrainEngine

#endif // OSGEARTH_DRIVERS_REX_RENDER_BINDINGS_H