/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGEARTH_ENGINE_OSGTERRAIN_TILE_FACTORY_H
#define OSGEARTH_ENGINE_OSGTERRAIN_TILE_FACTORY_H 1

#include "OSGTerrainOptions"
#include <osgEarth/TileSource>
#include <osgEarth/Compositing>
#include <osgEarth/MapLayer>
#include <osgEarth/Locators>

#include <osgDB/ReaderWriter>
#include <osgTerrain/Terrain>
#include <osg/CoordinateSystemNode>
#include <osg/ClusterCullingCallback>
#include <vector>

using namespace osgEarth;
using namespace osgEarth::Drivers;

class osgEarth::Map;
class CustomTerrain;
class CustomTile;

/**
* TileFactory is the main workhorse - it generates osg Nodes for TileKeys.
*/
class OSGTileFactory : public osg::Referenced
{
public:
    OSGTileFactory(
        unsigned int engineId,
        const OSGTerrainOptions& props =OSGTerrainOptions() );

public:
    /**
    * Creates a node graph containing four tiles that correspond to the four
    * subkeys of the provided TileKey.
    */
    osg::Node* createSubTiles(
        Map* map,
        CustomTerrain* terrain,
        const TileKey& key,
        bool populateLayers );

    /**
    * Creates a single terrain tile corresponding to the provided TileKey.
    */
    osg::Node* createTile(
        Map* map,
        CustomTerrain* terrain,
        const TileKey& key,
        bool populateLayers,
        bool wrapInPagedLOD,
        bool fallback,
        bool &validData);


    osgTerrain::ImageLayer* createImageLayer(
        Map* map,
        MapLayer* layer,
        const TileKey& key,
        ProgressCallback* progress);

    osgTerrain::HeightFieldLayer* createHeightFieldLayer(
        Map* map,
        const TileKey& key,
        bool exactOnly );

    /**
    * Gets the properties that customize how this engine renders tile data.
    */
    const OSGTerrainOptions& getTerrainOptions() const;

    /**
    * Returns true if all the data needed to contruct a tile from the specified tile key is
    * in a cache.
    */
    bool isCached( Map* map, const TileKey& key );

    /**
    * Gets a pagedLOD child URI given a tile key.
    */
    std::string createURI( unsigned int id, const TileKey& key );



    GeoImage* createValidGeoImage(MapLayer* layer,
        const TileKey& key,
        ProgressCallback* progress  = 0);

    osg::Matrixd getTransformFromExtents(double minX, double minY, double maxX, double maxY) const;

    // checks whether more data exists below the specified key's level of detail
    bool hasMoreLevels( Map* map, const TileKey& key );

    static osg::HeightField* createEmptyHeightField(
        const TileKey& key,
        int numCols =8,
        int numRows =8 );


    osgTerrain::HeightFieldLayer* createPlaceholderHeightfieldLayer(
        osg::HeightField* ancestorHF,
        const TileKey& ancestorKey,
        const TileKey& key,
        GeoLocator*    locator );

protected:

    //virtual ~MapEngine();


    osg::Node* createPlaceholderTile(
        Map* map,
        CustomTerrain* terrain,
        const TileKey& key );

    osg::Node* createPopulatedTile(
        Map* map, 
        CustomTerrain* terrain,
        const TileKey& key,
        bool wrapInPagedLOD,
        bool fallback,
        bool &validData);

    void addPlaceholderImageLayers(
        CustomTile* tile,
        CustomTile* ancestorTile,
        const MapLayerList& imageMapLayers,
        GeoLocator* defaultLocator,
        const TileKey& key);

    void addPlaceholderHeightfieldLayer(
        CustomTile* tile,
        CustomTile* ancestorTile,
        GeoLocator* defaultLocator,
        const TileKey& key,
        const TileKey& ancestorKey );

    osg::ClusterCullingCallback* createClusterCullingCallback(
        osgTerrain::TerrainTile* tile,
        osg::EllipsoidModel* et );

    //osg::HeightField* subSampleHeightField(
    //    osg::HeightField* source,
    //    const TileKey& sourceKey,
    //    const TileKey& destKey );

    void init();

protected:

    unsigned int _engineId;
    OSGTerrainOptions _terrainOptions;
    L2Cache* _L2cache;
};

#endif // OSGEARTH_ENGINE_OSGTERRAIN_TILE_FACTORY_H
