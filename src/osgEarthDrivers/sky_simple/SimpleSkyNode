/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#include "SimpleSkyOptions"
#include <osgEarthUtil/Sky>
#include <osgEarth/MapNode>
#include <osg/MatrixTransform>

namespace osg {
    class EllipsoidModel;
    class Light;
}

namespace osgEarth { namespace Drivers { namespace SimpleSky
{
    using namespace osgEarth;
    using namespace osgEarth::Util;

    /**
     * Node that roots the silverlining adapter.
     */
    class SimpleSkyNode : public SkyNode
    {
    public:
        SimpleSkyNode(
            const Map* map);

        SimpleSkyNode(
            const Map*              map,
            const SimpleSkyOptions& options);

    public: // SkyNode

        void attach(osg::View* view, int lightNum);

        void onSetEphemeris();
        void onSetDateTime();
        void onSetSunVisible();
        void onSetMoonVisible();
        void onSetStarsVisible();

    public: // osg::Node

        void traverse(osg::NodeVisitor&);

        osg::BoundingSphere computeBound() const;

    protected:
        virtual ~SimpleSkyNode() { }

    private:
        /** Sets the sun's position as a unit vector. */
        void setSunPosition(const osg::Vec3& pos, osg::View* view);

        /** Sets the moon position as a geocentric coordinate */
        void setMoonPosition(const osg::Vec3d& pos, osg::View* view);

        /** Sets the sun's position as a latitude and longitude. */
        void setSunPosition(double lat_degrees, double lon_degrees, osg::View* view);

        struct StarData
        {
            std::string name;
            double right_ascension;
            double declination;
            double magnitude;
            
            StarData() { }
            StarData( std::stringstream &ss );
        };

        struct PerViewData
        {
            osg::Vec3f                         _lightPos;
            osg::ref_ptr<osg::Light>           _light;
            osg::ref_ptr<osg::Uniform>         _lightPosUniform;
            osg::Matrixd                       _sunMatrix;
            osg::Matrixd                       _moonMatrix;
            osg::Matrixd                       _starsMatrix;

            // only available in per-view structures..not default
            osg::ref_ptr<osg::Group>           _cullContainer;
            osg::ref_ptr<osg::MatrixTransform> _sunXform;
            osg::ref_ptr<osg::MatrixTransform> _moonXform;
            osg::ref_ptr<osg::MatrixTransform> _starsXform;

            DateTime _date;
        };

        PerViewData _defaultPerViewData;
        typedef std::map<osg::View*, PerViewData> PerViewDataMap;
        PerViewDataMap _perViewData;

        float _innerRadius, _outerRadius, _sunDistance, _starRadius, _minStarMagnitude;
        osg::ref_ptr<osg::Node> _sun, _stars, _atmosphere, _moon;
        osg::ref_ptr<osg::Uniform> _starAlpha;
        osg::ref_ptr<osg::Uniform> _starPointSize;

        osg::Vec3d _moonPosition;
        bool _autoAmbience;

        osg::ref_ptr<const osg::EllipsoidModel> _ellipsoidModel;

		const SimpleSkyOptions _options;

        void initialize(const Map* map);

        void makeAtmosphere( const osg::EllipsoidModel* );
        void makeSun();
        void makeMoon();

        void makeStars();
        osg::Node* buildStarGeometry(const std::vector<StarData>& stars);
        void getDefaultStars(std::vector<StarData>& out_stars);
        bool parseStarFile(const std::string& starFile, std::vector<StarData>& out_stars);

        void setAmbientBrightness( PerViewData& data, float value );
        void setSunPosition( PerViewData& data, const osg::Vec3& pos );
        void setMoonPosition( PerViewData& data, const osg::Vec3d& pos );
    };

} } } // namespace osgEarth::Drivers::SimpleSky
