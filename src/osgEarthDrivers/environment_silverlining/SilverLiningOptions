/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_SILVERLINING_OPTIONS
#define OSGEARTH_DRIVER_SILVERLINING_OPTIONS 1

#include <osgEarthUtil/Environment>

namespace osgEarth { namespace Drivers { namespace SilverLining
{
    using namespace osgEarth;
    using namespace osgEarth::Util;

    /**
     * Options for creating a SilverLining environment node
     */
    class SilverLiningOptions : public EnvironmentOptions
    {
    public:
        SilverLiningOptions(const ConfigOptions& options =ConfigOptions())
            : EnvironmentOptions(options)
        {
            setDriver( "silverlining" );
            fromConfig( _conf );
        }
        virtual ~SilverLiningOptions() { }

    public: // properties

        /* SilverLining resource path */
        optional<std::string>& resourcePath() { return _resourcePath; }
        const optional<std::string>& resourcePath() const { return _resourcePath; }

    public:
        Config getConfig() const {
            Config conf = EnvironmentOptions::getConfig();
            conf.addIfSet("resource_path", _resourcePath);
            return conf;
        }

    protected:
        void mergeConfig( const Config& conf ) {
            EnvironmentOptions::mergeConfig( conf );
            fromConfig(conf);
        }

    private:
        void fromConfig( const Config& conf ) {
            conf.getIfSet("resource_path", _resourcePath);
        }

        optional<std::string> _resourcePath;
    };

} } } // namespace osgEarth::Drivers::SilverLiningPlugin

#endif // OSGEARTH_DRIVER_SILVERLINING_OPTIONS

