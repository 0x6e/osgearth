/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ENGINE_QUADTREE_TILE_NODE
#define OSGEARTH_ENGINE_QUADTREE_TILE_NODE 1

#include "Common"
#include "TileModel"
#include "TileModelCompiler"
#include <osgEarth/Locators>
#include <osgEarth/Profile>
#include <osgEarth/TerrainOptions>
#include <osgEarth/ThreadingUtils>
#include <osg/Group>
#include <list>
#include <queue>
#include <iterator>

//class TerrainTechnique;

using namespace osgEarth;

//------------------------------------------------------------------------

class TileNode : public osg::Group
{
public:
    TileNode( const TileKey& key, GeoLocator* keyLocator );

    /** Gets the tilekey associated with this tile. */
    const TileKey& getKey() const { return _key; }

    void compile( TileModelCompiler* compiler );

    GeoLocator* getLocator() const { return _locator.get(); }

    // installs a data model on this tile mode so it can build its geometry.
    void setTileModel( TileModel* model );

    TileModel* getTileModel() { return _model.get(); }

    void clear();

public: // OVERRIDES

    virtual void traverse( class osg::NodeVisitor& nv );

    virtual osg::BoundingSphere computeBound() const;

protected:

    virtual ~TileNode();

    bool _hasBeenTraversed;
    bool _quickReleaseGLObjects;
    bool _parentTileSet;
    bool _dirty;

    TileKey                   _key;
    osgTerrain::TileID        _tileId;
    osg::ref_ptr<GeoLocator>  _locator;
    float                     _verticalScale;

    osg::ref_ptr<TileModel> _model;

};

class TileNodeVector : public std::vector< osg::ref_ptr<TileNode> > { };


#endif // OSGEARTH_ENGINE_QUADTREE_TILE_NODE
