/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_SQLITE3_CACHE_DRIVEROPTIONS
#define OSGEARTH_DRIVER_SQLITE3_CACHE_DRIVEROPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>

using namespace osgEarth;

// there is leak using the cache if compressed. It's resolved in
// rev 11609 of osg svn

namespace osgEarth { namespace Drivers
{
    class Sqlite3CacheOptions : public DriverOptions // NO EXPORT; header only
    {
    public:
        /**
         * Pathname of the database file.
         */
        optional<std::string>& path() { return _path; }
        const optional<std::string>& path() const { return _path; }

        optional<bool>& asyncWrites() { return _useAsyncWrites; }
        const optional<bool>& asyncWrites() const { return _useAsyncWrites; }

        optional<bool>& serialized() { return _serialized; }
        const optional<bool>& serialized() const { return _serialized; }

        optional<std::map<std::string, unsigned int> >& layersSize() { return _sizes; }
        const optional<std::map<std::string, unsigned int> >& layersSize() const { return _sizes; }

        unsigned int getSize(const std::string& layer) const 
        {
            std::map<std::string, unsigned int>::const_iterator it = _sizes->find(layer);
            if (it != _sizes->end()) {
                return it->second;
            }
            return 0;
        }

    public:
        Sqlite3CacheOptions( const PluginOptions* opt =0L )
            : DriverOptions( opt ), _useAsyncWrites( true ), _serialized( false )
        {
            
            const ConfigSet& limits = config().children();
            for (ConfigSet::const_iterator it = limits.begin(); it != limits.end(); ++it)
                OE_INFO << it->key() << " value " << it->value() << std::endl;

            driver() = "cache_sqlite3";
            config().getIfSet( "path", _path );
            config().getIfSet( "async_writes", _useAsyncWrites );
            config().getIfSet( "serialized", _serialized );

                

            if (config().hasChild("limit")) {
                const ConfigSet& limits = config().children();
                for (ConfigSet::const_iterator it = limits.begin(); it != limits.end(); ++it) {
                    if (it->key() != "limit")
                        continue;
                    std::string k = it->attr("name");
                    std::string size = it->attr("size");
                    if (k.empty() && !size.empty()) {
                        _sizes->operator[](k) = atoi(size.c_str());
                        OE_INFO << "Limit " << k << " to " << size << std::endl;
                    }
                }
            }
        }

    protected:
        Config toConfig() const {
            Config conf = DriverOptions::toConfig();
            conf.updateIfSet( "path", _path );
            conf.updateIfSet( "async_writes", _useAsyncWrites );
            conf.updateIfSet( "serialized", _serialized );

#if 0
            if (_sizes.isSet()) {
                ConfigSet childs;
                const std::map<std::string, unsigned int>& values = _sizes.get();
                for (std::map<std::string, unsigned int>::const_iterator it = values.begin(); it != values.end(); ++it) {
                    Config k(it->first);
                    k.attrs()["size"] = it->second;
                    childs.push_back(k);
                }
                conf.add(childs);
            }
#endif
            return conf;
        }

        optional<std::string> _path;
        optional<bool> _useAsyncWrites;
        optional<bool> _serialized;
        optional<std::map<std::string, unsigned int> >_sizes; // layer - MB
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_SQLITE3_CACHE_DRIVEROPTIONS

