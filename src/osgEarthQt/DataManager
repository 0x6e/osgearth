/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHQT_DATAMANAGER_H
#define OSGEARTHQT_DATAMANAGER_H 1

#include <osgEarthQt/Common>

#include <osgEarth/Map>

#include <QObject>

namespace{ struct DataManagerMapCallback; }

namespace osgEarth { namespace QtGui 
{
    using namespace osgEarth;

    class OSGEARTHQT_EXPORT DataManager : public QObject, public osg::Referenced
    {
    Q_OBJECT

    public:
      DataManager(osgEarth::Map* map);

      osgEarth::Map* map() { return _map.get(); }

      //void addAnnotation

    signals:
      void mapChanged();
      //void selectionChanged(

      void imageLayerAdded(osgEarth::ImageLayer* layer, unsigned int index);
      void imageLayerRemoved(osgEarth::ImageLayer* layer, unsigned int index);
      void imageLayerMoved(osgEarth::ImageLayer* layer, unsigned int oldIndex, unsigned int newIndex);

      void elevationLayerAdded(osgEarth::ElevationLayer* layer, unsigned int index);
      void elevationLayerRemoved(osgEarth::ElevationLayer* layer, unsigned int index);
      void elevationLayerMoved(osgEarth::ElevationLayer* layer, unsigned int oldIndex, unsigned int newIndex);

      void modelLayerAdded(osgEarth::ModelLayer* layer, unsigned int index);
      void modelLayerRemoved(osgEarth::ModelLayer* layer);
      void modelLayerMoved(osgEarth::ModelLayer* layer, unsigned int oldIndex, unsigned int newIndex);

      void maskLayerAdded(osgEarth::MaskLayer* layer);
      void maskLayerRemoved(osgEarth::MaskLayer* layer);

      //void annotationAdded

    protected:
      osg::ref_ptr<osgEarth::Map> _map;

      void onMapChanged(const osgEarth::MapModelChange& change);


      friend struct DataManagerMapCallback;
    };
} }

#endif // OSGEARTHQT_DATAMANAGER_H
