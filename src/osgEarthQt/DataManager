/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHQT_DATAMANAGER_H
#define OSGEARTHQT_DATAMANAGER_H 1

#include <osgEarthQt/Common>
#include <osgEarthQt/Actions>

#include <osgEarth/Map>
#include <osgEarth/MapNode>
#include <osgEarth/Viewpoint>

#include <osgEarthAnnotation/AnnotationNode>

#include <QObject>

namespace{ struct DataManagerMapCallback; }

namespace osgEarth { namespace QtGui 
{
    using namespace osgEarth;
    using namespace osgEarth::Annotation;
    using namespace osgEarth::QtGui;

    typedef std::vector< osg::ref_ptr<AnnotationNode> > AnnotationVector;

    class OSGEARTHQT_EXPORT DataManager : public QObject, public osg::Referenced, public ActionManager
    {
    Q_OBJECT

    public:
      DataManager(osgEarth::Map* map);
      DataManager(osgEarth::MapNode* mapNode);

      osgEarth::Map* map() { return _map.get(); }

      void addAnnotation(osgEarth::Annotation::AnnotationNode* annotation, osg::Group* parent/*=0L*/);
      void removeAnnotaton(osgEarth::Annotation::AnnotationNode* annotation, osg::Group* parent=0L);
      void getAnnotations(AnnotationVector& out_annotations) const;

      void getViewpoints(std::vector<osgEarth::Viewpoint>& out_viewpoints) const;

    public: //ActionManager
      void addBeforeActionCallback( ActionCallback* cb );
      void addAfterActionCallback( ActionCallback* cb );

      bool doAction( void* sender, Action* action, bool reversible =true );
      bool undoAction();
      bool canUndo() const;
      void clearUndoActions();
      ReversibleAction* getNextUndoAction() const;

    signals:
      void mapChanged();
      //void selectionChanged(

      void imageLayerAdded(osgEarth::ImageLayer* layer, unsigned int index);
      void imageLayerRemoved(osgEarth::ImageLayer* layer, unsigned int index);
      void imageLayerMoved(osgEarth::ImageLayer* layer, unsigned int oldIndex, unsigned int newIndex);

      void elevationLayerAdded(osgEarth::ElevationLayer* layer, unsigned int index);
      void elevationLayerRemoved(osgEarth::ElevationLayer* layer, unsigned int index);
      void elevationLayerMoved(osgEarth::ElevationLayer* layer, unsigned int oldIndex, unsigned int newIndex);

      void modelLayerAdded(osgEarth::ModelLayer* layer, unsigned int index);
      void modelLayerRemoved(osgEarth::ModelLayer* layer);
      void modelLayerMoved(osgEarth::ModelLayer* layer, unsigned int oldIndex, unsigned int newIndex);

      void maskLayerAdded(osgEarth::MaskLayer* layer);
      void maskLayerRemoved(osgEarth::MaskLayer* layer);

      void annotationAdded(osgEarth::Annotation::AnnotationNode* annotation);
      void annotationRemoved(osgEarth::Annotation::AnnotationNode* annotation);

    protected:
      void onMapChanged(const osgEarth::MapModelChange& change);

    private:
      osg::ref_ptr<osgEarth::Map> _map;
      Threading::ReadWriteMutex _dataMutex;
      AnnotationVector _annotations;
      std::vector<osgEarth::Viewpoint> _viewpoints;

      // ActionManager-related members
      std::list< osg::ref_ptr<Action> > _undoStack;
      typedef std::list< osg::ref_ptr<ActionCallback> > ActionCallbackList;
      ActionCallbackList _beforeCallbacks;
      ActionCallbackList _afterCallbacks;
      int _maxUndoStackSize;


      friend struct DataManagerMapCallback;
    };
} }

#endif // OSGEARTHQT_DATAMANAGER_H
