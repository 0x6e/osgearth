/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#if 0
#ifndef OSGEARTHFEATURES_STYLING_H
#define OSGEARTHFEATURES_STYLING_H 1

#include <osgEarthFeatures2/Common>
#include <osgEarthFeatures2/Query>
#include <osgEarthSymbology/Geometry>
#include <osgEarthSymbology/GeometrySymbol>
#include <osgEarth/Config>
#include <osg/Vec4>
#include <osg/Notify>
#include <list>

namespace osgEarth { namespace Features2
{
    class OSGEARTHFEATURES_EXPORT StyleComponent
    {
    };

#if 0
    /**
     * A Style defines the appearance of geometry or text.
     */
    class OSGEARTHFEATURES_EXPORT Style : public StyleComponent
    {
    public:
        Style( const Config& conf =Config() );

        /** Name of this style. */
        std::string& name() { return _name; }
        const std::string& name() const { return _name; }

        /** URL from which to read style data. This is mutually exlusive of storing
            style information from within the object. */
        optional<std::string>& url() { return _url; }
        const optional<std::string>& url() const { return _url; }


        /** Style information for line elements. */
        optional<Symbology::LineSymbol>& lineSymbolizer() { return _lineSymbolizer; }
        const optional<Symbology::LineSymbol>& lineSymbolizer() const { return _lineSymbolizer; }

        /** Style information for polygon elements. */
        optional<Symbology::PolygonSymbol>& polygonSymbolizer() { return _polygonSymbolizer; }
        const optional<Symbology::PolygonSymbol>& polygonSymbolizer() const { return _polygonSymbolizer; }

        /** Style information for text elements. */
        optional<Symbology::TextSymbol>& textSymbolizer() { return _textSymbolizer; }
        const optional<Symbology::TextSymbol>& textSymbolizer() const { return _textSymbolizer; }
        
        /** Convenience method to easily grab wither the line- or poly- color based
            on the geometry type. */
        osg::Vec4f getColor( const osgEarth::Symbology::Geometry::Type& geomType ) const;

    public:
        virtual Config toConfig() const;

    protected:
        void fromConfig( const Config& conf );
        void fromCSS( const std::string& css );

    protected:
        std::string                 _name;
        optional<std::string>       _url;
        optional<Symbology::LineSymbol>    _lineSymbolizer;
        optional<Symbology::PolygonSymbol> _polygonSymbolizer;
        optional<Symbology::TextSymbol>    _textSymbolizer;

    private:
        std::string _origType;
        std::string _origData;
    };

    typedef std::list< Style > StyleList;
    typedef std::map< std::string, Style > StyleMap;

#endif

    /**
     * A style selector lets you classify styles based on rules, such as a
     * feature query. By default the selector selects the style with the
     * same name as the selector, but you can override this by settings
     * the styleName property.
     */
    class OSGEARTHFEATURES_EXPORT StyleSelector : public StyleComponent
    {
    public:
        StyleSelector( const Config& conf =Config() );

    public: // properties

        /** Name of this style class. */
        std::string& name() { return _name; }
        const std::string& name() const { return _name; }

        /** Name of the style to select */
        optional<std::string>& styleName() { return _styleName; }
        const optional<std::string>& styleName() const { return _styleName; }

        /** Expression/spatial filter used to select items to which the style will apply */
        optional<Query>& query() { return _query; }
        const optional<Query>& query() const { return _query; }

    public: // methods

        /** Returns the styleName() property, it set; otherwise returns the selector name. */
        std::string getSelectedStyleName() const;

    public: //Configurable

        virtual void fromConfig( const Config& conf );
        virtual Config toConfig() const;

    protected:
        std::string _name;
        optional<std::string> _styleName;
        optional<Query> _query;
    };

    typedef std::list<StyleSelector> StyleSelectorList;



    class OSGEARTHFEATURES_EXPORT StyleCatalog : public Configurable
    {
    public:
        StyleCatalog( const Config& conf =Config() );

    public: // properties

        StyleSelectorList& selectors() { return _selectors; }
        const StyleSelectorList& selectors() const { return _selectors; }

        void addStyle( const Style& style );
        void removeStyle( const std::string& name );
        bool getStyle( const std::string& name, Style& out ) const;
        const Style& getDefaultStyle() const;

    public:
        virtual Config toConfig() const;
        virtual void fromConfig( const Config& conf );

    protected:
        StyleSelectorList _selectors;
        StyleMap _styles;
        //StyledLayers _namedLayers;

    private:
        Style _emptyStyle;
    };


} } // namespace osgEarth::Features2

#endif // OSGEARTHFEATURES_STYLING_H
#endif
