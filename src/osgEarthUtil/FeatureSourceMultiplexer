/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHUTIL_FEATURE_SOURCE_MULTIPLEXER
#define OSGEARTHUTIL_FEATURE_SOURCE_MULTIPLEXER

#include <osgEarthUtil/Common>
#include <osgEarthFeatures/FeatureSource>
#include <osgEarth/Layer>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    class FeaturePredicate : public osg::Referenced
    {
    public:
        virtual bool acceptFeature( Feature* f ) const =0;
    };

    class OSGEARTHUTIL_EXPORT VirtualFeatureSource : public FeatureSource
    {
    public:
        VirtualFeatureSource() { }

        void add( FeatureSource* source, FeaturePredicate* predicate );

    public: // FeatureSource
        virtual FeatureCursor* createFeatureCursor( const Query& query );
		virtual void initialize( const std::string& referenceURI );
        virtual FeatureProfile* createFeatureProfile();

    protected:
        struct Source {
            osg::ref_ptr<FeatureSource>      _source;
            osg::ref_ptr<FeaturePredicate>   _predicate;
        };
        typedef std::vector<Source> Sources;
        Sources _sources;
    };

    /**
     * Multiplexes one or more FeatureSource's into one or more map layers and
     * labeling groups.
     */
    class OSGEARTHUTIL_EXPORT FeatureSourceMultiplexer
    {
    public:
        FeatureSourceMultiplexer();

        /**
         * Creates a feature source that pulls features from an original data
         * source as long as they satisfy the predicate.
         */
        VirtualFeatureSource* createVirtualFeatureSource( const std::string& name );

        void add( VirtualFeatureSource* vfs, FeatureSource* src, FeaturePredicate* predicate );

    protected:
        struct Route {
            osg::ref_ptr<FeatureSource>      _source;
            osg::ref_ptr<FeaturePredicate>   _predicate;
        };
        typedef std::vector<Route> Routes;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_FEATURE_SOURCE_MULTIPLEXER
