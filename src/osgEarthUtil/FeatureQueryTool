/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHUTIL_FEATURE_QUERY_TOOL_H
#define OSGEARTHUTIL_FEATURE_QUERY_TOOL_H 1

#include <osgEarthUtil/Common>
#include <osgEarth/MapNode>
#include <osgEarth/GeoData>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/FeatureSource>
#include <osgEarthFeatures/FeatureSourceNode>
#include <osgGA/GUIEventHandler>
#include <osg/View>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Features;

    /**
     * Tool that let you query the map for Features generated from a FeatureSource.
     */
    class OSGEARTHUTIL_EXPORT FeatureQueryTool : public osgGA::GUIEventHandler
    {
    public:
        struct Callback : public osg::Referenced
        {
            // called when a valid feature is found under the mouse coords
            virtual void onHit( osg::View* view, FeatureSourceMultiNode* index, FeatureID fid ) =0;

            // called when no feature is found under the mouse coords
            virtual void onMiss( osg::View* view ) =0;
        };

    public:
        /**
         * Constructs a new feature query tool.
         *
         * @param mapNode
         *      Map node containing feature data to query
         * @param callbackToAdd
         *      (optional) convenience; calls addCallback with this parameter
         */
        FeatureQueryTool( 
            MapNode*  mapNode,
            Callback* callbackToAdd =0L );

        /**
         * Adds a feature query callback.
         */
        void addCallback( Callback* callback );


    public: // GUIEventHandler

        virtual bool handle( const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa );


    protected:
        MapNode*      _mapNode;
        osg::NodePath _mapNodePath;
        typedef std::vector< osg::ref_ptr<Callback> > Callbacks;
        Callbacks _callbacks;
        bool _mouseDown;
        float _mouseDownX, _mouseDownY;
    };


    //--------------------------------------------------------------------

    class OSGEARTHUTIL_EXPORT FeatureHighlightCallback : public FeatureQueryTool::Callback
    {
    public:
        virtual void onHit( osg::View* view, FeatureSourceMultiNode* index, FeatureID fid );

        virtual void onMiss( osg::View* view );

    protected:
        void clear();

        struct Selection {
            FeatureSourceMultiNode* _index;
            FeatureID               _fid;
            osg::Geode*             _geode;
            bool operator < ( const Selection& rhs ) const { return _fid < rhs._fid; }
        };
        typedef std::set<Selection> SelectionSet;
        SelectionSet _selections;
    };

} } // namespace osgEarthUtil

#endif // OSGEARTHUTIL_FEATURE_QUERY_TOOL_H
