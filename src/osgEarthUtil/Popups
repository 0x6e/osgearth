/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHUTIL_POPUPS
#define OSGEARTHUTIL_POPUPS

#include <osgEarthUtil/Common>
#include <osgEarthSymbology/Text>
#include <osg/Drawable>
#include <osg/Vec3d>
#include <osgText/Font>
#include <osgViewer/View>
#include <osgAnimation/EaseMotion>
#include <osgWidget/Frame>
#include <osgWidget/WindowManager>
#include <OpenThreads/Mutex>
#include <map>

namespace osgEarthUtil
{
    /**
     * Symbol for styling a popup.
     */
    class OSGEARTHUTIL_EXPORT PopupSymbol : public osgEarth::Symbology::TextSymbol
    {
    public:
        PopupSymbol();

    public:
        /** The border/background "theme" for the popup. */
        osgEarth::optional<std::string>& theme() { return _theme; }
        const osgEarth::optional<std::string>& theme() const { return _theme; }

        /** The default background color of the popup. */
        osgEarth::optional<osg::Vec4f>& backgroundColor() { return _backgroundColor; }
        const osgEarth::optional<osg::Vec4f>& backgroundColor() const { return _backgroundColor; }

        /** The background color of the popup when it has mouse focus. */
        osgEarth::optional<osg::Vec4f>& focusBackgroundColor() { return _focusBackgroundColor; }
        const osgEarth::optional<osg::Vec4f>& focusBackgroundColor() const { return _focusBackgroundColor; }

    protected:
        osgEarth::optional<std::string> _theme;
        osgEarth::optional<osg::Vec4f> _backgroundColor;
        osgEarth::optional<osg::Vec4f> _focusBackgroundColor;
    };

    /**
     * Abstract base class for popup types.
     */
    class OSGEARTHUTIL_EXPORT Popup : public osg::Referenced
    {
    public:

        /** Start the "appear" animation. Fades in the popup. */
        virtual void setAppear() =0;

        /** Start the "disappear" animation. Fades out the popup. */
        virtual void setDisappear() =0;
        
    public:

        /**
         * Access to the underlying frame widget for attaching to the scene graph. 
         * Attach under the Window Manager for screen space rendering; attach under
         * a MatrixTransform for world space.
         */
        virtual osgWidget::Frame* getWindow() = 0;

        virtual void attach(osg::Group* parent);
        virtual void detach(osg::Group* parent);
        void setWindowManager(osgWidget::WindowManager* wm) { _wm = wm; }
        osgWidget::WindowManager* getWindowManager() { return _wm.get(); }

    protected:

        osg::ref_ptr<osgWidget::WindowManager> _wm;
    };

    /**
     * A popup label containing text. Use the PopupManager to create one.
     * (was WidgetMessageBox)
     */
    class OSGEARTHUTIL_EXPORT TextPopup : public Popup
    {
    public:
        TextPopup( const PopupSymbol* symbol );

    public:

        /** Sets the text to use in the title section (top row) */
        void setTitleText(const std::string& text);

        /** Sets the text to use in the content section (below the top row) */
        void setMessageText(const std::string& text);

    public: // Popup interface

        void setAppear();
        void setDisappear();

    public:

        osgWidget::Frame* getWindow();

        bool create(osg::Image* themeMessage,
                    const std::string& titleText,
                    const std::string& messageText,
                    osgText::Font* font,
                    int fontSize);

        class OSGEARTHUTIL_EXPORT ColorAnimation : public osgWidget::Callback , public osg::NodeCallback
        {
        public:
            ColorAnimation(osgWidget::Frame* frame);

            void setSrcColor(const osg::Vec4& color);
            void setDstColor(const osg::Vec4& color);
            void setTextColor(const osg::Vec4& color);
            void setTitleColor(const osg::Vec4& color);

            bool operator()(osgWidget::Event& ev);
            void operator()(osg::Node* node, osg::NodeVisitor* nv);
            void ref() const { osgWidget::Callback::ref(); }
            void unref() const { osgWidget::Callback::unref(); }

        protected:

            typedef osgAnimation::OutCubicMotion WidgetMotion;
            WidgetMotion _motionOver;
            WidgetMotion _motionLeave;
    
            double _lastUpdate;
            osgWidget::Color _defaultColor;
            osgWidget::Color _overColor;
            osgWidget::Color _titleColor;
            osgWidget::Color _textColor;
            bool _over;
            osg::ref_ptr<osgWidget::Frame> _frame;
            float _width;
            float _height;
        };


        class ColorAnimationFadeInFadeOut : public osg::NodeCallback
        {
        public:
            ColorAnimationFadeInFadeOut(osgWidget::Frame* cb);
            void setSrcAlpha(float alpha);
            void setDstAlpha(float alpha);
            void operator()(osg::Node* node, osg::NodeVisitor* nv);
            void setAppear();
            void setDisappear();

        protected:

            typedef osgAnimation::OutCubicMotion WidgetMotion;
            WidgetMotion _motionOver;
            WidgetMotion _motionLeave;
    
            double _lastUpdate;
            float  _srcAlpha;
            float  _dstAlpha;
            bool _appear;
            bool _initialized;
            osg::ref_ptr<osgWidget::Frame> _frame;
        };


    protected:


        osgWidget::Label* createLabel(
            const std::string& string, 
            osgText::Font* font,
            int size,
            const osgWidget::Color& color,
            const osgWidget::Color& widgetColor = osgWidget::Color(0,0,0,0));
        
        osg::ref_ptr<osgWidget::Frame> _window;

        osg::ref_ptr<osgWidget::Label> _labelText;
        osg::ref_ptr<osgWidget::Label> _labelTitle;

        ColorAnimation* _colorAnimation;
        osg::ref_ptr<ColorAnimationFadeInFadeOut> _appearAnimation;
        osg::Vec4 _color;
        osg::Vec4 _focusColor;
        osg::Vec4 _textColor;
        osg::Vec4 _titleColor;

    };

    /**
     * Creates and manages popups associated with an OSG Viewer.
     */
    class OSGEARTHUTIL_EXPORT PopupManager : public osg::Referenced
    {
    public:
        PopupManager( osgViewer::View* view );

        osgWidget::WindowManager* getWindowManager() { return _windowManager.get(); }

        TextPopup* createTextPopup(
            const std::string& title,
            const std::string& content,
            const PopupSymbol* symbol);

    protected:
        osg::ref_ptr<osgWidget::WindowManager> _windowManager;
        unsigned int _widgetNumInstance;
    };


} // namespace osgEarthUtil

#endif // OSGEARTHUTIL_POPUPS
