/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHUTIL_SKY
#define OSGEARTHUTIL_SKY

#include <osgEarthUtil/Common>
#include <osgEarth/DateTime>
#include <osgEarth/Config>
#include <osg/Group>
#include <osg/View>
#include <osgDB/ReaderWriter>

namespace osgEarth {
    class MapNode;
}
namespace osgDB {
    class Options;
}

namespace osgEarth { namespace Util 
{
    using namespace osgEarth;

    /**
     * An Ephemeris gives the positions of naturally occurring astronimical
     * objects; in that case, the sun and the moon. Also includes some
     * related utility functions.
     */
    class OSGEARTHUTIL_EXPORT Ephemeris : public osg::Referenced
    {
    public:
        /**
        * Gets the moon position in ECEF coordinates at the given time
        */
        virtual osg::Vec3d getMoonPositionECEF(const DateTime& dt) const;

        /**
        * Gets the sun position in ECEF coordinates at the given time
        */
        virtual osg::Vec3d getSunPositionECEF(const DateTime& dt) const;

        /**
         * Gets an ECEF position from the right ascension, declination and range
         *
         * @param ra    Right ascension in radians
         * @param decl  Declination in radians
         * @param range Range in meters
         */
        osg::Vec3d getECEFfromRADecl(double ra, double decl, double range) const;
    };


    /**
     * Base Options structure for loading an environment node from
     * a plugin.
     */
    class SkyOptions : public DriverConfigOptions
    {
    public:
        SkyOptions( const ConfigOptions& options =ConfigOptions() ) : DriverConfigOptions(options) {
            fromConfig(_conf);
        }
        virtual ~SkyOptions() { }
        virtual Config getConfig() const {
            Config conf = DriverConfigOptions::getConfig();
            // future adds go here
            return conf;
        }

    protected:
        virtual void mergeConfig( const Config& conf ) {
            DriverConfigOptions::mergeConfig( conf );
            fromConfig( conf );
        }
        
    private:
        void fromConfig( const Config& conf ) {
            // future gets go here
        }
    };


    /**
    * Interface for classes that provide sky, lighting, and other 
    * environmental effect.
    */
    class OSGEARTHUTIL_EXPORT SkyNode : public osg::Group
    {
    public:
        /**
         * Creates a new SkyNode with the default built-in sky driver
         * and default options.
         */
        static SkyNode* create(
            osgEarth::MapNode* mapNode );
        
        /**
         * Creates a new SkyNode with custom options.
         */
        static SkyNode* create(
            const SkyOptions&  options,
            osgEarth::MapNode* mapNode );

    protected:
        // CTOR (abstract base class)
        SkyNode();
        SkyNode(const SkyOptions& options);

        // protected DTOR (heap-only)
        virtual ~SkyNode();

    public:
        /**
         * Gets/Sets the Ephemeris used to position the sun and the moon
         * based on date/time.
         */
        void setEphemeris(Ephemeris* ephemeris);
        const Ephemeris* getEphemeris() const;
       
        /**
         * Gets the date/time for which the enviroment is configured.
         * Pass in an optional View to get the date/time specific to
         * that View.
         */
        void setDateTime(const DateTime& dt);
        const DateTime& getDateTime() const;

        /** Whether the sun is visible */
        void setSunVisible(bool value);
        bool getSunVisible() const { return _sunVisible; }

        /** Whether the moon is visible */
        void setMoonVisible(bool value);
        bool getMoonVisible() const { return _moonVisible; }

        /** Whether the stars are visible */
        void setStarsVisible(bool value);
        bool getStarsVisible() const { return _starsVisible; }

        /** Access the osg::Light representing the sun */
        virtual osg::Light* getSunLight() = 0;

    public:
        
        /** Attaches this sky node to a view (placing a sky light). Optional */
        virtual void attach(osg::View* view, int lightNum) { }
        void attach(osg::View* view) { attach(view, 0); }

    protected:

        // impl class can override these events.
        virtual void onSetEphemeris() { }
        virtual void onSetDateTime() { }
        virtual void onSetMoonVisible() { }
        virtual void onSetStarsVisible() { }
        virtual void onSetSunVisible() { }

    private:

        osg::ref_ptr<Ephemeris> _ephemeris;
        DateTime                _dateTime;
        bool                    _sunVisible;
        bool                    _moonVisible;
        bool                    _starsVisible;

        void baseInit();
    };


    /**
     * Base class for an sky driver plugin implementation.
     */
    class OSGEARTHUTIL_EXPORT SkyDriver : public osgDB::ReaderWriter
    {
    protected:
        MapNode* getMapNode(const osgDB::Options* opt) const;
        const SkyOptions& getSkyOptions(const osgDB::Options* opt) const;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_SKY
