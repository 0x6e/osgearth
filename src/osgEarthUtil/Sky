/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHUTIL_SKY
#define OSGEARTHUTIL_SKY

#include <osgEarthUtil/Common>
#include <osgEarth/DateTime>
#include <osgEarth/Config>
#include <osg/Group>
#include <osg/View>
#include <osgDB/ReaderWriter>

namespace osgEarth {
    class MapNode;
}
namespace osgDB {
    class Options;
}

namespace osgEarth { namespace Util 
{
    using namespace osgEarth;

    /**
     * An Ephemeris gives the positions of naturally occurring astronimical
     * objects; in that case, the sun and the moon. Also includes some
     * related utility functions.
     */
    class OSGEARTHUTIL_EXPORT Ephemeris : public osg::Referenced
    {
    public:
        /**
        * Gets the moon position in ECEF coordinates at the given time
        */
        virtual osg::Vec3d getMoonPositionECEF(const DateTime& dt) const;

        /**
        * Gets the sun position in ECEF coordinates at the given time
        */
        virtual osg::Vec3d getSunPositionECEF(const DateTime& dt) const;

        /**
         * Gets an ECEF position from the right ascension, declination and range
         *
         * @param ra    Right ascension in radians
         * @param decl  Declination in radians
         * @param range Range in meters
         */
        osg::Vec3d getECEFfromRADecl(double ra, double decl, double range);
    };


    /**
     * Base Options structure for loading an environment node from
     * a plugin.
     */
    class OSGEARTHUTIL_EXPORT SkyOptions : public DriverConfigOptions
    {
    public:
        SkyOptions( const ConfigOptions& options =ConfigOptions() );
        virtual ~SkyOptions() { }
        virtual Config getConfig() const;

    protected:
        virtual void mergeConfig( const Config& conf );
        
    private:
        void fromConfig( const Config& conf );
    };


    /**
    * Interface for classes that provide sky, lighting, and other 
    * environmental effect.
    */
    class OSGEARTHUTIL_EXPORT SkyNode : public osg::Group
    {
    public:
        static SkyNode* create(
            const SkyOptions&  options,
            osgEarth::MapNode* mapNode );

    protected:
        // CTOR (abstract base class)
        SkyNode();

        // protected DTOR (heap-only)
        virtual ~SkyNode();

    public:
        /**
         * Gets/Sets the Ephemeris used to position the sun and the moon
         * based on date/time.
         */
        Ephemeris* getEphemeris() const;
        void setEphemeris(Ephemeris* ephemeris);
       
        /**
         * Gets the date/time for which the enviroment is configured.
         * Pass in an optional View to get the date/time specific to
         * that View.
         */
        const DateTime& getDateTime() const;
        void setDateTime(const DateTime& dt);

        /** Attaches this sky node to a view (placing a sky light). Optional */
        virtual void attach(osg::View* view, int lightNum) { }

        /** Whether the moon is visible */
        void setMoonVisible( bool value, osg::View* view =0L );
        bool getMoonVisible( osg::View* view =0L ) const;

        /** Whether the stars are visible */
        void setStarsVisible( bool value, osg::View* view =0L );
        bool getStarsVisible( osg::View* view =0L ) const;

    protected:

        // called by setEphemeris
        virtual void onSetEphemeris() { }

        // called by setDateTime */
        virtual void onSetDateTime() { }

    private:

        osg::ref_ptr<Ephemeris> _ephemeris;
        DateTime                _dateTime;
    };


    /**
     * Base class for an environment driver plugin implementation.
     */
    class OSGEARTHUTIL_EXPORT SkyDriver : public osgDB::ReaderWriter
    {
    protected:
        MapNode* getMapNode(const osgDB::Options* opt) const;
        const SkyOptions& getSkyOptions(const osgDB::Options* opt) const;
    };

#if 0
    /**
     * Factory for creating an EnvironmentNode from a plugin driver.
     */
    class OSGEARTHUTIL_EXPORT EnvironmentFactory
    {
    public:
        static SkyNode* create(
            const SkyOptions& options,
            const MapNode*    map );
    };
#endif

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_SKY
