/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHUTIL_FADELAYERNODE
#define OSGEARTHUTIL_FADELAYERNODE

#include <osg/Group>

#include <osgEarth/MapNode>

#include <osgEarthUtil/Common>


namespace osgEarthUtil
{
	/**
	*FadeLayerNode is a decorator node that controls how image layers are blended together
	*/
    class OSGEARTHUTIL_EXPORT FadeLayerNode : public osg::Group
    {
    public:
		/**
		*Creates a new FadeLayerNode
		*@param map
		*       The MapNode this FadeLayerNode will operate on.
		*/
        FadeLayerNode(osgEarth::Map* map);

		/**
		*Gets the opacity of the given layer
		*/
        float getOpacity(unsigned int layer) const;

		/**
		*Sets the opacity of the given layer
		*/
        void setOpacity(unsigned int layer, float opacity);

		/**
		*Gets whether the given layer is enabled
		*/
        bool getEnabled(unsigned int layer) const;

		/**
		*Sets whether the given layer is enabled
		*/
        void setEnabled(unsigned int layer, bool enabled);

		/**
		*Gets the Map that this FadeLayerNode is operating on
		*/
        osgEarth::Map* getMap() { return _map.get(); }

        virtual void traverse(osg::NodeVisitor& nv);

    protected:

        virtual void onMapLayerAdded(osgEarth::MapLayer* layer, unsigned int index);
		virtual void onMapLayerRemoved(osgEarth::MapLayer* layer, unsigned int index);
		virtual void onMapLayerMoved(osgEarth::MapLayer* layer, unsigned int prevIndex, unsigned int newIndex);


        friend struct Callback;

        struct Callback : public osgEarth::MapCallback
        {
        public:
            Callback(FadeLayerNode* fadeLayerNode): _fadeLayerNode(fadeLayerNode) { }

            void onMapLayerAdded(osgEarth::MapLayer* layer, unsigned int index) { _fadeLayerNode->onMapLayerAdded(layer, index);}
            void onMapLayerRemoved(osgEarth::MapLayer* layer, unsigned int index) { _fadeLayerNode->onMapLayerRemoved(layer, index);}
            void onMapLayerMoved(osgEarth::MapLayer* layer, unsigned int prevIndex, unsigned int newIndex) { _fadeLayerNode->onMapLayerMoved(layer, prevIndex, newIndex);}

            osg::observer_ptr<FadeLayerNode> _fadeLayerNode;
        };

        void resizeLists(unsigned int max);

        typedef std::vector<float> OpacityList;
        OpacityList _opacity;

        typedef std::vector<bool> EnabledList;
        EnabledList _enabled;

        void updateStateSet();

        osg::ref_ptr<osgEarth::Map> _map;

        osg::ref_ptr<Callback> _callback;
    };
}

#endif //OSGEARTHUTIL_FADELAYERNODE