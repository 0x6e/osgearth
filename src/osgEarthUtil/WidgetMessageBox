/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHUTIL_WIDGET_MESSAGE_BOX_H
#define OSGEARTHUTIL_WIDGET_MESSAGE_BOX_H 1

#include <osgEarthUtil/Common>
#include <osgEarthUtil/Widget>
#include <osgWidget/Frame>
#include <osgWidget/Window>
#include <osgWidget/Label>
#include <osgAnimation/EaseMotion>
#include <osg/NodeVisitor>

namespace osgEarthUtil
{

    class OSGEARTHUTIL_EXPORT WidgetMessageBox : public Widget
    {
    public:
        WidgetMessageBox();

        osgWidget::Frame* getButton();
        osgWidget::Frame* getWindow();

        bool create(osg::Image* themeMessage,
                    const std::string& titleText,
                    const std::string& messageText,
                    const std::string& buttonText,
                    osgText::Font* font,
                    int fontSize);

        void setTitleText(const std::string& text);
        void setMessageText(const std::string& text);
        
        const osg::Vec4& getColor() const;
        void setColor(const osg::Vec4& color);

        const osg::Vec4& getFocusColor() const;
        void setFocusColor(const osg::Vec4& color);


        class OSGEARTHUTIL_EXPORT ColorAnimation : public osgWidget::Callback , public osg::NodeCallback
        {
        public:
            ColorAnimation(osgWidget::Frame* frame);

            void setSrcColor(const osg::Vec4& color);
            void setDstColor(const osg::Vec4& color);

            bool operator()(osgWidget::Event& ev);
            void operator()(osg::Node* node, osg::NodeVisitor* nv);

        protected:

            typedef osgAnimation::OutCubicMotion WidgetMotion;
            WidgetMotion _motionOver;
            WidgetMotion _motionLeave;
    
            double _lastUpdate;
            osgWidget::Color _defaultColor;
            osgWidget::Color _overColor;
            bool _over;
            osg::ref_ptr<osgWidget::Frame> _frame;
            float _width;
            float _height;
        };

    protected:


        osgWidget::Label* createLabel(const std::string& string, osgText::Font* font, int size, const osgWidget::Color& color,const osgWidget::Color& widgetColor = osgWidget::Color(0,0,0,0));
        
        osg::ref_ptr<osgWidget::Frame> _window;
        osg::ref_ptr<osgWidget::Frame> _button;

        osg::ref_ptr<osgWidget::Label> _labelText;
        osg::ref_ptr<osgWidget::Label> _labelTitle;

        ColorAnimation* _colorAnimation;
        osg::Vec4 _color;
        osg::Vec4 _focusColor;
    };
}

#endif
