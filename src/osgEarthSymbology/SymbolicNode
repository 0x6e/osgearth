/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHSYMBOLOGY_SYMBOLICNODE_H
#define OSGEARTHSYMBOLOGY_SYMBOLICNODE_H 1

#include <osgEarthSymbology/Common>
#include <osgEarthSymbology/Style>
#include <osgEarthSymbology/Symbolizer>
#include <osg/Node>

namespace osgEarth { namespace Symbology
{
    /**
     * Abstract base class for all Symbol types.
     */
    class OSGEARTHSYMBOLOGY_EXPORT SymbolicNode : public osg::Group
    {
    public:
        /** Constructs a new symbolic node. */
        SymbolicNode();

        /** Copy constructor. */
        SymbolicNode( const SymbolicNode& rhs, const osg::CopyOp& op =osg::CopyOp::DEEP_COPY_ALL );

        META_Node(osgEarth::Symbology, SymbolicNode);

        /** The symbolizer that will render the geometry under this node. */
        void setSymbolizer( Symbolizer* sym );
        Symbolizer* getSymbolizer() { return _symbolizer.get(); }

        /** The style object that the symbolizer will use. */
        void setStyle(const Style* style ) { _style = style; }
        const Style* getStyle() { return _style.get(); }

        /** Data that the symbolizer will render. */
        void setDataSet( SymbolizerInput* dataSet ) { _dataSet = dataSet; }
        SymbolizerInput* getDataSet() { return _dataSet.get(); }

        /** The context object that the symbolizer will use. */
        void setContext( SymbolizerContext* context ) { _context = context; }
        SymbolizerContext* getContext() { return _context.get(); }

    public:
        /** Updates the symbology if a change is detected in the input dataset or the style.
         *  You usually do not need to call this function directly; it gets called during 
         *  the update traversal.
         */
        void updateSymbology();
        
    protected:
        osg::ref_ptr<const Style> _style;
        osg::ref_ptr<SymbolizerInput> _dataSet;
        osg::ref_ptr<SymbolizerContext> _context;
        osg::ref_ptr<Symbolizer> _symbolizer;
        osg::ref_ptr<Symbolizer::State> _state;
        osg::ref_ptr<osg::Group> _symGroup;
    };


} } // namespace osgEarth::Symbology

#endif // OSGEARTHSYMBOLOGY_SYMBOLICNODE_H
