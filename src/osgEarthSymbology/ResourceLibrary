/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHSYMBOLOGY_RESOURCE_LIBRARY_H
#define OSGEARTHSYMBOLOGY_RESOURCE_LIBRARY_H 1

#include <osgEarthSymbology/Common>
#include <osgEarthSymbology/SkinResource>
#include <osgEarth/ThreadingUtils>
#include <map>

namespace osgEarth { namespace Symbology
{
    /** 
     * ResourceLibrary manages a collection of external resources that a
     * build system can use the construct geometries.
     */
    class OSGEARTHSYMBOLOGY_EXPORT ResourceLibrary : public osg::Referenced
    {
    public:
        /**
         * Creates a new resource library
         * @param mutex Mutex to use to synchronize access to the library.
         */
        ResourceLibrary( Threading::ReadWriteMutex& mutex );

        /**
         * Adds a resoure to the library.
         */
        void addResource( Resource* resource );

        /**
         * Removes a resource from the library.
         */
        void removeResource( Resource* resource );


    public: // Skin resource functions

        /**
         * Finds and returns a Skin resource by name.
         */
        SkinResource* getSkin( const std::string& name ) const;

        /**
         * Returns a list of all Skin resources.
         */
        void getSkins( SkinResourceVector& output ) const;

        /**
         * Returns a list of all Skin resources that match the specified criteria
         */
        void getSkins( const SkinResourceQuery& query, SkinResourceVector& output ) const;


    public: // Model resource functions

        //TODO


    public: // serialization

        //virtual Config getConfig() const;
        //virtual void mergeConfig( const Config& conf );

    protected:
        Threading::ReadWriteMutex& _mutex;

        typedef std::map<std::string, osg::ref_ptr<SkinResource> > SkinResourceMap;
        SkinResourceMap _skins;
    };

} } // namespace osgEarth::Symbology

#endif // OSGEARTHSYMBOLOGY_RESOURCE_LIBRARY_H
