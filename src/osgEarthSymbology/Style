/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHSYMBOLOGY_STYLE_H
#define OSGEARTHSYMBOLOGY_STYLE_H 1

#include <osgEarthSymbology/Common>
#include <osgEarthSymbology/GeometrySymbol>
#include <osg/Object>
#include <vector>

namespace osgEarth { namespace Symbology 
{
    /**
     * A Style is a named collection of Symbols.
     */
    class OSGEARTHSYMBOLOGY_EXPORT Style : public osg::Object
    {
    public:
        typedef std::vector<osg::ref_ptr<Symbol> > SymbolList;

        Style();
        Style(const Style&, const osg::CopyOp&);
        META_Object(osgEarthSymbology, Style);

        int getRevision() const { return _revision; }
        void setRevision(int rev) { _revision = rev; }
        void dirty() { _revision++; }

        void addSymbol(Symbol* symbol);
        template<class T> T* getSymbol()
        {
            for (SymbolList::const_iterator it = _symbols.begin(); it != _symbols.end(); ++it)
            {
                Symbol* symbol = *it;
                T* s = dynamic_cast<T*>(symbol);
                if (s)
                    return s;
            }
            return 0L;
        }

        template<class T> const T* getSymbol() const
        {
            for (SymbolList::const_iterator it = _symbols.begin(); it != _symbols.end(); ++it)
            {
                Symbol* symbol = *it;
                const T* s = dynamic_cast<const T*>(symbol);
                if (s)
                    return s;
            }
            return 0L;
        }

    protected:
        int                         _revision;
        SymbolList                  _symbols;
    };

} } // namespace osgEarth::Symbology


#endif // OSGEARTHSYMBOLOGY_STYLE_H
