/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHSYMBOLOGY_MODEL_SYMBOL_H
#define OSGEARTHSYMBOLOGY_MODEL_SYMBOL_H 1

#include <osgEarth/Common>
#include <osgEarthSymbology/Symbol>

namespace osgEarth { namespace Symbology
{
    class OSGEARTHSYMBOLOGY_EXPORT ModelSymbol : public Symbol
    {
    public:
        enum Placement
        {
            PLACEMENT_CENTROID,
            PLACEMENT_INTERVAL,
            PLACEMENT_SCATTER
        };

        enum Clamping
        {
            CLAMP_NONE,
            CLAMP_TO_TERRAIN,
            CLAMP_RELATIVE_TO_TERRAIN
        };

    public:
        ModelSymbol( const Config& conf =Config() );

        /** URL of the model to use for substitution. */
        optional<std::string>& url() { return _url; }
        const optional<std::string>& url() const { return _url; }

        /** How to map feature geometry to model placement. (default is CENTROID) */
        optional<Placement>& placement() { return _placement; }
        const optional<Placement>& placement() const { return _placement; }

        /** How to clamp instances to the terrain (default is CLAMP_NONE) */
        optional<Clamping>& clamping() { return _clamping; }
        const optional<Clamping>& clamping() const { return _clamping; }

        /** For PLACEMENT_SCATTER/INTERVAL, the scattering density in instances per sqkm */
        optional<float>& density() { return _density; }
        const optional<float>& density() const { return _density; }

        /** Model instance scale factor */
        optional<osg::Vec3f>& scale() { return _scale; }
        const optional<osg::Vec3f>& scale() const { return _scale; }

        /** Seeding value for the randomizer */
        optional<unsigned>& randomSeed() { return _randomSeed; }
        const optional<unsigned>& randomSeed() const { return _randomSeed; }

    public:
        virtual Config getConfig() const;
        virtual void mergeConfig( const Config& conf );

    protected:
        optional<std::string> _url;
        optional<Placement>   _placement;
        optional<Clamping>    _clamping;
        optional<float>       _density;
        optional<osg::Vec3f>  _scale;
        optional<unsigned>    _randomSeed;
    };

} } // namespace osgEarth::Symbology

#endif
