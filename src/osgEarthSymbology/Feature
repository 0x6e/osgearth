#ifndef OSGEARTHSYMBOLOGY_FEATURE_H
#define OSGEARTHSYMBOLOGY_FEATURE_H 1

#include <osgEarthSymbology/Common>
#include <osgEarthSymbology/Geometry>
#include <list>
#include <map>

using namespace osgEarth;

namespace osgEarth { namespace Symbology 
{
    /**
     * Name/value pair table. In the future this will most likely evolve into
     * something with typed properties like in osgGIS.
     */
    typedef std::map<std::string, std::string> AttributeTable;

    /**
     * Basic building block of vector feature data.
     */
    class OSGEARTHSYMBOLOGY_EXPORT Feature : public osg::Object
    {
    public:
        Feature( long fid =0L );

        /** Copy contructor */
        Feature( const Feature& rhs, const osg::CopyOp& copyop =osg::CopyOp::DEEP_COPY_ALL );

        META_Object( osgEarthSymbology, Feature );

    public:

        const long& fid() const;

        Geometry* geometry() { return _geometry; }
        const Geometry* geometry() const { return _geometry; }

        template<typename T>
        T getAttr( const std::string& name, const T& defaultValue ) const;

        template<typename T>
        bool getAttr( const std::string& name, T& outputValue ) const;

        template<typename T>
        void setAttr( const std::string& name, const T& value );

    protected:
        long _fid;
        osg::ref_ptr<Geometry> _geometry;
        AttributeTable _attrs;
    };

    typedef std::list< osg::ref_ptr<Feature> > FeatureList;

} } // namespace osgEarth::Symbology

#endif // OSGEARTHSYMBOLOGY_FEATURE_H

