/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_SPLAT_SHADERS
#define OSGEARTH_SPLAT_SHADERS 1

namespace
{
    /**
     * NOTE: tokens of the form "$TOKEN" will be replaced at run time.
     */
    const char* splatVertexShader =
        "#version 120\n"

        "#pragma osgEarth include noise.glsl \n"

        // from the terrain engine
        "varying vec4 oe_layer_tilec; \n"
        "varying vec3 oe_Normal; \n"
        
        "uniform mat4 osg_ViewMatrixInverse; \n"
        "uniform mat4 $COVERAGE_TEXMAT_UNIFORM; \n"

        "varying float oe_splat_range; \n"
        "varying float oe_splat_slope; \n"
        "varying vec2 oe_splat_covtc; \n"

        "void oe_splat_vertex(inout vec4 VertexVIEW) \n"
        "{ \n"
        // range from camera to vertex
        "    oe_splat_range = -VertexVIEW.z/VertexVIEW.w; \n"        
        
        // calculate the coverage sampling coordinates. The texture matrix accounts
        // for any super-sampling that might be in effect for the current LOD.
        "    oe_splat_covtc = ($COVERAGE_TEXMAT_UNIFORM * oe_layer_tilec).st;\n"

        // calculate the approximate slope of the terrain at this vert.
        // [0..1] where 0=flat and 1=vertical.
        "    vec4 w4 = osg_ViewMatrixInverse * VertexVIEW; \n"
        //"    vec3 w3 = normalize(w4.xyz/w4.w); \n" // probably unnecessary
        "    oe_splat_slope = 1.0-dot( normalize(gl_NormalMatrix*w4.xyz), oe_Normal ); \n"
        "} \n";


    const char* splatFragmentShader =
        "#version 130\n"
        "#extension GL_EXT_texture_array : enable\n"
        
        // from the terrain engine:
        "varying vec4 oe_layer_tilec; \n"
        "uniform vec4 oe_tile_key; \n"

        // from the vertex shader:
        "varying float oe_splat_range; \n"
        "varying float oe_splat_slope; \n"
        "varying vec2 oe_splat_covtc; \n"

        // from SplatTerrainEffect:
        "uniform float oe_splat_intensity; \n"
        "uniform float oe_splat_warp; \n"
        "uniform float oe_splat_blur; \n"
        "uniform float oe_splat_scaleOffset; \n"
        "uniform sampler2D oe_splat_coverage_tex; \n"
        "uniform sampler2DArray oe_splat_tex; \n"

        "uniform sampler2D oe_terrain_tex; \n"
        "uniform mat4 oe_terrain_tex_mat; \n"
        "uniform float oe_splat_snow;\n"
        "uniform float oe_splat_max_range;\n"
        
        // debugging - noise parameters
        "uniform float freq;\n"
        "uniform float pers;\n"
        "uniform float lac;\n"
        "uniform float octaves;\n"
        "uniform float thresh;\n"
        "uniform float slope;\n"
        "uniform float saturate;\n"

        // See NoiseShaders
        "float oe_splat_noise2(in vec2);\n"
        "float oe_noise_fractal_2d(in vec2 seed, in float freq, in float pers, in float lac, in int octaves);\n"
        
        // Environment structure passed around locally.
        // (reminder: struct defs cannot include newlines for GLES)
        "struct oe_SplatEnv { "
        " float range; "
        " float elevation; "
        " float noise; "
        "}; \n"

        // creates a texel by sampling the splatting texture based
        // on the coverage value. (Generated in code)
        "vec4 oe_splat_getTexel(in float value, in vec2 splat_tc, oe_SplatEnv env);\n"
        
        // permutation vectors for the warper.
        // highly unlikely that we will use more than 2 or 3 of these in practice.
        "#define OE_SPLAT_MAX_SAMPLES 15\n"
        "const vec2 oe_splat_warpVecs[OE_SPLAT_MAX_SAMPLES] = vec2[]( vec2( -0.942016, -0.399062 ), vec2( 0.845586, -0.768907 ), vec2( 0.344959, 0.293878 ), vec2( -0.915886, 0.457714 ), vec2( -0.815442, -0.879125 ), vec2( -0.382775, 0.276768 ), vec2( 0.974844, 0.756484 ), vec2( 0.443233, -0.975116 ), vec2( 0.53743, -0.473734 ), vec2( -0.264969, -0.41893 ), vec2( 0.791975, 0.190909 ), vec2( -0.241888, 0.997065 ), vec2( -0.8141, 0.914376 ), vec2( 0.199841, 0.786414 ), vec2( 0.143832, -0.141008 )); \n"
        
        // Warps the coverage sampling coordinates to mitigate blockiness.
        "vec2 oe_splat_warpCoverageCoords(int sample, in vec2 splat_tc)\n"
        "{\n"
        "    vec2 v = oe_splat_warpVecs[sample]; \n"
        "    vec2 seed = oe_splat_covtc + v; \n"
        "    float n1 = oe_splat_noise2(seed*100.0); \n"
        "    vec2 tc = oe_splat_covtc + n1*v*oe_splat_warp; \n"
        "    return clamp(tc, 0.0, 1.0); \n"
        "}\n"

        // Samples the coverage data.
        "float oe_splat_getCoverage(in vec2 tc) \n"
        "{ \n"       
        "    vec4 texel = texture2D(oe_splat_coverage_tex, tc); \n" 
        "    return texel.r; \n"
        "} \n"

        // Generates a texel using nearest-neigher coverage sampling.
        "vec4 oe_splat_nearest(in vec2 splat_tc, in oe_SplatEnv env) \n"
        "{ \n"
        "    vec2 warped_tc = oe_splat_warpCoverageCoords(0, splat_tc);\n"
        "    float value  = oe_splat_getCoverage(warped_tc); \n"
        "    return oe_splat_getTexel(value*255.0, splat_tc, env); \n"
        "} \n"

        // Generates a texel using bilinear filtering on the coverage data.
        "vec4 oe_splat_bilinear(in vec2 splat_tc, in oe_SplatEnv env) \n"
        "{ \n"
        "    vec2 warped_tc = oe_splat_warpCoverageCoords(0, splat_tc);\n"
        "    float pixelWidth = oe_splat_blur/256.0; \n"
        "    float halfPixelWidth = 0.5*pixelWidth; \n"

        "    vec4 texel = vec4(0,0,0,1); \n"
        
        // Find the four quantized coverage coordinates that form a box around the actual
        // coverage coordinates, where each quantized coord is at the center of a coverage texel.
        "    vec2 sw = vec2(0); \n"
        "    vec2 ne = vec2(0); \n"
        "    vec2 rem = mod(warped_tc, pixelWidth); \n"
        "    sw.x = warped_tc.x - rem.x + (rem.x >= halfPixelWidth ? halfPixelWidth : -halfPixelWidth); \n"
        "    sw.y = warped_tc.y - rem.y + (rem.y >= halfPixelWidth ? halfPixelWidth : -halfPixelWidth); \n"
        "    ne = sw + pixelWidth; \n"
        "    vec2 nw = vec2(sw.x, ne.y); \n"
        "    vec2 se = vec2(ne.x, sw.y); \n"

        // Weighting of each coverage sample is the distance from the actual coord to the center point:
        "    vec2 sw_weight = 1.0-(abs(warped_tc-sw)/pixelWidth); \n"
        "    vec2 ne_weight = 1.0-sw_weight; \n"

        // Sample coverage values using quantized corner coords:
        "    float val_sw = oe_splat_getCoverage( clamp(sw,0.0,1.0) ); \n"
        "    float val_se = oe_splat_getCoverage( clamp(se,0.0,1.0) ); \n"
        "    float val_ne = oe_splat_getCoverage( clamp(ne,0.0,1.0) ); \n"
        "    float val_nw = oe_splat_getCoverage( clamp(nw,0.0,1.0) ); \n"

        // Detail splat:
        "    vec4 de_texel = vec4(0,0,0,0); \n"
        "    float de_weight = 0.0; \n"
        "    float thresh2 = clamp( thresh + slope*(1.0-oe_splat_slope), 0.0, 1.0); \n"
        "    if ( env.noise > thresh2 ) \n"
        "    { \n"
        //"        de_weight = clamp(2.0*(env.noise-thresh2)/(1.0-thresh2),0.0,1.0); \n"
        "        de_weight = clamp((env.noise-thresh2)/(1.0-thresh2),0.0,1.0); \n"
        "        de_texel = oe_splat_getTexel(240.0, splat_tc, env); \n"
        "        sw_weight *= (1.0-de_weight); \n"
        "        ne_weight *= (1.0-de_weight); \n"
        "    } \n"

        // Combine them based on their weighting:
        "    texel.rgb = \n"
        "        sw_weight.x * sw_weight.y * oe_splat_getTexel( val_sw*255.0, splat_tc, env ).rgb + \n"
        "        ne_weight.x * sw_weight.y * oe_splat_getTexel( val_se*255.0, splat_tc, env ).rgb + \n"
        "        ne_weight.x * ne_weight.y * oe_splat_getTexel( val_ne*255.0, splat_tc, env ).rgb + \n"
        "        sw_weight.x * ne_weight.y * oe_splat_getTexel( val_nw*255.0, splat_tc, env ).rgb + \n"
        "        de_weight * de_texel.rgb; \n"

        "    return texel; \n"
        "} \n"


        // Snow splatter. This will whiten the texel based on elevation.
        "void oe_splat_winter(in vec2 splat_tc, in oe_SplatEnv env, inout vec4 texel) \n"
        "{ \n"
        "    if ( env.elevation > oe_splat_snow ) \n"
        "    { \n"
        "        float snowiness = clamp(max(0.0, env.elevation-oe_splat_snow)/oe_splat_snow, 0.0, 0.8); \n"
        "        vec4 snow = vec4(1,1,1,1); \n"
        "        texel.rgb = mix(texel.rgb, snow.rgb, snowiness); \n"
        "    } \n"
        "} \n"

        // Gets the noise value at the given coordinates.
        // TODO: "if" this to use a texture versus the noise function.
        "float oe_splat_getNoise(in vec2 tc) \n"
        "{ \n"
        "    float n = oe_noise_fractal_2d(tc, freq, pers, lac, int(octaves)); \n"
        "    n = pow(n, 1.0-saturate); \n"
        "    return n; \n"
        "} \n"

        // Scales the incoming tile splat coordinates to match the requested
        // LOD level. We offset the level from the current tile key's LOD (.z)
        // because otherwise you run into single-precision jitter at high LODs.
        "vec2 oe_splat_getSplatCoords(float lod)"
        "{ \n"
        "    float dL = oe_tile_key.z - lod; \n"
        "    float factor = pow(2.0, dL); \n"
        "    vec2 scale = vec2(1.0/factor); \n"
        "    vec2 result = oe_layer_tilec.st * scale; \n"

        // For upsampling we need to calculate an offset as well
        "    if ( factor >= 1.0 ) \n"
        "    { \n"
        "        vec2 a = floor(oe_tile_key.xy / factor); \n"
        "        vec2 b = a * factor; \n"
        "        vec2 c = (a+1.0) * factor; \n"
        "        vec2 offset = (oe_tile_key.xy-b)/(c-b); \n"
        "        result += offset; \n"
        "    } \n"

        "    return result; \n"
        "} \n"

        // Main entry point for fragment shader.
        "void oe_splat_fragment(inout vec4 color) \n"
        "{ \n"
        "    float scaleOffset = oe_splat_scaleOffset >= 0.0 ? ceil(oe_splat_scaleOffset) : floor(oe_splat_scaleOffset); \n"

        // Populate the environment:
        "    float elevation = texture2D(oe_terrain_tex, oe_layer_tilec.st).r; \n"
        "    float noise = oe_splat_getNoise(oe_splat_covtc); \n"
        "    oe_SplatEnv env = oe_SplatEnv(oe_splat_range, elevation, noise); \n"

        // Mapping of view ranges to splat texture levels of detail.
        "#define RANGE_COUNT 9\n"
        "    const float ranges[RANGE_COUNT] = float[](  250.0, 500.0, 1000.0, 4000.0, 30000.0, 150000.0, 300000.0, 1000000.0, 5000000.0 );\n"
        "    const float lods  [RANGE_COUNT] = float[](  18.0,  17.0,   16.0,   14.0,    12.0,     10.0,      8.0,       6.0,       4.0 ); \n"

        // Choose the best range based on distance to camera.
        "    float d = clamp(oe_splat_range, ranges[0], ranges[RANGE_COUNT-1]); \n"

        "    vec4 texel; \n"
        "    bool detail = d < oe_splat_max_range; \n"

        // Find the 2 ranges bookending the camera range, and blend between then.
        // TODO: replace bilinear with nearest for far ranges?
        "    for(int i=0; i<RANGE_COUNT-1; ++i) \n"
        "    { \n"
        "        if ( d >= ranges[i] && d <= ranges[i+1] ) \n"
        "        { \n"
        "            float lod0 = lods[i] + scaleOffset; \n"
        "            vec2 splat_tc0 = oe_splat_getSplatCoords(lod0); \n"
        "            vec4 texel0 = detail ? oe_splat_bilinear(splat_tc0, env) : oe_splat_nearest(splat_tc0, env); \n"
        
        "            float lod1 = lods[i+1] + scaleOffset; \n"
        "            vec2 splat_tc1 = oe_splat_getSplatCoords(lod1); \n"
        "            vec4 texel1 = detail ? oe_splat_bilinear(splat_tc1, env) : oe_splat_nearest(splat_tc1, env); \n"

        "            float r = (d-ranges[i])/(ranges[i+1]-ranges[i]); \n"
        "            texel = mix(texel0, texel1, r); \n"
        
        "            oe_splat_winter(splat_tc1, env, texel);\n"

        "            break; \n"
        "        }\n"
        "    } \n"

        "    color = mix(color, texel, oe_splat_intensity*texel.a); \n"

        // uncomment to visualize slope.
        //"    color.rgb = vec3(oe_splat_slope,0,0);\n"
        "}\n";
}

#endif // OSGEARTH_SPLAT_SHADERS