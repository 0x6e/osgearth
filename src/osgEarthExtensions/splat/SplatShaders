/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_SPLAT_SHADERS
#define OSGEARTH_SPLAT_SHADERS 1

namespace
{
    /**
     * NOTE: tokens of the form "$TOKEN" will be replaced at run time.
     */
    const char* splatVertexShader =
        "#version 120\n"

        // from the terrain engine
        "varying vec4 oe_layer_tilec; \n"
        
        "uniform mat4 $COVERAGE_TEXMAT_UNIFORM; \n"

        "varying float oe_splat_distance; \n"
        "varying vec2 oe_splat_covtc; \n"

        "void oe_splat_vertex(inout vec4 VertexVIEW) \n"
        "{ \n"
        // range from camera to vertex
        "    oe_splat_distance = -VertexVIEW.z/VertexVIEW.w; \n"        
        
        // calculate the coverage sampling coordinates. The texture matrix accounts
        // for any super-sampling that might be in effect for the current LOD.
        "    oe_splat_covtc = ($COVERAGE_TEXMAT_UNIFORM * oe_layer_tilec).st;\n"
        "} \n";


    const char* splatFragmentShader =
        "#version 130\n"
        "#extension GL_EXT_texture_array : enable\n"
        
        // from the terrain engine:
        "varying vec4 oe_layer_tilec; \n"
        "uniform vec4 oe_tile_key; \n"

        // from the vertex shader:
        "varying float oe_splat_distance; \n"
        "varying vec2 oe_splat_covtc; \n"

        // from SplatTerrainEffect:
        "uniform float oe_splat_intensity; \n"
        "uniform float oe_splat_warp; \n"
        "uniform float oe_splat_scaleOffset; \n"
        "uniform sampler2D oe_splat_coverage_tex; \n"
        "uniform sampler2DArray oe_splat_tex; \n"

        "uniform sampler2D oe_terrain_tex; \n"
        "uniform float oe_splat_snow;\n"

        "uniform float oe_splat_blur; \n"

        // See NoiseShaders
        "float oe_splat_noise2(in vec2);\n"

        // creates a texel by sampling the splatting texture based
        // on the coverage value. (Generated in code)
        "vec4 oe_splat_getTexel(in float value, in vec2 splat_tc);\n"  
        
        // permutation vectors for the warper.
        // highly unlikely that we will use more than 2 or 3 of these in practice.
        "#define OE_SPLAT_MAX_SAMPLES 15\n"
        "const vec2 oe_splat_warpVecs[OE_SPLAT_MAX_SAMPLES] = vec2[]( vec2( -0.942016, -0.399062 ), vec2( 0.845586, -0.768907 ), vec2( 0.344959, 0.293878 ), vec2( -0.915886, 0.457714 ), vec2( -0.815442, -0.879125 ), vec2( -0.382775, 0.276768 ), vec2( 0.974844, 0.756484 ), vec2( 0.443233, -0.975116 ), vec2( 0.53743, -0.473734 ), vec2( -0.264969, -0.41893 ), vec2( 0.791975, 0.190909 ), vec2( -0.241888, 0.997065 ), vec2( -0.8141, 0.914376 ), vec2( 0.199841, 0.786414 ), vec2( 0.143832, -0.141008 )); \n"
        
        // Warps the coverage sampling coordinates to mitigate blockiness.
        "vec2 oe_splat_warpCoverageCoords(int sample, in vec2 splat_tc)\n"
        "{\n"
        "    vec2 v = oe_splat_warpVecs[sample]; \n"
        "    vec2 seed = oe_splat_covtc + v; \n"
        "    float n1 = oe_splat_noise2(seed*100.0); \n"
        "    vec2 tc = oe_splat_covtc + n1*v*oe_splat_warp; \n"
        "    return clamp(tc, 0.0, 1.0); \n"
        "}\n"

        // Generates a texel using nearest-neigher coverage sampling.
        "vec4 oe_splat_nearest(in vec2 splat_tc) \n"
        "{ \n"
        "    vec2 warped_tc = oe_splat_warpCoverageCoords(0, splat_tc);\n"
        "    float value  = texture2D(oe_splat_coverage_tex, warped_tc).r; \n"
        "    return oe_splat_getTexel(value*255.0, splat_tc); \n"
        "} \n"

        // Generates a texel using bilinear filtering on the coverage data.
        "vec4 oe_splat_bilinear(in vec2 splat_tc) \n"
        "{ \n"
        "    vec2 warped_tc = oe_splat_warpCoverageCoords(0, splat_tc);\n"
        "    float pixelWidth = oe_splat_blur/256.0; \n"
        "    float halfPixelWidth = 0.5*pixelWidth; \n"

        "    vec4 texel = vec4(0,0,0,1); \n"

        "    vec2 rem = mod(warped_tc, pixelWidth); \n"
        "    vec2 sw = vec2(0); \n"
        "    vec2 ne = vec2(0); \n"

        "    if ( rem.x >= halfPixelWidth ) { \n"
        "        sw.x = warped_tc.x - rem.x + halfPixelWidth; \n"
        "        ne.x = sw.x + pixelWidth; \n"
        "    } \n"
        "    else { \n"
        "        sw.x = warped_tc.x - rem.x - halfPixelWidth; \n"
        "        ne.x = sw.x + pixelWidth; \n"
        "    } \n"

        "    if ( rem.y >= halfPixelWidth ) { \n"
        "        sw.y = warped_tc.y - rem.y + halfPixelWidth; \n"
        "        ne.y = sw.y + pixelWidth; \n"
        "    } \n"
        "    else { \n"
        "        sw.y = warped_tc.y - rem.y - halfPixelWidth; \n"
        "        ne.y = sw.y + pixelWidth; \n"
        "    } \n"

        "    vec2 sw_weight = 1.0-(abs(warped_tc-sw)/pixelWidth); \n"
        "    vec2 ne_weight = 1.0-sw_weight; \n"

        "    float val_sw = texture2D(oe_splat_coverage_tex, clamp(sw,0.0,1.0)).r; \n"
        "    float val_se = texture2D(oe_splat_coverage_tex, clamp(vec2(ne.x,sw.y),0.0,1.0)).r; \n"
        "    float val_ne = texture2D(oe_splat_coverage_tex, clamp(ne,0.0,1.0)).r; \n"
        "    float val_nw = texture2D(oe_splat_coverage_tex, clamp(vec2(sw.x,ne.y),0.0,1.0)).r; \n"

        "    texel.rgb = \n"
        "        sw_weight.x * sw_weight.y * oe_splat_getTexel( val_sw*255.0, splat_tc ).rgb + \n"
        "        ne_weight.x * sw_weight.y * oe_splat_getTexel( val_se*255.0, splat_tc ).rgb + \n"
        "        ne_weight.x * ne_weight.y * oe_splat_getTexel( val_ne*255.0, splat_tc ).rgb + \n"
        "        sw_weight.x * ne_weight.y * oe_splat_getTexel( val_nw*255.0, splat_tc ).rgb; \n"

        "    return texel; \n"
        "} \n"


        // Snow splatter. This will whiten the texel based on elevation.
        "void oe_splat_winter(in vec2 splat_tc, inout vec4 texel) \n"
        "{ \n"
        "    float h = texture2D(oe_terrain_tex, oe_layer_tilec.st); \n"
        "    if ( h > oe_splat_snow ) \n"
        "    { \n"
        "        float snowiness = clamp(max(0.0, h-oe_splat_snow)/oe_splat_snow, 0.0, 0.8); \n"
        "        vec4 snow  = oe_splat_getTexel(220.0, splat_tc*8.0); \n"
        "        texel.rgb = mix(texel.rgb, snow.rgb, snowiness); \n"
        "    } \n"
        "} \n"


        // Scales the incoming tile splat coordinates to match the requested
        // LOD level. We offset the level from the current tile key's LOD (.z)
        // because otherwise you run into single-precision jitter at high LODs.
        "vec2 oe_splat_getSplatCoords(float lod)"
        "{ \n"
        "    float dL = oe_tile_key.z - lod; \n"
        "    float factor = pow(2.0, dL); \n"
        "    vec2 scale = vec2(1.0/factor); \n"
        "    vec2 result = oe_layer_tilec.st * scale; \n"

        // For upsampling we need to calculate an offset as well
        "    if ( factor >= 1.0 ) \n"
        "    { \n"
        "        vec2 a = floor(oe_tile_key.xy / factor); \n"
        "        vec2 b = a * factor; \n"
        "        vec2 c = (a+1.0) * factor; \n"
        "        vec2 offset = (oe_tile_key.xy-b)/(c-b); \n"
        "        result += offset; \n"
        "    } \n"

        "    return result; \n"
        "} \n"

        // Main entry point for fragment shader.
        "void oe_splat_fragment(inout vec4 color) \n"
        "{ \n"
        "    float scaleOffset = oe_splat_scaleOffset >= 0.0 ? ceil(oe_splat_scaleOffset) : floor(oe_splat_scaleOffset); \n"

        // Mapping of view ranges to splat texture levels of detail.
        "#define RANGE_COUNT 7\n"
        "    const float ranges[RANGE_COUNT] = float[](  1000.0, 4000.0, 30000.0, 150000.0, 300000.0, 1000000.0, 5000000.0 );\n"
        "    const float lods  [RANGE_COUNT] = float[](    16.0,   14.0,    12.0,     10.0,      8.0,       6.0,       2.0 ); \n"

        // Choose the best range based on distance to camera.
        "    float d = clamp(oe_splat_distance, ranges[0], ranges[RANGE_COUNT-1]); \n"

        "    vec4 texel; \n"

        // Find the 2 ranges bookending the camera range, and blend between then.
        "    for(int i=0; i<RANGE_COUNT-1; ++i) \n"
        "    { \n"
        "        if ( d >= ranges[i] && d <= ranges[i+1] ) \n"
        "        { \n"        
        "            float lod0 = lods[i] + scaleOffset; \n"
        "            vec2 splat_tc0 = oe_splat_getSplatCoords(lod0); \n"
        "            vec4 texel0 = oe_splat_bilinear(splat_tc0); \n"
        
        "            float lod1 = lods[i+1] + scaleOffset; \n"
        "            vec2 splat_tc1 = oe_splat_getSplatCoords(lod1); \n"
        "            vec4 texel1 = oe_splat_bilinear(splat_tc1); \n"

        "            float r = (d-ranges[i])/(ranges[i+1]-ranges[i]); \n"
        "            texel = mix(texel0, texel1, r); \n"
        
        "            oe_splat_winter(splat_tc1, texel);\n"

        "            break; \n"
        "        }\n"
        "    } \n"

        "    color = mix(color, texel, oe_splat_intensity*texel.a); \n"
        "}\n";
}

#endif // OSGEARTH_SPLAT_SHADERS