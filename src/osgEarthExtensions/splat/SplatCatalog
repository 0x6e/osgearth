/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_SPLAT_SPLAT_CATALOG
#define OSGEARTH_SPLAT_SPLAT_CATALOG 1

#include "SplatExport"
#include <osg/Referenced>

#include <osgEarth/Containers>
#include <osgEarth/URI>

namespace osg {
    class Texture2DArray;
}
namespace osgDB {
    class Options;
}

namespace osgEarth { namespace Splat
{
    /**
     * A single splatting class.
     */
    struct SplatClass // : public osg::Referenced
    {
        std::string   _name;
        optional<URI> _imageURI;

        SplatClass();
        SplatClass(const Config& conf);
    };

    /**
     * Lookup table of splatting classes.
     */
    typedef std::vector<SplatClass> SplatClasses;

    /**
     * An index that maps each class name to a texture array index.
     */
    typedef osgEarth::fast_map<std::string, unsigned> SplatArrayIndex;

    /**
     * Catalog of texture-splatting classes. Usually these correspond
     * to land use.
     */
    class SplatCatalog : public osg::Referenced
    {
    public:
        /**
         * Construct an empty catalog.
         */
        SplatCatalog();

        /**
         * The splatting classifications set.
         */
        const SplatClasses& getClasses() const { return _classes; }

        /**
         * Create a texture array from the images in the catalog.
         */
        bool createTextureAndIndex(
            const osgDB::Options*              options,
            osg::ref_ptr<osg::Texture2DArray>& out_texture,
            SplatArrayIndex&                   out_index) const;


    public: // serialization

        // populate this object from a Config
        void fromConfig(const Config& conf);

        // serialize this object to a Config.
        Config getConfig() const;


    protected:

        virtual ~SplatCatalog() { }

        optional<std::string> _name;
        optional<std::string> _description;
        SplatClasses          _classes;
    };

} } // namespace osgEarth::Splat

#endif // OSGEARTH_SPLAT_SPLAT_CATALOG
