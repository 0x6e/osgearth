/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_SPLAT_OPTIONS
#define OSGEARTH_DRIVER_SPLAT_OPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/URI>

namespace osgEarth { namespace Extensions { namespace Splat
{
    using namespace osgEarth;

    /**
     * Options governing the classification splatting engine.
     */
    class SplatOptions : public DriverConfigOptions // NO EXPORT; header only
    {
    public:
        /** URI of the splat texture catalog description file */
        optional<URI>& catalogURI() { return _catalogURI; }
        const optional<URI>& catalogURI() const { return _catalogURI; }
        
        /** URI of the legend that describes the values in the coverage layer and maps them
            to the catalog. */
        optional<URI>& legendURI() { return _legendURI; }
        const optional<URI>& legendURI() const { return _legendURI; }

        /** Name of the coverage layer. The layer should be installed in the Map and
            should be marked as shared. */
        optional<std::string>& coverageLayerName() { return _coverageLayerName; }
        const optional<std::string>& coverageLayerName() const { return _coverageLayerName; }

        /** Whether to splat the terrain after drawing the map's image layers. The default
            setting is to splat first and then draw imagery. */
        optional<bool>& drawAfterImageLayers() { return _drawAfterImageLayers; }
        const optional<bool>& drawAfterImageLayers() const { return _drawAfterImageLayers; }

    public:
        SplatOptions( const ConfigOptions& opt =ConfigOptions() ) : DriverConfigOptions( opt )
        {
            setDriver( "splat" );
            _drawAfterImageLayers.init(false);
            fromConfig( _conf );
        }

        virtual ~SplatOptions() { }

    public:
        Config getConfig() const {
            Config conf = DriverConfigOptions::getConfig();
            conf.updateIfSet("catalog",  _catalogURI);
            conf.updateIfSet("legend",   _legendURI);
            conf.updateIfSet("coverage", _coverageLayerName );
            conf.updateIfSet("draw_after_image_layers", _drawAfterImageLayers);
            return conf;
        }

    protected:
        void mergeConfig( const Config& conf ) {
            DriverConfigOptions::mergeConfig( conf );
            fromConfig( conf );
        }

    private:
        void fromConfig( const Config& conf ) {
            conf.getIfSet("catalog",  _catalogURI);
            conf.getIfSet("legend",   _legendURI);
            conf.getIfSet("coverage", _coverageLayerName );
            conf.getIfSet("draw_after_image_layers", _drawAfterImageLayers);
        }

        optional<URI>         _catalogURI;
        optional<URI>         _legendURI;
        optional<std::string> _coverageLayerName;
        optional<bool>        _drawAfterImageLayers;
    };

} } } // namespace osgEarth::Extensions::Splat

#endif // OSGEARTH_DRIVER_SPLAT_OPTIONS

