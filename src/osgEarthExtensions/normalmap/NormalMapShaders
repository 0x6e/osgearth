/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_NORMALMAP_SHADERS
#define OSGEARTH_NORMALMAP_SHADERS 1

#undef  MULTILINE
#define MULTILINE(...) #__VA_ARGS__
namespace
{
//---------------------------------------------------------

    const char* NormalMapVertexShader = MULTILINE(

        \n#version 110\n

        varying vec3 oe_nmap_up;
        varying vec3 oe_nmap_tangent;
        varying vec3 oe_nmap_bitangent;

        uniform mat4 osg_ViewMatrixInverse;

        void oe_nmap_vertex(inout vec4 VertexMODEL)
        {
            vec4 VertexVIEW = gl_ModelViewMatrix * VertexMODEL;
            vec3 world = normalize((osg_ViewMatrixInverse * VertexVIEW).xyz);
            vec3 t = cross(world, vec3(0,0,1));
            vec3 b = cross(world, t);

            // note: I think the following statement is a lie, the tile is translated but
            // not rotated by the engine. Need to change that. So in the meantime, we'll
            // just cheat and use the world up vector
            // since a terrain tile is always local x-east, tangent vector is:
//            vec3 t = cross(gl_Normal, vec3(0,-1,0));
//            vec3 b = cross(gl_Normal, t);

            // convert to view space
            oe_nmap_tangent = normalize(gl_NormalMatrix * t);
            oe_nmap_bitangent = normalize(gl_NormalMatrix * b);

            oe_nmap_up = gl_NormalMatrix * world;
        }
    );


//---------------------------------------------------------

    const char* NormalMapFragmentShader = MULTILINE(

        \n#version 110\n

        vec3 oe_global_Normal;

        uniform sampler2D oe_nmap_tex;
        uniform float oe_nmap_intensity;
        uniform float oe_nmap_scale;

        // from vertex shader
        varying vec3 oe_nmap_up;
        varying vec3 oe_nmap_tangent;
        varying vec3 oe_nmap_bitangent;

        varying vec4 oe_layer_tilec;

        void oe_nmap_fragment(inout vec4 color)
        {
            // quantize the scale factor
            float iscale = float(int(oe_nmap_scale));

            float intensity = oe_nmap_intensity;

            // The TBN "matrix" takes a vector from view space into tangent space.
            vec3 T = normalize(oe_nmap_tangent);
            vec3 B = normalize(oe_nmap_bitangent);
            vec3 N = normalize(oe_global_Normal);
    
            // sample the bump map, which is in model space.
            vec3 bump = normalize(texture2D(oe_nmap_tex, oe_layer_tilec.st*iscale).xyz * 2.0 - 1.0);

            // model to view space:
            bump = gl_NormalMatrix * bump;

            //// view to tangent space:
            //bump = normalize(vec3(dot(bump,T), dot(bump,B), dot(bump,N)));

            // just for fun.
            float slope = 2.0 * (1.0-dot(N, normalize(oe_nmap_up)));

            // permute the normal with the bump.
            oe_global_Normal = normalize(oe_global_Normal + bump*intensity*slope);
        }


    );
}

#endif // OSGEARTH_NormalMap_NOISE_SHADERS
